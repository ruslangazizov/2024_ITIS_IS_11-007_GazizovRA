строка
символ
SwiftBook
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
документация
развертывать
свертывать
документация
знакомство
Swift
язык
Swift
совместимость
версия
Swift
тур
Swift
руководство
Swift
основа
базовый
оператор
строка
символ
тип
коллекция
управление
поток
функция
замыкание
перечисление
структура
класс
свойство
метод
сабскрипт
наследование
инициализация
деинициализация
опциональный
последовательность
обработка
ошибка
согласованность
приведение
тип
вкладывать
тип
расширение
непрозрачный
тип
протокол
универсальный
шаблон
автоматический
подсчет
ссылка
ARC
безопасность
хранение
контроль
доступ
продвигать
оператор
справочник
язык
лексический
структура
тип
выражение
инструкция
объявление
атрибут
шаблон
параметр
аргумент
универсальный
тип
резюме
грамматика
строка
символ
строка
символ
строка
представлять
совокупность
символ
например
hello
world
albatross
строка
Swift
представлять
тип
String
значение
тип
String
получать
доступ
различный
способ
включая
коллекция
значение
тип
Character
тип
String
Character
Swift
предусматривать
быстрый
Unicode
способ
работа
текст
ваш
код
синтаксис
создание
манипулирование
строка
легкий
читабельный
включать
синтаксис
строковый
литерал
похожий
конкатенация
строка
простой
сложение
строка
помощь
оператор
изменчивость
строка
управлять
выбирать
присваивать
значение
константа
переменная
также
случай
любой
значение
Swift
также
мочь
использовать
строка
вставка
константа
переменный
литерал
выражение
длинный
строка
процесс
известный
интерполяция
строка
это
позволять
легко
создавать
пользовательский
значение
строка
отображение
хранение
вывод
информация
несмотря
простота
синтаксис
тип
String
Swift
иметь
быстрый
современный
реализация
каждый
строка
состоять
независимый
кодировка
символ
Unicode
обеспечивать
поддержка
доступ
это
символ
различный
Unicode
представление
заметка
тип
String
Swift
бесшовный
сшивать
класс
NSString
Foundation
работать
фреймворок
Foundation
Cocoa
Cocoa
Touch
весь
API
NSString
доступный
каждый
значение
тип
String
создаваемый
Swift
включая
возможность
String
который
описываться
глава
также
мочь
использовать
значение
тип
String
любой
API
который
использоваться
NSString
получение
дополнительный
информация
использование
String
Foundation
Cocoa
обращаться
книга
использование
Swift
Cocoa
Objective
строковый
литерал
мочь
включать
предопределять
String
значение
ваш
код
строковый
литерал
строковый
литерал
это
фиксировать
последовательность
текстовый
символ
окружать
пара
двойной
кавычка
использовать
строковый
литерал
начальный
значение
константа
переменная
let
Some
string
literal
value
замечать
Swift
выводить
тип
String
константа
someString
инициализировать
строковый
литеральный
значение
многострочный
литерал
строка
нужно
создавать
строка
который
поддерживать
многострочный
вид
использовать
литерал
многострочный
строка
последовательность
символ
оборачивать
двойной
кавычка
let
quotation
The
White
Rabbit
put
on
his
spectacles
Where
shall
I
begin
please
your
Majesty
he
asked
Begin
at
the
beginning
the
King
said
gravely
and
go
on
till
you
come
to
the
end
then
stop
многострочный
литерал
строка
включать
строка
открывать
закрывать
кавычка
строка
начинаться
первый
строка
открывать
кавычка
заканчиваться
строка
предшествовать
закрывать
кавычка
означать
строка
ниже
начинаться
заканчиваться
символ
перенос
строка
let
singleLineString
These
are
the
same
let
multilineString
These
are
the
same
ваш
исходный
код
включать
символ
перенос
строка
внутри
литерал
многострочный
строка
символ
перенос
строка
появляться
внутри
значение
строка
хотеть
использовать
символ
перенос
строка
сделать
ваш
код
читать
хотеть
символ
перенос
строка
отображаться
качество
часть
значение
строка
нужно
использовать
символ
обратный
слеш
конец
строка
let
softWrappedQuotation
The
White
Rabbit
put
on
his
spectacles
Where
shall
I
begin
please
your
Majesty
he
asked
Begin
at
the
beginning
the
King
said
gravely
and
go
on
till
you
come
to
the
end
then
stop
создавать
литерал
строка
который
начинаться
заканчиваться
символ
возврат
каретка
написать
пустой
строчка
самый
начало
конец
литерал
строка
например
let
lineBreaks
This
string
starts
with
a
line
break
It
also
ends
with
a
line
break
многострочный
строка
иметь
отступ
соответствие
окружающий
код
пробел
закрывать
группа
двойной
кавычка
сообщать
Swift
сколько
пробел
нужно
игнорировать
начало
каждый
строка
написать
дополнительный
пробел
напротив
какой-либо
строка
который
стоять
напротив
закрывать
кавычка
дополнительный
пробел
включать
значение
строка
let
linesWithIndentation
строка
начинаться
пробел
начало
строка
иметь
пробел
строка
начинаться
пробел
пример
высоко
смотреть
весь
литерал
многострочный
строка
иметь
отступ
первый
последний
строка
начинаться
пробел
средний
строка
иметь
отступ
начинаться
дополнительный
четыре
пробел
относительно
закрывать
группа
двойной
кавычка
специальный
символ
строковый
литерал
строковый
литерал
мочь
включать
следующий
специальный
символ
экранировать
специальный
символ
нулевой
символ
обратный
слэш
горизонтальный
табуляция
новый
строка
возвращение
каретка
двойной
кавычка
одиночный
кавычка
произвольный
скалярный
величина
юникод
записывать
вид
n
n
значный
шестнадцатеричный
число
значение
равный
действительный
точка
код
юникод
приводить
ниже
код
показывать
четыре
пример
специальный
символ
wiseWords
константа
содержать
экранировать
символ
двойной
кавычка
DollarSign
blackHeart
sparklingHeart
константа
показывать
скалярный
формат
юникод
let
wiseWords
Imagination
is
more
important
than
knowledge
Einstein
Imagination
is
more
important
than
knowledge
Einstein
let
dollarSign
Unicode
scalar
U
let
blackHeart
Unicode
scalar
U
let
sparklingHeart
Unicode
scalar
U
многострочный
строка
иметь
двойной
кавычка
вместо
мочь
включать
двойной
кавычка
внутрь
многострочный
строка
знак
экранирование
включать
символ
многострочный
строка
нужно
экранировать
хотя
кавычка
например
let
threeDoubleQuotes
Escaping
the
first
quote
Escaping
all
three
quotes
расширять
разделитель
строка
мочь
помещать
строковый
литерал
внутрь
расширенный
разделитель
включать
строка
специальный
символ
вызывать
эффект
символ
помещать
ваш
строка
кавычка
оборачивать
знак
например
печать
строковый
литерал
Line
выходить
последовательность
символ
символ
новый
строка
предложение
разбитый
строка
нужный
эффект
специальный
символ
строковый
литерал
сопоставлять
количество
знак
строка
символ
экранирование
например
ваш
строка
Line
хотеть
перенести
часть
предложение
новый
строка
мочь
использовать
Line
nLine
вместо
это
аналогично
также
разрывать
строка
строковый
литерал
создавать
использование
расширенный
разделитель
также
мочь
многострочный
строковый
литерал
мочь
использовать
расширять
разделитель
включение
текст
многострочный
строка
переопределять
поведение
умолчание
который
завершаться
строковый
литерал
например
let
threeMoreDoubleQuotationMarks
Here
are
three
more
double
quotes
инициализация
пустой
строка
создавать
пустой
String
значение
качество
отправной
точка
создание
длинный
строка
либо
присваивать
литерал
пустой
строка
переменная
либо
инициализировать
объект
String
c
помощь
синтаксис
инициализация
var
emptyString
empty
string
literal
var
anotherEmptyString
String
initializer
syntax
оба
строка
пустой
эквивалент
друг
друг
узнавать
пустой
String
значение
Boolean
свойство
isEmpty
if
emptyString
print
Nothing
to
see
here
выводить
Nothing
to
see
here
изменчивость
строка
мочь
указывать
конкретный
String
модифицировать
путем
присвоение
переменная
это
случай
модифицировать
присвоение
константа
это
случай
модифицировать
var
variableString
Horse
variableString
and
carriage
variableString
Horse
and
carriage
let
constantString
Highlander
constantString
and
another
Highlander
это
выдавать
ошибка
компиляция
строковый
константа
модифицировать
заметка
подход
отличаться
изменчивость
строка
Objective
Cocoa
выбирать
класс
NSString
NSMutableString
указывать
строка
изменять
строка
являться
тип
значение
тип
String
Swift
являться
тип
значение
создавать
новое
String
значение
это
значение
копироваться
оно
передаваться
функция
метод
оно
присваиваться
константа
переменная
каждый
случай
создаваться
новый
копия
существующий
String
значение
передаваться
либо
присваиваться
новый
копия
исходный
версия
тип
значение
описывать
глава
структура
перечисление
тип
значение
подход
копировать
умолчание
String
Swift
позволять
уверенный
передавать
функция
либо
метод
String
значение
очевидно
иметь
точно
String
значение
независимо
откуда
приходить
мочь
уверять
строка
который
передавать
модифицировать
модифицировать
компилятор
Swift
оптимизировать
использование
строка
фактический
копирование
строка
происходить
оно
действительно
необходимо
это
означать
получать
высокий
производительность
работа
строка
тип
значение
работа
символ
тип
String
Swift
представлять
коллекция
значение
Character
указанный
порядок
мочь
получать
доступ
отдельный
значение
Character
строка
помощь
итерация
строка
for
цикл
for
character
in
Dog
print
character
D
o
g
цикл
for
описывать
глава
цикл
for
кроме
создавать
отдельный
Character
константа
переменный
односимвольный
строковый
литерал
помощь
присвоение
тип
Character
let
exclamationMark
Character
значение
тип
String
мочь
создавать
путем
передача
массив
тип
Character
инициализатор
let
catCharacters
Character
C
a
t
let
catString
String
catCharacters
print
catString
выводить
Cat
конкатенация
строка
символ
значение
тип
String
мочь
добавлять
конкатенировать
помощь
оператор
сложение
let
hello
let
there
var
welcome
welcome
равный
hello
there
мочь
добавлять
значение
тип
String
существующий
значение
String
помощь
комбинированный
оператор
сложение
присвоение
var
instruction
look
over
instruction
instruction
равный
look
over
there
мочь
добавлять
значение
тип
Character
переменная
тип
String
использовать
метод
String
append
let
exclamationMark
Character
welcome
exclamationMark
welcome
равный
hello
there
заметка
мочь
добавлять
String
Character
существующий
переменная
тип
Character
значение
тип
Character
должно
состоять
одиночный
символ
использовать
многострочный
строковый
литерал
построение
длинный
строка
захотеть
каждый
строка
заканчиваться
разрыв
строка
включая
последний
например
let
badStart
one
two
let
end
three
print
badStart
end
Prints
two
lines
one
twothree
let
goodStart
one
two
print
goodStart
end
Prints
three
lines
one
two
three
код
высоко
конкантенация
badStart
вместе
end
создавать
двухстрочный
строка
который
иметь
результат
который
расчитывать
из-за
последний
строка
badStart
содержать
символ
перенос
строка
соединяться
первый
строка
end
наоборот
оба
конец
строка
goodStart
заканчиваться
символ
перенос
строка
результат
именно
хотеть
интерполяция
строка
интерполяция
строка
способ
создавать
новое
значение
тип
String
разный
константа
переменный
литерал
выражение
включая
значение
строковый
литерал
каждый
элемент
который
вставлять
строковый
литерал
должный
помещать
скобка
находиться
внутри
двойной
кавычка
литерал
открывать
скобка
должный
стоять
знак
обратный
слэш
let
multiplier
let
message
multiplier
times
is
Double
multiplier
message
равный
times
is
пример
высоко
значение
multiplier
включать
строка
multiplier
свой
очередь
multiplier
заменяться
фактический
значение
константа
multiplier
вычисляться
интерполяция
строка
создание
конечный
вариант
значение
multiplier
это
часть
больший
выражение
будущий
строка
это
выражение
высчитывать
значение
Double
multiplier
вставлять
результат
строка
это
случай
выражение
записывать
вид
Double
multiplier
являться
строковый
литерал
заметка
выражение
который
писать
внутри
скобка
интерполировать
строка
должный
содержать
неэкранированный
обратный
слэш
символ
перевод
строка
символ
возврат
каретка
однако
выражение
мочь
содержать
строковый
литерал
юникод
Unicode
юникод
являться
международный
стандарт
кодирование
представление
обработка
текст
разный
система
письмо
позволять
представлять
любой
символ
любой
язык
стандартизированный
форма
также
читать
записывать
символ
внешний
источник
источник
относиться
например
текстовый
файл
веб
тип
String
Character
Swift
полностью
совместимый
юникод
описывать
это
раздел
скалярный
величина
юникод
посмотреть
глубоко
увидеть
собственный
String
тип
Swift
построить
скалярный
значение
Unicode
scalar
юникод
скалярный
величина
юникод
являться
уникальный
число
символ
модификатор
например
U
LATIN
SMALL
LETTER
A
a
U
FRONT
BABY
CHICK
заметка
скалярный
величина
юникод
это
любой
точка
код
диапазон
U
U
включительно
U
U
включительно
скалярный
величина
юникод
включать
юникод
суррогатный
пара
точка
код
т
точка
код
диапазон
U
U
включительно
обращать
внимание
скалярный
величина
юникод
присваиваться
символ
некоторые
скалярный
величина
содержаться
резерв
будущее
присваивание
скалярный
величина
присваивать
символ
правило
иметь
название
например
LATIN
SMALL
LETTER
A
FRONT
BABY
CHICK
увидеть
пример
высоко
расширять
набор
графема
каждый
экземпляр
тип
Character
Swift
представлять
расширять
набор
графема
расширять
набор
графема
являться
последовательность
скалярный
величина
юникод
который
объединять
производить
читаемый
символ
пример
буква
представлять
вид
самостоятельный
скалярный
величина
юникод
LATIN
SMALL
LETTER
E
WITH
ACUTE
U
менее
буква
представлять
вид
пара
скалярный
величина
буква
е
LATIN
SMALL
LETTER
E
U
последующий
скалярный
величина
COMBINING
ACUTE
ACCENT
U
COMBINING
ACUTE
ACCENT
графически
присоединяться
предшествовать
скалярный
величина
превращать
e
момент
распознавать
юникод
символ
система
начинать
рендер
оба
случай
буква
представляться
вид
значение
Character
который
представлять
расширять
набор
графема
первый
случай
набор
содержать
скалярный
величина
второй
случай
let
eAcute
Character
let
combinedEAcute
Character
e
последующий
eAcute
равный
combinedEAcute
равный
расширять
набор
графема
это
удобный
способ
представление
многий
сложный
печатный
символ
значение
Character
например
Hangul
звук
корейский
алфавит
мочь
представлять
либо
предварительно
набирать
наоборот
раскладывать
ряд
символ
оба
вариант
определяться
Character
значение
Swift
let
precomposed
Character
let
decomposed
Character
равный
decomposed
равный
расширять
набор
графема
позволять
скаляр
заключать
символ
например
COMBINING
ENCLOSING
CIRCLE
U
заключать
скаляр
юникод
выглядеть
значение
тип
Character
let
enclosedEAcute
Character
enclosedEAcute
равный
скалярный
величина
юникод
региональный
символ
мочь
объединять
пара
создание
Character
значение
комбинация
REGIONAL
INDICATOR
SYMBOL
LETTER
U
U
REGIONAL
INDICATOR
SYMBOL
LETTER
S
U
let
regionalIndicatorForUS
Character
regionalIndicatorForUS
равный
подсчет
символ
получать
количество
значение
Character
строка
использовать
count
строка
let
unusualMenagerie
коала
улитка
пингвин
верблюд
print
unusualMenagerie
содержать
unusualMenagerie
символ
выводить
unusualMenagerie
содержать
символ
обращать
внимание
использование
расширенный
набор
графема
Character
значение
означать
конкатенация
модификация
мочь
повлиять
количество
символ
строка
например
инициализировать
новый
строка
словом
четыре
символ
cafe
затем
добавлять
COMBINING
ACUTE
ACCENT
U
конец
результирующий
строка
по-прежнему
иметь
количество
символ
четвертый
символ
e
var
word
cafe
print
количество
символ
слово
word
равно
word
выводить
количество
символ
слово
cafe
равно
word
COMBINING
ACUTE
ACCENT
U
print
количество
символ
слово
word
равно
word
выводить
количество
символ
слово
равно
заметка
расширять
набор
графема
состоять
скалярный
величина
юникод
это
означать
различный
символ
различный
отображение
символ
мочь
потребовать
разный
объем
память
хранение
из-за
это
символ
Swift
занимать
одинаковый
объем
память
строка
результат
это
количество
символ
строка
подсчитывать
итерация
строка
определение
граница
расширенный
набор
графема
работать
особенно
длинный
значение
строка
иметь
ввиду
свойство
count
должно
итерировать
скалярный
величина
юникод
строка
определять
символ
строка
количество
символ
возвращать
значение
count
совпадать
свойство
length
NSString
который
содержать
символ
длина
NSString
основываться
число
блок
код
UTF
представление
строка
количество
расширенный
набор
графема
внутри
строка
доступ
изменение
строка
получать
доступ
менять
строка
метод
свойство
помощь
синтаксис
сабскрипт
индекс
строка
каждый
String
значение
иметь
связанный
тип
индекс
String
соответствовать
позиция
каждый
Character
строка
упоминать
высоко
различный
символ
мочь
требовать
различный
объем
память
хранение
поэтому
определять
Character
определенный
позиция
необходимо
итерировать
каждый
скалярный
величина
юникод
начинать
конец
строка
причина
Swift
строка
мочь
проиндексировать
целочисленный
значение
использовать
свойство
startIndex
доступ
позиция
первый
Character
String
свойство
endIndex
это
позиция
последний
символ
String
результат
endIndex
свойство
являться
допустимый
значение
сабскрипт
строка
String
пустой
startIndex
endIndex
равный
получать
доступ
индекс
указанный
индекс
помощь
метод
index
before
index
after
доступ
индекс
располагать
соседство
указанный
индекс
мочь
использовать
метод
index
offsetBy
вместо
многократный
вызов
предыдущий
метод
мочь
использовать
синтаксис
индекс
доступ
Character
определенный
индекс
String
let
greeting
Guten
Tag
greeting
greeting
G
greeting
greeting
before
greeting
greeting
greeting
after
greeting
u
let
index
greeting
greeting
offsetBy
greeting
index
a
попытка
доступ
Character
индекс
предел
диапазон
строка
выдавать
сообщение
ошибка
выполнение
greeting
greeting
ошибка
greeting
after
endIndex
ошибка
использовать
свойство
indices
создавать
Range
индекс
использовать
доступ
отдельный
символ
строка
for
index
in
greeting
print
greeting
index
terminator
выводить
G
u
t
e
n
T
a
g
заметка
мочь
использовать
свойство
startIndex
endIndex
метод
index
before
index
after
index
offsetBy
любой
тип
который
соответствовать
протокол
Collection
это
включать
String
показывать
различный
тип
коллекция
например
Array
Dictionary
Set
добавление
удаление
вставлять
символ
строка
указанный
индекс
использовать
insert
at
метод
вставлять
содержимое
строка
указанный
индекс
использовать
метод
insert
contentsOf
at
var
welcome
hello
welcome
at
welcome
welcome
равный
hello
welcome
contentsOf
there
at
welcome
before
welcome
welcome
равный
hello
there
удалять
символ
строка
указанный
индекс
использовать
remove
at
хотеть
удалять
значение
указанный
диапазон
индекс
использовать
метод
removeSubrange
welcome
at
welcome
before
welcome
welcome
равно
hello
there
let
range
welcome
welcome
offsetBy
welcome
welcome
range
welcome
равно
hello
заметка
мочь
использовать
метод
insert
at
insert
contentsOf
at
remove
at
removeSubrange
любой
тип
который
соответствовать
протокол
RangeReplaceableCollection
это
включать
String
показывать
коллекция
Array
Dictionary
Set
подстрока
мочь
получать
подстрока
строка
например
использовать
сабскрипт
метод
тип
prefix
результат
который
возвращать
экземпляр
подстрока
строка
подстрока
Swift
иметь
практически
самый
метод
строка
означать
мочь
работать
подстрока
строка
однако
отличие
строка
использовать
подстрока
непродолжительный
время
пока
проводить
какой-то
манипуляция
строка
готовый
хранить
результат
продолжительный
время
конвертировать
подстрока
строка
например
let
greeting
Hello
world
let
index
greeting
of
greeting
let
beginning
greeting
index
beginning
is
Hello
конвертировать
строка
хранение
продолжительный
время
let
newString
String
beginning
строка
каждый
подстрока
иметь
область
память
храниться
символ
создавать
подстрока
разница
строка
подстрока
оптимизация
производительность
подстрока
использовать
часть
память
использовать
хранение
исходный
строка
часть
память
который
использоваться
хранение
подстрока
строка
иметь
похожий
оптимизация
строка
делить
память
считаться
равный
это
оптимизация
означать
потеря
производительность
копирование
память
изменять
строка
подстрока
сказать
ранее
подстрока
подходить
долгосрочный
хранение
повторно
использовать
хранилище
исходный
строка
исходный
строка
должный
находиться
память
пора
пока
подстрока
использоваться
пример
высоко
greeting
являться
строка
который
иметь
свой
область
память
создавать
символ
храниться
beginning
являться
подстрока
greeting
переиспользовать
память
который
использовать
greeting
наоборот
newString
являться
строка
который
создавать
подстрока
иметь
свое
хранилище
рисунок
ниже
помогать
разбираться
взаимоотношения
заметка
String
Substring
реализовать
протокол
StringProtocol
означать
очень
часто
бывать
удобно
строковый
манипуляция
принимать
значение
StringProtocol
мочь
вызывать
функция
значение
String
Substring
сравнение
строка
Swift
предусматривать
способ
сравнение
текстовый
значение
равенство
строка
символ
равенство
префикс
равенство
суффикс
равенство
строка
символ
равенство
строка
символ
проверяться
оператор
равенство
оператор
неравенство
описывать
глава
оператор
сравнение
let
quotation
похожий
let
sameQuotation
похожий
if
quotation
sameQuotation
print
строка
считаться
равный
выводить
строка
считаться
равный
String
значение
Character
значение
считаться
равный
расширять
набор
графема
канонически
эквивалентный
расширять
набор
графема
канонически
эквивалентный
иметь
языковой
смысл
внешний
вид
изначально
состоять
разный
скалярный
величина
юникод
например
LATIN
SMALL
LETTER
E
WITH
ACUTE
U
канонически
эквивалентный
LATIN
SMALL
LETTER
E
U
следовать
COMBINING
ACUTE
ACCENT
U
оба
расширенный
набор
графема
являться
допустимый
вариант
представление
символ
поэтому
считаться
канонически
эквивалентный
Voulez
un
использовать
LATIN
SMALL
LETTER
E
WITH
ACUTE
let
eAcuteQuestion
Voulez
un
caf
Voulez
un
использовать
LATIN
SMALL
LETTER
E
COMBINING
ACUTE
ACCENT
let
combinedEAcuteQuestion
Voulez
un
caf
if
eAcuteQuestion
combinedEAcuteQuestion
print
строка
считаться
равный
выводить
строка
считаться
равный
наоборот
LATIN
CAPITAL
LETTER
A
U
A
использовать
английский
язык
являться
эквивалент
CYRILLIC
CAPITAL
LETTER
A
U
использовать
русский
язык
символ
визуально
похожий
иметь
разный
языковой
смысл
let
latinCapitalLetterA
Character
let
cyrillicCapitalLetterA
Character
if
latinCapitalLetterA
cyrillicCapitalLetterA
print
строка
считаться
равный
выводить
строка
считаться
равный
заметка
сравнение
строка
символ
Swift
зависеть
локализация
равенство
префикс
суффикс
проверять
иметь
строка
определенный
строковый
префикс
суффикс
вызывать
hasPrefix
hasSuffix
метод
оба
который
принимать
единственный
аргумент
тип
String
возвращать
логический
значение
приводить
ниже
пример
рассматривать
массив
строка
представлять
местоположение
сцена
первый
акт
ромео
джульетта
шекспир
let
romeoAndJuliet
Act
Scene
Verona
A
public
place
Act
Scene
Capulet
mansion
Act
Scene
A
room
in
Capulet
mansion
Act
Scene
A
street
outside
Capulet
mansion
Act
Scene
The
Great
Hall
in
Capulet
mansion
Act
Scene
Outside
Capulet
mansion
Act
Scene
Capulet
orchard
Act
Scene
Outside
Friar
Lawrence
cell
Act
Scene
A
street
in
Verona
Act
Scene
Capulet
mansion
Act
Scene
Friar
Lawrence
cell
мочь
использовать
hasPrefix
метод
массив
romeoAndJuliet
подсчет
количество
сцена
первый
акт
пьеса
var
for
scene
in
romeoAndJuliet
if
scene
Act
print
сцена
акт
выводить
сцена
акт
точно
использование
hasSuffix
метода
подсчет
количество
сцена
который
происходить
внутри
вокруг
особняк
капулетти
клетка
монах
лоренцо
var
mansionCount
var
cellCount
for
scene
in
romeoAndJuliet
if
scene
Capulet
mansion
mansionCount
else
if
scene
Friar
Lawrence
cell
cellCount
print
mansionCount
сцена
особняк
cellCount
тюремный
сцена
выводить
сцена
особняк
тюремный
сцена
заметка
hasPrefix
hasSuffix
метод
использоваться
символ
канонический
эквивалентный
сравнение
расширенный
набор
графема
каждый
строка
описывать
глава
равенство
строка
символ
юникод
представление
строка
строка
юникод
записываться
текстовый
файл
какой-либо
хранилище
скалярный
величина
юникод
строка
кодироваться
несколько
юникод
форма
кодирование
каждый
форма
кодировать
строка
мелкий
кусок
известный
единица
код
сюда
включать
UTF
форма
кодирование
который
кодировать
строка
блок
код
UTF
форма
кодирование
который
кодировать
строка
качество
блок
код
UTF
форма
кодирование
который
кодировать
строка
единица
код
Swift
предоставлять
несколько
разный
способ
доступ
отображение
строка
юникод
мочь
итерировать
строка
for
получение
индивидуальный
Character
значение
расширенный
набор
графема
процесс
описывать
раздел
работа
символ
кроме
доступ
String
значение
юникод
отображение
набор
UTF
единица
код
получать
доступ
свойство
строка
набор
UTF
единица
код
получать
доступ
свойство
строка
набор
скалярный
значение
юникод
эквивалентный
форма
кодирование
UTF
доступ
свойство
строка
unicodeScalars
каждый
пример
данный
ниже
показывать
разный
отображение
следующий
строка
который
состоять
символ
o
g
DOUBLE
EXCLAMATION
MARK
U
DOG
FACE
U
let
dogString
Dog
отображение
UTF
мочь
получать
доступ
UTF
строка
итерировать
свойство
это
свойство
иметь
тип
String
который
представлять
набор
значение
unsigned
каждый
байт
представление
UTF
строка
for
codeUnit
in
dogString
print
codeUnit
terminator
print
приводить
высоко
пример
первый
десятичный
codeUnit
значение
отображать
символ
D
o
g
чей
UTF
отображение
ASCII
отображение
следующий
десятичный
codeUnit
значение
являться
байтный
UTF
отображение
символ
DOUBLE
EXCLAMATION
MARK
последний
четыре
codeUnit
значение
являться
четыре
байтный
UTF
отображение
символ
DOG
FACE
отображение
UTF
мочь
получать
доступ
UTF
строка
итерировать
свойство
это
свойство
иметь
тип
String
который
представлять
набор
значение
unsigned
каждый
блок
код
представление
UTF
строка
for
codeUnit
in
dogString
print
codeUnit
terminator
print
выводить
первый
десятичный
codeUnit
значение
отображать
символ
D
o
g
чей
UTF
отображение
строковый
отображение
UTF
скалярный
величина
юникод
отображать
ASCII
символ
четвертый
codeUnit
значение
являться
десятичный
эквивалент
шестнадцатеричный
который
отображать
скалярный
величина
юникод
U
символ
DOUBLE
EXCLAMATION
MARK
символ
отображать
вид
самостоятельный
единица
код
UTF
пятый
шестой
codeUnit
значение
являться
суррогатный
пара
UTF
отображение
символ
DOG
FACE
значение
иметь
высоко
суррогатный
значение
U
десятичный
значение
низко
суррогатный
значение
U
десятичный
значение
отображение
скалярный
величина
юникод
мочь
получать
доступ
скалярный
представление
Unicode
значение
String
путем
повторение
свойство
unicodeScalars
это
свойство
иметь
тип
UnicodeScalarView
который
представлять
коллекция
значение
тип
UnicodeScalar
каждый
UnicodeScalar
иметь
свойство
value
который
возвращать
значение
скаляр
представлять
предел
for
scalar
in
dogString
print
scalar
terminator
print
выводить
свойство
value
первый
десятичный
codeUnit
значение
снова
отображать
символ
D
o
g
четвертый
codeUnit
значение
снова
являться
десятичный
эквивалент
шестнадцатеричный
который
отображать
скалярный
величина
юникод
U
символ
DOUBLE
EXCLAMATION
MARK
свойство
value
пятый
последний
UnicodeScalar
являться
десятичный
эквивалент
шестнадцатеричный
значение
который
отображать
скалярный
величина
юникод
U
символ
DOG
FACE
качество
альтернатива
обращение
свойство
value
каждый
UnicodeScalar
значение
также
использовать
построение
новое
String
значение
например
помощь
интерполяция
строка
for
scalar
in
dogString
print
scalar
D
o
g
находить
ошибка
пожалуйста
выделять
фрагмент
текст
нажимать
Ctrl
находить
ошибка
пожалуйста
выделять
фрагмент
текст
нажимать
Ctrl
базовый
оператор
тип
коллекция
SwiftBook
самый
крупный
сообщество
iOS
разработчик
язык
Swift
социальный
сетяхYouTubeVKontakteFacebookЧат
instagramПолезноеPodlodka
подписываться
новость
политика
конфиденциальность
пользовательский
соглашение
находить
акулов
сообщать
опечатка
текст
который
отправлять
наш
редактор
ваш
комментарий
необязательно
отправлять
отмена
