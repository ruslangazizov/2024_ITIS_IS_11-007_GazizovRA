тур
Swift
SwiftBook
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
документация
развертывать
свертывать
документация
знакомство
Swift
язык
Swift
совместимость
версия
Swift
тур
Swift
руководство
Swift
основа
базовый
оператор
строка
символ
тип
коллекция
управление
поток
функция
замыкание
перечисление
структура
класс
свойство
метод
сабскрипт
наследование
инициализация
деинициализация
опциональный
последовательность
обработка
ошибка
согласованность
приведение
тип
вкладывать
тип
расширение
непрозрачный
тип
протокол
универсальный
шаблон
автоматический
подсчет
ссылка
ARC
безопасность
хранение
контроль
доступ
продвигать
оператор
справочник
язык
лексический
структура
тип
выражение
инструкция
объявление
атрибут
шаблон
параметр
аргумент
универсальный
тип
резюме
грамматика
тур
Swift
традиция
первый
программа
новый
язык
должный
выводить
экран
словосочетание
Hello
world
Swift
это
писаться
строка
print
Hello
world
писать
это
код
C
Objective
синтаксис
должный
знак
Swift
строка
являться
заканчивать
программа
нужно
дополнительно
импортировать
отдельный
библиотека
функция
ввод
обработка
строка
код
написать
глобальный
область
использоваться
входной
точка
программа
функция
main
нужный
также
нужно
писать
точка
запятая
каждый
строка
наглядно
показывать
решение
типичный
задача
это
введение
давать
достаточно
информация
начинать
писать
код
язык
Swift
волноваться
что-то
показываться
непонятный
показывать
это
введение
детально
поясняться
далее
книга
задание
хороший
усвоение
материал
использовать
Playground
Xcode
Playground
позволять
видеть
результат
мгновенно
редактирование
код
скачать
Playground
простой
значение
использовать
let
создание
константа
var
объявление
переменный
значение
константа
обязательно
должно
известно
момент
компиляция
оно
должно
присваиваться
строго
это
значит
мочь
использовать
константа
обозначение
значение
определять
единожды
использовать
многий
место
var
myVariable
myVariable
let
myConstant
константа
переменный
должный
иметь
тип
данный
который
хотеть
присваивать
хотя
должный
явно
объявлять
тип
присваивать
значение
создание
константа
переменная
компилятор
логически
предугадывать
тип
пример
высоко
компилятор
предугадывать
значение
myVariable
integer
целое
число
присваивать
значение
Integer
присваивать
значение
давать
достаточный
информация
значение
присваивать
указывать
тип
написать
название
разделять
помощь
двоеточие
let
implicitInteger
let
implicitDouble
let
explicitDouble
Double
задание
создавать
константа
явный
тип
Float
число
плавать
точка
значение
значение
должный
неявно
конвертироваться
тип
нужно
конвертировать
значение
тип
явно
создавать
экземпляр
нужный
тип
let
label
The
width
is
let
width
let
widthLabel
label
String
width
задание
попробовать
удалять
конвертирование
String
последний
строка
ошибка
получать
простой
способ
помещать
значение
строка
записывать
значение
скобка
поставлять
скобка
обратный
слэш
показывать
ниже
let
apples
let
oranges
let
appleSummary
I
have
apples
apples
let
fruitSummary
I
have
apples
oranges
pieces
of
fruit
задание
использовать
добавлять
выражение
вычисление
число
плавать
точка
строка
либо
вставлять
чей-то
имя
выражение
приветствие
использовать
двойной
кавычка
строка
который
занимать
несколько
строка
отступ
каждый
отдельный
строчка
строка
должный
совпадать
отступ
закрывать
тройка
двойной
кавычка
let
quotation
несмотря
пробел
слева
строка
иметь
отступ
исключение
строка
двойной
кавычка
мочь
внутри
строка
экранирование
apples
oranges
фрукт
массив
словарь
создаваться
помощь
квадратный
скобка
получать
доступ
значение
указывать
индекс
ключ
квадратный
скобка
ставить
запятая
последний
элемент
разрешаться
var
shoppingList
catfish
water
tulips
shoppingList
bottle
of
water
var
occupations
Malcolm
Captain
Kaylee
Mechanic
occupations
Jayne
Public
Relations
массив
автоматически
увеличиваться
добавление
элемент
shoppingList
blue
paint
print
shoppingList
создавать
пустой
массив
словарь
использовать
выражение
инициализация
let
emptyArray
String
let
emptyDictionary
String
Float
информация
тип
переменная
константа
должный
предугадывать
мочь
написать
пустой
массив
пустой
словарь
например
присваивать
новое
значение
переменная
назначать
аргумент
функция
shoppingList
occupations
управление
поток
создание
условие
использовать
if
switch
создание
цикл
использовать
for
while
repeat
скобка
вокруг
условие
цикл
обязательный
фигурный
скобка
вокруг
тело
условие
цикл
обязательный
let
individualScores
var
teamScore
for
score
in
individualScores
if
score
teamScore
else
teamScore
print
teamScore
инструкция
if
условие
должно
Boolean
выражение
это
означать
код
if
score
ошибочный
никакой
неявный
сравнение
ноль
мочь
использовать
if
let
вместе
работать
значение
который
мочь
отсутствовать
значение
представлять
опциональный
опциональный
значение
либо
содержать
значение
либо
содержать
nil
который
обозначать
отсутствие
значение
писать
вопросительный
знак
тип
значение
обозначать
оно
опциональный
var
optionalString
String
Hello
print
optionalString
nil
var
optionalName
String
John
Appleseed
var
greeting
Hello
if
let
name
optionalName
greeting
Hello
name
задание
поменять
optionalName
nil
приветствие
получать
добавлять
else
условие
который
устанавливать
приветствие
optionalName
равно
nil
опциональный
значение
nil
условие
считаться
false
код
фигурный
скобка
пропускаться
иначе
опциональный
значение
извлекаться
назначаться
константа
написать
let
делать
извлекать
значение
доступный
внутри
блок
код
способ
обработка
опциональный
значение
это
предоставление
дефолтное
значение
использовать
оператор
опциональный
значение
отсутствовать
использовать
дефолтное
значение
вместо
let
nickName
String
nil
let
fullName
String
John
Appleseed
let
informalGreeting
Hi
nickName
fullName
Switch
поддерживать
любой
данные
множество
оператор
сравнение
ограничивать
целый
число
сравнение
let
vegetable
red
pepper
switch
vegetable
case
celery
print
Add
some
raisins
and
make
ants
on
a
log
case
cucumber
watercress
print
That
would
make
a
good
tea
sandwich
case
let
x
where
x
pepper
print
Is
it
a
spicy
x
default
print
Everything
tastes
good
in
soup
задание
попробовать
удалять
блок
default
ошибка
получать
обращать
внимание
мочь
использовать
let
пример
создавать
константа
значение
который
соответствовать
условие
исполнение
код
внутри
switch
блок
case
который
попадать
условие
программа
выходить
инструкция
switch
исполнение
продолжаться
следующий
блок
сase
это
означать
нужно
прерывать
switch
каждый
блок
case
помощь
оператор
break
мочь
использовать
for
выполнять
итерация
элемент
словарь
указывать
пара
имя
каждый
пара
ключ
словарь
неупорядоченный
коллекция
ключ
перебираться
произвольный
порядок
let
interestingNumbers
Prime
Fibonacci
Square
var
largest
for
numbers
in
interestingNumbers
for
number
in
numbers
if
number
largest
largest
number
print
largest
задание
заменять
название
переменная
иметь
возможность
отслеживать
число
самый
большой
также
последовательность
это
число
использовать
while
повторять
код
пока
условие
поменяться
условие
цикл
также
конец
нужно
цикл
выполняться
хотя
var
n
while
n
n
print
n
var
m
repeat
m
while
m
print
m
мочь
ставить
индекс
использовать
оператор
создавать
диапазон
индекс
var
firstForLoop
for
i
in
firstForLoop
i
print
firstForLoop
использовать
создавать
диапазон
который
пропускать
последний
значение
либо
использовать
диапазон
который
включать
оба
значение
начальный
конечный
функция
замыкание
объявлять
функция
использовать
оператор
func
вызывать
функция
просто
написать
имя
список
аргумент
скобка
использовать
отделять
имя
тип
аргумент
возвращать
тип
функция
func
greet
name
String
day
String
String
return
Hello
name
today
is
day
greet
name
Bob
day
Tuesday
задание
удалять
аргумент
day
добавлять
аргумент
вставлять
сегодняшний
блюдо
день
приветствие
умолчание
функция
использовать
имя
параметр
ярлык
аргумент
написать
свой
собственный
ярлык
имя
параметр
функция
написать
знак
подчеркивание
пропускать
ярлык
func
greet
name
String
on
day
String
String
return
Hello
name
today
is
day
greet
John
on
Wednesday
использовать
кортеж
создание
единый
составной
значение
например
возвращение
несколько
значение
функция
ссылаться
элемент
кортеж
либо
имя
либо
порядковый
номер
func
calculateStatistics
scores
Int
min
Int
max
Int
sum
Int
var
min
scores
var
max
scores
var
sum
for
score
in
scores
if
score
max
max
score
else
if
score
min
min
score
sum
score
return
min
max
sum
let
statistics
calculateStatistics
scores
print
statistics
print
statistics
функция
мочь
вложенный
вкладывать
функция
иметь
доступ
переменный
который
объявлять
внешний
функция
мочь
использовать
вкладывать
функция
упорядочивать
код
длинный
сложный
функция
func
returnFifteen
Int
var
y
func
add
y
add
return
y
returnFifteen
функция
это
объект
первый
класс
это
означать
результат
функция
функция
func
makeIncrementer
Int
Int
func
addOne
number
Int
Int
return
number
return
addOne
var
increment
makeIncrementer
increment
функция
принимать
функция
качество
аргумент
func
hasAnyMatches
list
Int
condition
Int
Bool
Bool
for
item
in
list
if
condition
item
return
true
return
false
func
lessThanTen
number
Int
Bool
return
number
var
numbers
hasAnyMatches
list
numbers
condition
lessThanTen
функция
самый
дело
частный
случай
замыкание
замыкание
представлять
блок
код
который
вызывать
поздно
код
внутри
замыкание
иметь
доступ
объект
переменная
функция
который
создавать
рамка
замыкание
замыкание
находиться
запускаться
друг
блок
видеть
пример
вложенный
функция
мочь
написать
замыкание
имя
просто
обозначать
код
фигурный
скобка
круглый
скобка
внутри
скобка
использовать
in
разграничение
аргумент
возвращать
тип
тело
замыкание
numbers
number
Int
Int
in
let
result
number
return
result
задание
переписывать
замыкание
оно
вернуть
ноль
нечетный
число
несколько
способ
написать
замыкание
кратко
тип
замыкание
точно
известный
например
обратный
вызов
делегат
callback
мочь
пропускать
тип
аргумент
тип
возвращать
значение
либо
одиночный
оператор
замыкание
неявно
возвращать
значение
свой
единственный
выражение
let
mappedNumbers
numbers
number
in
number
print
mappedNumbers
мочь
обращаться
аргумент
номер
вместо
имя
подход
особенно
полезный
очень
короткий
замыкание
замыкание
передавать
последний
аргумент
функция
появляться
непосредственно
скобка
let
sortedNumbers
numbers
print
sortedNumbers
объект
класс
создавать
класс
использовать
оператор
class
далеко
имя
класс
объявление
свойство
класс
писаться
способ
объявление
константа
переменная
исключение
объявляться
предел
класс
подобно
это
метод
класс
объявляться
способ
функция
class
Shape
var
numberOfSides
func
simpleDescription
String
return
A
shape
with
numberOfSides
sides
задание
добавлять
константный
свойство
класс
использовать
let
также
добавлять
метод
который
принимать
какой-нибудь
параметр
экземпляр
класс
создаваться
помощь
добавление
скобка
имя
класс
получать
доступ
свойство
метод
класс
точка
var
shape
Shape
shape
var
shapeDescription
shape
версия
класс
Shape
отсутствовать
кое-что
важный
именно
инициализатор
нужный
подготовить
класс
создаваться
экземпляр
класс
создание
использовать
оператор
init
class
NamedShape
var
numberOfSides
Int
var
name
String
init
name
String
self
name
func
simpleDescription
String
return
A
shape
with
numberOfSides
sides
обращать
внимание
self
использоваться
различать
name
свойство
класс
name
аргумент
инициализатор
аргумент
инициализатор
передаваться
вызов
функция
создание
экземпляр
класс
каждый
свойство
должно
присваиваться
значение
либо
объявление
numberOfSides
либо
инициализатор
name
использовать
deinit
создание
деинициализатор
нужно
выполнять
некоторый
очистка
прежде
объект
освобождать
подкласс
разделяться
имя
родительский
класс
двоеточие
класс
необходимость
каждый
писать
родительский
класс
включать
мера
необходимость
метод
подкласс
который
переопределять
метод
родитель
отмечаться
помощь
оператор
override
попытка
переопределение
override
компилятор
выдавать
ошибка
компилятор
также
обнаруживать
метод
override
который
самый
дело
переопределять
никакой
метод
супер
класс
class
Square
NamedShape
var
sideLength
Double
init
sideLength
Double
name
String
self
sideLength
super
name
name
numberOfSides
func
area
Double
return
sideLength
sideLength
override
func
simpleDescription
String
return
A
square
with
sides
of
length
sideLength
let
test
Square
sideLength
name
my
test
square
test
test
задание
создавать
подкласс
Circle
класс
NamedShape
который
принимать
радиус
имя
качество
аргумент
инициализатор
реализовать
метод
area
метод
simpleDescription
класс
Circle
дополнение
простой
храниться
свойство
свойство
мочь
иметь
также
getter
setter
class
EquilateralTriangle
NamedShape
var
sideLength
Double
init
sideLength
Double
name
String
self
sideLength
super
name
name
numberOfSides
var
perimeter
Double
get
return
sideLength
set
sideLength
newValue
override
func
simpleDescription
String
return
An
equilateral
triangle
with
sides
of
length
sideLength
var
triangle
EquilateralTriangle
sideLength
name
a
triangle
print
triangle
triangle
print
triangle
setter
свойство
perimeter
новое
значение
иметь
неявный
имя
newValue
мочь
явно
назначать
имя
указывать
скобка
set
обращать
внимание
инициализатор
EqualiateralTriangle
иметь
разный
шаг
устанавливать
значение
свойство
объявлять
подкласс
вызывать
инициализатор
родитель
изменять
значение
свойство
объявлять
родитель
любой
дополнительный
работа
начальный
установка
который
использовать
метод
getter
ы
setter
ы
мочь
включать
это
место
нужно
вычислять
свойство
прежний
нужно
предоставлять
код
который
запускать
установка
новое
значение
использовать
willSet
didSet
например
класс
ниже
проверять
длина
сторона
треугольник
длина
сторона
квадрат
class
TriangleAndSquare
var
triangle
EquilateralTriangle
willSet
square
newValue
var
square
Square
willSet
triangle
newValue
init
size
Double
name
String
square
Square
sideLength
size
name
name
triangle
EquilateralTriangle
sideLength
size
name
name
var
triangleAndSquare
TriangleAndSquare
size
name
another
test
shape
print
triangleAndSquare
print
triangleAndSquare
triangleAndSquare
Square
sideLength
name
larger
square
print
triangleAndSquare
работать
опциональный
значение
мочь
написать
операция
метод
свойство
индексатор
значение
nil
игнорироваться
значение
выражение
становиться
nil
противный
случай
опциональный
значение
извлекаться
выполняться
оба
случай
значение
выражение
являться
опциональный
значение
let
optionalSquare
Square
Square
sideLength
name
optional
square
let
sideLength
optionalSquare
перечисление
структура
использовать
слово
enum
создание
перечисление
подобно
класс
именовать
тип
перечисление
мочь
иметь
метод
связанный
enum
Rank
Int
case
ace
case
two
three
four
five
six
seven
eight
nine
ten
case
jack
queen
king
func
simpleDescription
String
switch
self
case
return
ace
case
return
jack
case
return
queen
case
return
king
default
return
String
self
let
ace
Rank
let
aceRawValue
ace
задание
написать
функция
сравнивать
Rank
значение
помощь
сравнение
исходный
raw
значение
умолчание
Swift
присваивать
исходный
значение
начинать
ноль
увеличивать
единица
каждый
мочь
изменять
это
поведение
явно
указывать
значение
приводить
высоко
пример
Ace
явно
присваивать
исходный
значение
остальной
исходный
значение
присваиваться
порядок
также
мочь
использовать
строка
число
плавать
точка
качество
тип
исходный
значение
перечисление
использовать
свойство
rawValue
доступ
исходный
значение
элемент
перечисление
использовать
инициализатор
init
rawValue
создавать
экземпляр
перечисление
исходный
значение
if
let
convertedRank
Rank
rawValue
let
threeDescription
convertedRank
значение
элемент
перечисление
это
реальный
значение
просто
способ
написание
исходный
значение
фактически
случай
ясный
представление
исходный
значение
мочь
писать
enum
Suit
case
spades
hearts
diamonds
clubs
func
simpleDescription
String
switch
self
case
return
spades
case
return
hearts
case
return
diamonds
case
return
clubs
let
hearts
Suit
let
heartsDescription
hearts
задание
добавлять
метод
color
Suit
который
возвращать
black
spades
пик
clubs
трефы
возвращать
red
hearts
червы
diamonds
бубен
обращать
внимание
способ
обращение
элемент
перечисление
hearts
высоко
время
присвоение
значение
константа
hearts
обращение
элемент
перечисление
Suit
происходить
полный
имя
константа
иметь
явно
указанный
тип
внутри
switch
обращение
перечисление
происходить
сокращенный
форма
значение
self
известно
оно
Suit
мочь
использовать
сокращать
форма
каждый
тип
значение
известный
перечисление
иметь
raw
значение
значение
определять
качество
часть
определение
перечисление
значит
каждый
конкретный
экземпляр
кейс
raw
значение
вариант
использование
кейс
создание
значение
ассоциированный
кейс
значение
определяться
создавать
экземпляр
значение
мочь
разный
различный
экземпляр
кейс
перечисление
мочь
считать
ассоциативный
значение
вести
свойство
хранение
экземпляр
кейс
перечисление
например
представлять
кейс
который
заниматься
получение
данный
время
восход
солнце
закат
солнце
сервер
сервер
либо
предоставлять
затребовать
информация
либо
случай
ошибка
давать
описание
пошло
enum
ServerResponse
case
result
String
String
case
failure
String
let
success
ServerResponse
am
pm
let
failure
ServerResponse
Out
of
cheese
switch
success
case
let
sunrise
sunset
print
Sunrise
is
at
sunrise
and
sunset
is
at
sunset
case
let
message
print
Failure
message
задание
добавлять
третий
кейс
ServerResponse
инструкция
switch
обращать
внимание
время
восход
время
закат
получаться
значение
ServerResponse
вид
совпадать
случай
кейс
инструкция
switch
использовать
оператор
struct
создание
структура
структура
поддерживать
многие
характерный
черта
класс
число
метод
инициализатор
наиболее
важный
различие
класс
структура
структура
копироваться
передаваться
код
класс
передаваться
ссылка
struct
Card
var
rank
Rank
var
suit
Suit
func
simpleDescription
String
return
The
rank
of
suit
let
threeOfSpades
Card
rank
suit
let
threeOfSpadesDescription
threeOfSpades
задание
добавлять
метод
Card
который
создавать
полный
колода
карта
карта
каждый
комбинация
ранг
rank
масть
suit
протокол
расширение
использовать
оператор
protocol
объявление
протокол
protocol
ExampleProtocol
var
simpleDescription
String
get
mutating
func
adjust
класс
перечисление
структура
мочь
соответствовать
протокол
class
SimpleClass
ExampleProtocol
var
simpleDescription
String
A
very
simple
class
var
anotherProperty
Int
func
adjust
simpleDescription
Now
adjusted
var
a
SimpleClass
a
let
aDescription
a
struct
SimpleStructure
ExampleProtocol
var
simpleDescription
String
A
simple
structure
mutating
func
adjust
simpleDescription
adjusted
var
b
SimpleStructure
b
let
bDescription
b
задание
добавлять
дополнительный
требование
протокол
ExampleProtocol
изменение
нужно
вносить
SimpleClass
SimpleStructure
соответствовать
требование
это
протокол
обращать
внимание
использование
ключевой
слово
mutating
объявление
SimpleStructure
оно
обозначать
метод
который
модифицировать
структура
объявление
SimpleClass
нуждаться
mutating
метод
метод
класс
мочь
модифицировать
класс
использовать
оператор
extension
расширение
добавлять
новый
функционал
существующий
тип
объявление
новый
метод
вычислять
свойство
мочь
использовать
расширение
добавление
совместимость
протокол
тип
который
объявлять
друг
место
тип
который
импортировать
библиотека
фреймворок
extension
Int
ExampleProtocol
var
simpleDescription
String
return
The
number
self
mutating
func
adjust
self
print
задание
написать
расширение
тип
Double
который
добавлять
свойство
absoluteValue
мочь
использовать
имя
протокол
точно
именовать
тип
например
создавать
коллекция
объект
который
иметь
разный
тип
соответствовать
протокол
работать
значение
чей
тип
протокол
метод
предел
объявление
протокол
доступный
let
protocolValue
ExampleProtocol
a
print
protocolValue
print
protocolValue
раскомментировать
увидеть
ошибка
несмотря
переменный
protocolValue
иметь
исполняемый
тип
SimpleClass
компилятор
обрабатывать
тип
присваивать
ExampleProtocol
это
означать
смочь
случайно
получать
доступ
метод
свойство
который
класс
реализовать
дополнение
соответствие
протокол
обработка
ошибка
отображать
ошибка
использовать
любой
тип
который
соответствовать
протокол
Error
enum
PrinterError
Error
case
outOfPaper
case
noToner
case
onFire
использовать
ключевой
слово
throw
генерация
ошибка
throws
обозначение
функция
который
сгенерировать
ошибка
генерировать
ошибка
функция
функция
немедленно
возвращаться
код
который
вызывать
функция
обрабатывать
ошибка
func
send
job
Int
toPrinter
printerName
String
throws
String
if
printerName
Never
Has
Toner
throw
PrinterError
return
Job
sent
несколько
способ
обработка
ошибка
вариант
использование
do
блок
внутри
блок
do
маркировать
код
который
сгенерировать
ошибка
помощь
ключевой
слово
try
внутри
блок
catch
автоматически
присваиваться
имя
error
мочь
изменять
указывать
свое
собственный
do
let
printerResponse
try
send
job
toPrinter
Bi
Sheng
print
printerResponse
catch
print
error
задание
поменять
имя
принтер
Never
Has
Toner
функция
send
job
toPrinter
сгенерировать
ошибка
мочь
использовать
несколько
блок
catch
обработка
различный
ошибка
писать
некий
шаблон
каждый
блок
catch
точно
это
делать
условный
оператор
switch
do
let
printerResponse
try
send
job
toPrinter
Gutenberg
print
printerResponse
catch
PrinterError
print
I
just
put
this
over
here
with
the
rest
of
the
fire
catch
let
printerError
as
PrinterError
print
Printer
error
printerError
catch
print
error
задание
добавлять
код
внутри
блок
do
тип
ошибка
должный
сгенерировать
обрабатывать
первый
catch
блок
второй
третий
способ
обработка
ошибка
являться
ключевой
слово
try
который
позволять
изменять
результат
опциональный
тип
функция
генерировать
ошибка
генерироваться
конкретный
ошибка
результат
становиться
равный
nil
противный
случай
результат
содержать
опциональный
значение
возвращаться
функция
let
printerSuccess
try
send
job
toPrinter
Mergenthaler
let
printerFailure
try
send
job
toPrinter
Never
Has
Toner
использовать
ключевой
слово
defer
определение
блок
код
который
должный
выполнять
последний
очередь
непосредственно
выход
самый
функция
код
блок
defer
исполняться
независимо
генерироваться
ошибка
функция
мочь
использовать
defer
настройка
очистка
код
рядом
друг
друг
несмотря
мочь
исполнять
различный
время
var
fridgeIsOpen
false
let
fridgeContent
milk
eggs
leftovers
func
fridgeContains
food
String
Bool
fridgeIsOpen
true
defer
fridgeIsOpen
false
let
result
fridgeContent
food
return
result
fridgeContains
banana
print
fridgeIsOpen
универсальный
тип
написать
имя
внутри
угловой
скобка
создавать
универсальный
generic
функция
тип
func
makeArray
Item
repeating
item
Item
numberOfTimes
Int
Item
var
result
Item
for
in
numberOfTimes
result
item
return
result
makeArray
repeating
knock
numberOfTimes
мочь
создавать
общий
форма
функция
метод
класс
перечисление
структура
Reimplement
the
Swift
standard
library
optional
type
enum
OptionalValue
Wrapped
case
none
case
some
Wrapped
var
possibleInteger
OptionalValue
Int
possibleInteger
использовать
where
название
тип
указывать
список
требование
например
потребовать
тип
реализовать
протокол
потребовать
тип
одинаковый
потребовать
класс
иметь
определенный
суперкласс
func
anyCommonElements
T
Sequence
U
Sequence
lhs
T
rhs
U
Bool
where
T
Equatable
T
U
for
lhsItem
in
lhs
for
rhsItem
in
rhs
if
lhsItem
rhsItem
return
true
return
false
anyCommonElements
задание
модифицировать
функция
anyCommonElements
сделать
функция
который
возвращать
массив
элемент
общий
оба
последовательность
запись
T
Equatable
самый
T
where
T
Equatable
находить
ошибка
пожалуйста
выделять
фрагмент
текст
нажимать
Ctrl
совместимость
версия
Swift
руководство
Swift
SwiftBook
самый
крупный
сообщество
iOS
разработчик
язык
Swift
социальный
сетяхYouTubeVKontakteFacebookЧат
instagramПолезноеPodlodka
подписываться
новость
политика
конфиденциальность
пользовательский
соглашение
находить
акулов
сообщать
опечатка
текст
который
отправлять
наш
редактор
ваш
комментарий
необязательно
отправлять
отмена
