функция
SwiftBook
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
учебник
курсы
онлайн
iOS
курсы
подписка
копошилка
статья
видео
входить
вход
сброс
пароль
находить
документация
развертывать
свертывать
документация
знакомство
Swift
язык
Swift
совместимость
версия
Swift
тур
Swift
руководство
Swift
основа
базовый
оператор
строка
символ
тип
коллекция
управление
поток
функция
замыкание
перечисление
структура
класс
свойство
метод
сабскрипт
наследование
инициализация
деинициализация
опциональный
последовательность
обработка
ошибка
согласованность
приведение
тип
вкладывать
тип
расширение
непрозрачный
тип
протокол
универсальный
шаблон
автоматический
подсчет
ссылка
ARC
безопасность
хранение
контроль
доступ
продвигать
оператор
справочник
язык
лексический
структура
тип
выражение
инструкция
объявление
атрибут
шаблон
параметр
аргумент
универсальный
тип
резюме
грамматика
функция
функция
функция
это
самостоятельный
фрагмент
код
решающий
определенный
задача
каждый
функция
присваиваться
уникальный
имя
который
идентифицировать
вызывать
нужный
момент
язык
Swift
предлагать
достаточно
гибкий
единый
синтаксис
функция
простой
C
функция
параметр
сложный
метод
стиль
Objective
локальный
внешний
параметр
параметр
мочь
служить
простой
инициализация
значение
внутри
функция
изменение
внешний
переменный
выполнение
функция
каждый
функция
Swift
иметь
тип
описывать
тип
параметр
функция
тип
возвращать
значение
тип
функция
использовать
аналогично
любой
тип
Swift
т
е
функция
параметр
функция
либо
результирующий
значение
функция
также
мочь
вкладываться
друг
друг
позволять
инкапсулировать
определенный
алгоритм
внутри
локальный
контекст
объявление
вызов
функция
объявление
функция
задавать
несколько
именованный
типизированный
значение
который
входной
данные
параметр
также
тип
значение
который
функция
возвращать
качество
результат
возвращать
тип
каждый
функция
должно
имя
который
отражать
решать
задача
воспользоваться
функция
нужно
вызывать
указывать
имя
входной
значение
аргумент
соответствующий
тип
параметр
функция
аргумент
функция
должный
идти
порядок
указывать
объявление
функция
приводить
ниже
пример
функция
называться
greet
person
это
отражать
задача
получать
имя
пользователь
вежливо
поздороваться
это
задаваться
входной
параметр
тип
String
название
person
возвращаться
значение
тип
String
содержать
приветствие
func
greet
person
String
String
let
greeting
привет
person
return
greeting
весь
информация
указывать
объявление
функция
который
стоять
ключевой
слово
func
тип
возвращать
значение
функция
ставиться
результирующий
стрелка
это
дефис
правый
угловой
скобка
объявление
функция
узнавать
делать
входной
данные
результат
возвращать
объявлять
функция
однозначно
вызывать
любой
участок
код
print
greet
person
Anna
выводить
привет
Anna
print
greet
person
Brian
выводить
привет
Brian
функция
greet
person
вызываться
принимать
значение
тип
String
который
стоять
имя
person
например
greet
person
Anna
поскольку
функция
возвращать
значение
тип
String
вызов
функция
greet
person
завертывать
вызов
функция
print
separator
terminator
напечатать
получать
строка
увидеть
возвращать
значение
см
высоко
заметка
print
separator
terminator
ярлык
первый
аргумент
аргумент
являться
опциональный
поскольку
иметь
дефолтное
значение
умолчание
вариация
синтаксис
функция
рассматриваться
ниже
ярлык
аргумент
имя
параметр
функция
значение
умолчание
параметр
тело
функция
greet
person
начинаться
объявление
новый
константа
тип
String
название
greeting
устанавливаться
простой
сообщение
затем
это
приветствие
возвращаться
точка
вызов
функция
помощь
ключевой
слово
return
выполнение
оператор
return
greeting
функция
завершать
свой
работа
возвращать
текущий
значение
greeting
функция
greet
person
вызывать
многократно
разный
входной
значение
пример
высоко
показывать
функция
вызывать
аргумент
Anna
значение
Brian
каждый
случай
функция
возвращать
персональный
приветствие
упрощать
код
функция
записывать
создание
сообщение
возврат
строка
func
greetAgain
person
String
String
return
Hello
again
person
print
greetAgain
person
Anna
выводить
Hello
again
Anna
параметр
функция
возвращать
значение
язык
Swift
параметр
функция
возвращать
значение
реализовать
очень
гибко
разработчик
объявлять
любой
функция
простой
безымянный
параметр
сложный
множество
параметр
составной
имя
функция
параметр
некоторые
случай
функция
мочь
иметь
входной
параметр
пример
функция
входной
параметр
который
вызов
возвращать
значение
тип
String
func
sayHelloWorld
String
return
hello
world
print
sayHelloWorld
выводить
hello
world
обращать
внимание
несмотря
отсутствие
параметр
объявление
функция
равно
нужно
ставить
скобка
имя
вызов
имя
функция
также
указываться
пустой
скобка
функция
несколько
входной
параметр
функция
несколько
параметр
который
указываться
запятая
скобка
функция
принимать
параметр
имя
человек
булев
значение
приветствовать
возвращать
соответствующий
приветствие
это
человек
func
greet
person
String
alreadyGreeted
Bool
String
if
alreadyGreeted
return
greetAgain
person
person
else
return
greet
person
person
print
greet
person
Tim
alreadyGreeted
true
выводить
Hello
again
Tim
вызывать
функция
greet
person
alreadyGreeted
передавать
значение
тип
String
параметр
ярлык
person
булев
значение
ярлык
alreadyGreeted
взять
скобка
запятая
обращать
внимание
функция
отличаться
функция
greet
person
который
видеть
предыдущий
раздел
хотя
имя
оба
функция
начинаться
greet
функция
greet
person
alreadyGreeted
принимать
аргумент
greet
person
принимать
функция
возвращать
значение
некоторые
случай
функция
мочь
иметь
возвращать
тип
реализация
функция
greet
person
который
выводить
свое
собственный
значение
тип
String
возвращать
func
greet
person
String
print
привет
person
greet
person
Dave
выводить
привет
Dave
функция
выходной
значение
объявление
отсутствовать
результирующий
стрелка
возвращать
тип
заметка
строго
говорить
функция
greet
person
возвращать
значение
хотя
оно
нигде
указывать
функция
который
задавать
возвращать
тип
получать
специальный
тип
Void
суть
это
просто
пустой
кортеж
т
е
кортеж
ноль
элемент
который
записываться
выходной
значение
функция
игнорировать
func
printAndCount
string
String
Int
print
string
return
string
func
printWithoutCounting
string
String
let
printAndCount
string
string
printAndCount
string
hello
world
выводить
hello
world
возвращать
значение
printWithoutCounting
string
hello
world
выводить
hello
world
возвращать
значение
первый
функция
printAndCount
string
выводить
строка
затем
возвращать
подсчет
символ
вид
целый
Int
второй
функция
printWithoutCounting
string
вызывать
первый
игнорировать
возвращать
значение
вызов
второй
функция
первый
функция
по-прежнему
печатать
сообщение
возвращать
значение
использоваться
заметка
хотя
возвращать
значение
игнорировать
функция
должный
возвращать
задавать
объявление
функция
который
указывать
возвращать
тип
заканчиваться
оператор
который
возвращать
иначе
происходить
ошибка
время
компиляция
функция
возвращать
несколько
значение
мочь
использовать
кортежный
тип
качество
возвращать
тип
функция
возврат
несколько
значение
вид
составной
параметр
следующий
пример
объявлять
функция
minMax
array
который
искать
минимальный
максимальный
элемент
массив
тип
Int
func
minMax
array
Int
min
Int
max
Int
var
currentMin
array
var
currentMax
array
for
value
in
array
array
if
value
currentMin
currentMin
value
else
if
value
currentMax
currentMax
value
return
currentMin
currentMax
функция
minMax
array
возвращать
кортеж
значение
тип
Int
это
значение
присваивать
имя
min
max
обращаться
запрос
возвращать
тип
функция
тело
функция
minMax
array
начинаться
инициализация
рабочий
переменный
currentMin
currentMax
значение
первый
целый
элемент
массив
затем
функция
последовательно
проходить
остальной
значение
массив
сравнивать
значение
currentMin
currentMax
соответственно
самый
маленький
самый
большой
значение
возвращаться
внутри
кортеж
тип
Int
имя
элемент
кортеж
указывать
возвращать
тип
функция
обращаться
точка
считывать
значение
let
bounds
minMax
array
print
min
is
bounds
and
max
is
bounds
выводить
min
is
and
max
is
обращать
внимание
элемент
кортеж
нужно
давать
название
момент
возвращение
кортеж
функция
имя
указывать
часть
возвращать
тип
функция
опциональный
кортеж
возвращать
тип
возвращать
функция
кортеж
иметь
пустой
значение
следовать
объявлять
опциональный
кортеж
т
е
кортеж
который
равняться
nil
сделать
возвращать
кортеж
опциональный
нужно
поставлять
вопросительный
знак
закрывать
скобка
Int
Int
String
Int
Bool
заметка
кортеж
вид
Int
Int
это
самый
кортеж
содержать
опционал
Int
Int
кортеж
являться
опционал
обязанный
состоять
опциональный
значение
функция
minMax
array
высоко
возвращать
кортеж
значение
тип
Int
однако
проверять
корректность
передаваемый
массив
аргумент
array
содержать
пустой
массив
который
count
равно
функция
minMax
вид
приводить
высоко
выдавать
ошибка
выполнение
попытаться
обращаться
элемент
array
устранение
это
недочет
переписывать
функция
minMax
array
возвращать
кортеж
который
случай
пустой
массив
принимать
значение
nil
func
minMax
array
Int
min
Int
max
Int
if
array
return
nil
var
currentMin
array
var
currentMax
array
for
value
in
array
array
if
value
currentMin
currentMin
value
else
if
value
currentMax
currentMax
value
return
currentMin
currentMax
проверять
возвращать
версия
функция
minMax
array
фактический
значение
кортеж
nil
использовать
привязка
опционал
if
let
bounds
minMax
array
print
min
is
bounds
and
max
is
bounds
выводить
min
is
and
max
is
функция
неявный
возвращать
значение
тело
функция
состоять
единственный
выражение
функция
неявно
возвращать
это
выражение
например
оба
функция
пример
ниже
иметь
поведение
func
greeting
for
person
String
String
привет
person
print
greeting
for
дейв
выводить
привет
дейв
func
anotherGreeting
for
person
String
String
return
привет
person
print
anotherGreeting
for
дейв
выводить
привет
дейв
поведение
функция
greeting
for
заключаться
просто
вернуть
приветственный
сообщение
означать
мочь
использовать
сокращать
запись
функция
функция
anotherGreeting
for
возвращать
самый
приветственный
сообщение
использовать
ключевой
слово
return
образ
писать
функция
который
состоять
лишь
возвращать
значение
мочь
опускать
слово
return
увидеть
глава
сокращенный
вариант
объявление
геттер
геттер
использовать
сокращать
форма
запись
опускать
словом
return
заметка
код
который
написать
неявный
возвращать
значение
должный
иметь
это
самый
возвращать
значение
например
мочь
использовать
print
неявный
возвращать
значение
однако
мочь
использовать
функция
который
возвращать
значение
например
fatalError
Oh
no
качество
неявный
возвращать
значение
Swift
знать
неявный
возврат
происходить
ярлык
аргумент
имя
параметр
функция
каждый
параметр
функция
иметь
ярлык
аргумент
имя
параметр
ярлык
аргумент
использоваться
вызов
функция
каждый
параметр
вызов
функция
записываться
ярлык
аргумент
стоящий
имя
параметр
использоваться
реализация
функция
умолчание
параметр
использовать
имя
параметр
качество
ярлык
аргумент
func
someFunction
firstParameterName
Int
secondParameterName
Int
внутри
тело
функция
firstParameterName
secondParameterName
ссылаться
значение
аргумент
первый
второй
параметр
someFunction
firstParameterName
secondParameterName
параметр
должный
иметь
уникальный
имя
несмотря
несколько
параметр
мочь
иметь
ярлык
аргумент
уникальный
ярлык
аргумент
метка
помогать
сделать
ваш
код
читабельный
указывать
ярлык
аргумент
писать
ярлык
аргумент
имя
параметр
пробел
func
someFunction
argumentLabel
parameterName
Int
тело
функция
parameterName
относиться
значение
аргумент
это
параметр
вариант
функция
greet
person
который
принимать
имя
человек
родной
город
затем
возвращать
приветствие
func
greet
person
String
from
hometown
String
String
return
Hello
person
Glad
you
could
visit
from
hometown
print
greet
person
Bill
from
Cupertino
выводить
Hello
Bill
Glad
you
could
visit
from
Cupertino
использование
ярлык
аргумент
позволять
функция
вызываться
выразительный
манера
вид
предложение
это
предоставлять
тело
функция
читать
вид
понятой
намерение
пропуск
ярлык
аргумент
хотеть
использовать
имя
параметр
качество
ярлык
аргумент
использовать
подчеркивание
вместо
явный
ярлык
аргумент
это
параметр
func
someFunction
firstParameterName
Int
secondParameterName
Int
тело
функция
firstParameterName
secondParameterName
ссылаться
значение
аргумент
первый
второй
параметр
someFunction
secondParameterName
параметр
ярлык
аргумент
аргумент
должный
иметь
ярлык
вызов
функция
значение
умолчание
параметр
объявление
функция
любой
параметр
присваивать
значение
умолчание
параметр
значение
умолчание
вызов
функция
параметр
опускать
func
someFunction
parameterWithoutDefault
Int
parameterWithDefault
Int
пропускать
второй
аргумент
вызов
функция
значение
parameterWithDefault
равняться
внутри
тело
функция
someFunction
parameterWithoutDefault
parameterWithDefault
parameterWithDefault
равный
someFunction
parameterWithoutDefault
parameterWithDefault
равный
располагать
параметр
который
дефолтное
значение
начало
список
параметр
функция
параметр
дефолтный
значение
параметр
иметь
значение
умолчание
правило
важный
значение
функция
запись
первый
очередь
облегчать
распознавание
функция
вызывать
ранее
независимо
опускать
какой-то
параметр
умолчание
вариативный
параметр
вариативный
называть
параметр
который
иметь
сразу
несколько
значение
иметь
помощь
вариативный
параметр
передавать
функция
произвольный
число
входной
значение
объявлять
параметр
вариативный
нужно
поставлять
точка
тип
значение
передавать
вариативный
параметр
доступный
внутри
функция
вид
массив
соответствующий
тип
например
вариативный
параметр
numbers
тип
Double
доступный
внутри
функция
вид
массив
numbers
тип
Double
приводить
ниже
пример
вычисляться
средний
арифметический
средний
последовательность
число
иметь
произвольный
длина
func
arithmeticMean
numbers
Double
Double
var
total
Double
for
number
in
numbers
total
number
return
total
Double
numbers
arithmeticMean
возвращать
являться
средний
арифметический
пять
число
arithmeticMean
возвращать
являться
средний
арифметический
число
функция
мочь
иметь
несколько
вариативный
параметр
первый
параметр
который
идти
вариативный
параметр
должный
иметь
ярлык
аргумент
ярлык
аргумент
позволять
однозначно
определять
аргумент
передаваться
вариативный
параметр
который
идти
вариативный
параметр
сквозной
параметр
параметр
функция
умолчание
являться
константа
попытка
изменять
значение
параметр
функция
тело
функция
приводить
ошибка
компиляция
это
означать
смочь
изменять
значение
параметр
ошибка
хотеть
функция
изменять
значение
параметр
хотеть
изменение
сохраняться
заканчиваться
вызов
функция
определять
параметр
качество
сквозной
параметр
создание
сквозной
параметр
нужно
поставлять
ключевой
слово
inout
тип
объявление
параметр
сквозной
параметр
передавать
значение
функция
который
затем
изменяться
возвращаться
функция
заменять
исходный
значение
подробный
информация
поведение
сквозной
параметр
связанный
оптимизация
компилятор
см
сквозной
параметр
мочь
передавать
переменный
качество
аргумент
сквозной
параметр
мочь
передавать
константа
значение
литерал
качество
аргумент
константа
литерал
мочь
изменять
ставить
амперсанд
непосредственно
имя
переменная
передавать
качество
аргумент
сквозной
параметр
указывать
изменять
помощь
функция
заметка
сквозной
параметр
мочь
иметь
значение
умолчание
вариативный
параметр
мочь
сквозной
ключевой
словом
inout
пример
функция
название
swapTwoInts
который
сквозной
целочисленный
параметр
a
b
func
swapTwoInts
a
inout
Int
b
inout
Int
let
temporaryA
a
a
b
b
temporaryA
функция
swapTwoInts
просто
менять
значение
переменная
b
значение
a
значение
a
значение
b
это
функция
сохранять
значение
a
локальный
константа
temporaryA
присваивать
значение
b
переменная
a
затем
присваивать
значение
temporaryA
переменная
b
мочь
вызывать
функция
swapTwoInts
переменный
тип
Int
поменять
значение
обращать
внимание
имя
someInt
anotherInt
начинаться
амперсанд
передаваться
swapTwoInts
функция
var
someInt
var
anotherInt
swapTwoInts
someInt
anotherInt
print
someInt
is
now
someInt
and
anotherInt
is
now
anotherInt
выводить
someInt
is
now
and
anotherInt
is
now
вышеприведенный
пример
видно
исходный
значение
переменный
someInt
anotherInt
изменять
функция
swapTwoInts
несмотря
изначально
объявлять
предел
заметка
сквозной
параметр
это
самый
возвращать
функция
значение
пример
функция
swapTwoInts
возвращать
тип
возвращать
значение
параметр
someInt
anotherInt
равно
изменяться
сквозной
параметр
это
альтернативный
способ
передача
изменение
сделать
внутри
функция
предел
тело
функция
функциональный
тип
каждый
функция
специальный
функциональный
тип
состоять
тип
параметр
тип
возвращать
значение
пример
func
addTwoInts
a
Int
b
Int
Int
return
a
b
func
multiplyTwoInts
a
Int
b
Int
Int
return
a
b
данный
пример
объявлять
простой
математический
функция
addTwoInts
multiplyTwoInts
каждый
функция
принимать
значение
тип
Int
возвращать
значение
тип
Int
содержать
результат
математический
операция
оба
функция
иметь
тип
Int
Int
Int
запись
означать
следующий
функция
параметр
тип
Int
возвращать
значение
тип
Int
пример
функция
параметр
возвращать
значение
func
printHelloWorld
print
hello
world
функция
иметь
тип
Void
т
е
функция
параметр
который
возвращать
Void
использование
функциональный
тип
Swift
функциональный
тип
работать
тип
например
объявлять
константа
переменный
функциональный
тип
присваивать
функция
соответствующий
тип
var
mathFunction
Int
Int
Int
addTwoInts
запись
означать
следующий
объявлять
переменный
mathFunction
иметь
тип
функция
принимать
значение
тип
Int
возвращать
значение
тип
Int
присваивать
новый
переменная
указатель
функция
addTwoInts
функция
addTwoInts
иметь
тип
переменный
mathFunction
поэтому
точка
зрение
язык
Swift
присваивание
корректно
функция
вызывать
помощь
переменная
mathFunction
print
Result
mathFunction
выводить
Result
переменная
присваивать
функция
тип
аналогично
нефункциональный
тип
mathFunction
multiplyTwoInts
print
Result
mathFunction
выводить
Result
случай
любой
тип
мочь
указывать
тип
явно
предоставлять
Swift
самостоятельно
выводить
функциональный
тип
присваивание
функция
константа
переменная
let
anotherMathFunction
addTwoInts
константа
anotherMathFunction
вывести
тип
Int
Int
Int
функциональный
тип
тип
параметр
функциональный
тип
наподобие
Int
Int
Int
мочь
тип
параметр
функция
это
позволять
определять
некоторые
аспект
реализация
функция
непосредственно
время
вызов
следующий
код
печатать
экран
результат
работа
приводить
высоко
математический
функция
func
printMathResult
mathFunction
Int
Int
Int
a
Int
b
Int
print
Result
mathFunction
a
b
printMathResult
addTwoInts
выводить
Result
это
пример
объявлять
функция
printMathResult
который
параметр
первый
параметр
название
mathFunction
иметь
тип
Int
Int
Int
соответственно
аргумент
это
параметр
любой
функция
тип
второй
третий
параметр
называться
a
b
относиться
тип
Int
служить
передача
входной
значение
математический
функция
вызов
printMathResult
получать
качество
входной
данный
функция
addTwoInts
целочисленный
значение
затем
вызывать
передавать
функция
значение
также
выводить
экран
результат
задача
функция
printMathResult
заключаться
печатать
результат
работа
математический
функция
соответствующий
тип
это
конкретный
деталь
математический
функция
иметь
значение
главное
подходящий
тип
это
позволять
безопасно
управлять
работа
функция
printMathResult
непосредственно
время
вызов
функциональный
тип
возвращать
тип
функциональный
тип
сделать
возвращать
тип
функция
это
нужно
записывать
полный
функциональный
тип
сразу
возвратный
стрелка
возвращать
функция
следующий
пример
объявлять
простой
функция
stepForward
stepBackward
функция
stepForward
возвращать
входной
значение
увеличивать
единица
функция
stepBackward
уменьшать
единица
оба
функция
иметь
тип
Int
Int
func
stepForward
input
Int
Int
return
input
func
stepBackward
input
Int
Int
return
input
следующий
функция
название
chooseStepFunction
backward
иметь
возвращать
тип
Int
Int
функция
chooseStepFunction
backward
возвращать
функция
stepForward
функция
stepBackward
зависимость
значение
логический
параметр
backward
func
chooseStepFunction
backward
Bool
Int
Int
return
backward
stepBackward
stepForward
помощь
chooseStepFunction
backward
получать
функция
который
сдвигать
значение
влево
вправо
var
currentValue
let
moveNearerToZero
chooseStepFunction
backward
currentValue
moveNearerToZero
ссылаться
функция
stepBackward
предыдущий
пример
определять
нужно
прибавлять
отнимать
единица
последовательно
приближать
переменный
currentValue
ноль
изначально
currentValue
иметь
значение
т
е
сравнение
currentValue
давать
true
функция
chooseStepFunction
backward
соответственно
возвращать
функция
stepBackward
указатель
возвращать
функция
храниться
константа
moveNearerToZero
moveNearerToZero
ссылаться
нужный
функция
использовать
константа
отсчет
ноль
print
Counting
to
zero
Counting
to
zero
while
currentValue
print
currentValue
currentValue
moveNearerToZero
currentValue
print
zero
zero
вкладывать
функция
ранее
рассматривать
это
раздел
функция
являться
глобальный
т
е
определенный
глобальный
контекст
помимо
глобальный
объявлять
функция
находиться
внутри
функция
вкладывать
вкладывать
функция
умолчание
недоступный
извне
вызываться
использоваться
заключать
функция
заключать
функция
также
возвращать
вложенный
вкладывать
функция
использовать
предел
приводить
высоко
пример
функция
chooseStepFunction
backward
переписывать
вложенный
функция
func
chooseStepFunction
backward
Bool
Int
Int
func
stepForward
input
Int
Int
return
input
func
stepBackward
input
Int
Int
return
input
return
backward
stepBackward
stepForward
var
currentValue
let
moveNearerToZero
chooseStepFunction
backward
currentValue
moveNearerToZero
ссылаться
вкладывать
функция
stepForward
while
currentValue
print
currentValue
currentValue
moveNearerToZero
currentValue
print
zero
zero
находить
ошибка
пожалуйста
выделять
фрагмент
текст
нажимать
Ctrl
управление
поток
замыкание
SwiftBook
самый
крупный
сообщество
iOS
разработчик
язык
Swift
социальный
сетяхYouTubeVKontakteFacebookЧат
instagramПолезноеPodlodka
подписываться
новость
политика
конфиденциальность
пользовательский
соглашение
находить
акулов
сообщать
опечатка
текст
который
отправлять
наш
редактор
ваш
комментарий
необязательно
отправлять
отмена
