tag:blogger.com,1999:blog-85202024-03-28T17:53:05.578-04:00Python Software Foundation News  News from the Python Software FoundationEe Durbinhttps://www.blogger.com/profile/13577459520968677064noreply@blogger.comBlogger6272625tag:blogger.com,1999:blog-8520.post-48781218428380632332023-05-31T15:22:00.001-04:002023-05-31T15:22:18.236-04:00Thinking about running for the Python Software Foundation Board of Directors? Let’s talk! <p dir="ltr" id="docs-internal-guid-3aa0cbd5-7fff-fec0-3d7a-1819f76c6347" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">This year’s Board Election Nomination period is <a href="https://pyfound.blogspot.com/2023/05/psf-board-election-dates-for-2023.html">opening tomorrow</a>. Current board members want to share what being on the board is like and are making themselves available to answer all your questions about responsibilities, activities and time commitments via online chat. Please come join us <a href="https://www.python.org/join-psf-board-slack">on Slack</a> anytime in June to talk with us about being on the PSF board. <br /><br />Board Election Timeline:<br /></p><ul style="text-align: left;"><li>Nominations are open, Thursday, June 1st, 2:00 pm UTC</li><li>Board Director Nomination cut-off: Thursday, June 15, 11:59 pm UTC</li><li>Voter application cut-off date: Thursday, June 15, 11:59 pm UTC</li><li>Announce candidates: Friday, June 16th</li><li>Voting start date: Tuesday, June 20, 12:01 am UTC</li><li>Voting end date: Friday, June 30, 11:59 pm UTC</li></ul><p dir="ltr" id="docs-internal-guid-3aa0cbd5-7fff-fec0-3d7a-1819f76c6347" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;">Not sure what UTC is for you locally? Check <a href="https://savvytime.com/converter/utc">here</a>!<br /><br />Nominations will be accepted <a href="https://www.python.org/nominations/elections/">here</a>. (Note: you will need to sign into or create your python.org user account first). Learn more about membership <a href="https://www.python.org/psf/membership/">here</a> or if you have questions about membership or nominations please email <a href="mailto:psf-elections@python.org">psf-elections@python.org</a>In addition to <a href="http://psf-board.slack.com">Slack</a> you are welcome to join the discussion about the PSF Board election on <a href="https://discuss.python.org/c/python-software-foundation/9">our forum</a>.</p><br />Also, you can see your membership record and status on <a href="https://psfmember.org/user-information">psfmember.org</a>. If you are a voting-eligible member and do not already have a login there, please <a href="https://psfmember.org/wp-login.php?action=register">sign up</a> and then email <a href="mailto:psf-donations@python.org">psf-donations@python.org</a> so we can link your membership to your account. Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-73403212520148474242023-05-29T12:34:00.003-04:002023-05-29T17:20:02.144-04:00The Python Language Summit 2023: Towards Native Profiling for Python
<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc">Joannah Nanjekye came to the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit 2023</a> to discuss innovations by <a href="https://github.com/plasma-umass/scalene">Scalene</a>, a sampling-based Python profiler that can distinguish between native code and Python code in its reports. After its initial release in late 2019, Scalene has become one of the most popular Python profiling tools. It has now been downloaded 500,000 times from PyPI.</div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4ACb3kr0fWAbdjl0tzHpGzioUYGYX9wrXnK915nFqYIKZPU_-DRDuiT1RVqY9FUs4-C4mwMeEnoKWP284KUtqm2Y7O4MJTSrUIHEeptUZl4U_dB4Q6Q3j_7mWveS-ksCQTD662HbZW3tInYRVrKia0qFxl6VC-TDg3pIrv3qcv6totiI/s1180/image_2023-05-27_222414441.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="480" data-original-width="1180" height="130" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi4ACb3kr0fWAbdjl0tzHpGzioUYGYX9wrXnK915nFqYIKZPU_-DRDuiT1RVqY9FUs4-C4mwMeEnoKWP284KUtqm2Y7O4MJTSrUIHEeptUZl4U_dB4Q6Q3j_7mWveS-ksCQTD662HbZW3tInYRVrKia0qFxl6VC-TDg3pIrv3qcv6totiI/s320/image_2023-05-27_222414441.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The Scalene project logo</td></tr></tbody></table><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /><p><span>A profiler is a tool that can monitor a program as it is running. Once the program has run, the profiler can provide a report analysing which lines of code were visited most often, which were the most expensive in terms of time spent, and which were the most expensive in terms of memory usage. Profilers can therefore be hugely useful tools for addressing performance issues in code. If you’re unsure where your program is spending most of its time, it can be hard to optimise it.</span></p><p><span>Profilers can be split into two broad categories: trace-based profilers and sampling-based profilers. Trace-based profilers work by intercepting each function call as your program is running and logging information about the time spent, memory usage, etc. Sampling-based profilers, meanwhile, take snapshots of your program at periodic intervals to monitor these things. A trace-based profiler has the advantage that it can provide a granular and precise level of detail about which lines of code were executed and when each function call finishes; this makes it ideal for use as a tool to monitor test coverage, for example. However, injecting tracing hooks into each function call can sometimes slow down a program and distort the analysis of where most time was spent. As a result, sampling-based profilers are sometimes preferred for profiling performance.</span></p><p><span>Scalene is a sampling-based profiler, and aims to address the shortcomings of previous sampling-based profilers for Python. One of the key challenges sampling-based profilers have faced in the past has been accurately measuring the time Python programs spend in “native code”.</span></p><p><span><br /></span></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEghK9GiEpyTkxBrAoaC_bG_5ophtqVcxtc-70dyCa5Y2g35CoVdQiPjiTc2lr4x4UeRq6bJW-TwhfT0kDykcpTS3GZubW9BwrnqoWxnTHe5L5Vih6H-NsAkq_OrmCiWQyWTwG7u_2rQIH6mIsIHcRAtS2KHIyIrvofK1TIpIrSR-iJrOCw/s1192/Nanjekye%20slide%20screenshot.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="791" data-original-width="1192" height="212" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEghK9GiEpyTkxBrAoaC_bG_5ophtqVcxtc-70dyCa5Y2g35CoVdQiPjiTc2lr4x4UeRq6bJW-TwhfT0kDykcpTS3GZubW9BwrnqoWxnTHe5L5Vih6H-NsAkq_OrmCiWQyWTwG7u_2rQIH6mIsIHcRAtS2KHIyIrvofK1TIpIrSR-iJrOCw/s320/Nanjekye%20slide%20screenshot.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span style="text-align: left;">Slide from Nanjekye’s talk, illustrating sampling-based profiling</span></td></tr></tbody></table><p><br /></p><h2 class="raw">Handling the problem of native code</h2><p><span>“Native code”, also sometimes referred to as “machine code”, refers to code consisting of low-level instructions that can be interpreted directly by the hardware processor. Using extensions to Python written in </span><a href="https://en.wikipedia.org/wiki/C_(programming_language)" rel="noopener" target="_blank"><span>C</span></a><span>, </span><a href="https://en.wikipedia.org/wiki/C%2B%2B" rel="noopener" target="_blank"><span>C++</span></a><span> or </span><a href="https://www.rust-lang.org" rel="noopener" target="_blank"><span>Rust</span></a><span> that will compile to native code – such as </span><a href="https://numpy.org" rel="noopener" target="_blank"><span>NumPy</span></a><span>, </span><a href="https://scikit-learn.org/stable/" rel="noopener" target="_blank"><span>scikit-learn</span></a><span>, and </span><a href="https://www.tensorflow.org" rel="noopener" target="_blank"><span>TensorFlow</span></a><span> – can lead to dramatic speedups for a program written in Python.</span></p><p><span>It also, however, makes life difficult for sampling-based profilers. Samplers often use Python’s </span><a href="https://docs.python.org/3/library/signal.html" rel="noopener" target="_blank"><code>signal</code></a><span> module as a way of knowing when to take a periodic snapshot of a program as it is running. However, due to the way the </span><code>signal</code><span> module works, no signalling events will be delivered while a Python program is spending time in a function that has been compiled to native code via an extension module. The upshot of this is that sample-based profilers are often “flying blind” for Python code that makes extensive use of C extensions, and will sometimes erroneously report that no time at all was spent executing native code, even if the program in fact spent the majority of its time there.</span></p><p><span>Scalene’s solution to this problem is to monitor delays in signal delivery. It uses this information to deduce the amount of time that the program spent outside CPython’s main interpreter loop (due to the use of native, compiled code from an extension module). Further details on Scalene’s methods, and comparisons with other leading Python profilers, can be found in a recent paper by Emery D. Berger, Sam Stern and Juan Altmayer Pizzorno, </span><a href="https://arxiv.org/pdf/2212.07597.pdf" rel="noopener" target="_blank"><span>“Triangulating Python Performance Issues with Scalene”</span></a><span>.</span></p><p><span>Nanjekye also detailed Scalene’s sophisticated approach to measuring performance in child threads. Signal-based profilers often struggle with multi-threaded code, as signals can only be delivered and received from the main thread in Python. Scalene’s solution is to monkey-patch functions that might block the main thread, and add timeouts to these functions. This allows signals to be delivered even in multithreaded code.</span></p><h2 class="raw"><span>Discussion</span></h2><p><span>Nanjekye asked attendees at the Language Summit if they would be interested in integrating Scalene's ideas into the standard library's <code><a href="https://docs.python.org/3/library/profile.html" rel="nofollow" target="_blank">cProfile</a></code> module, which was met with a somewhat muted response.</span></p><p><span>Pablo Galindo Salgado, a leading contributor to the </span><a href="https://github.com/bloomberg/memray" rel="noopener" target="_blank"><span>Memray</span></a><span> profiler, criticised Scalene’s signal-based appr</span>oach, arguing it relied on inherently brittle monkey-patching of the standard library. It also reported unreliable timings, Salgado said: for example, if code in a C extension checks for signals to support CTRL-C, the resulting delays measured by Scalene will be distorted.</p><p><span>Salgado argued that integration with&nbsp;</span><a href="https://docs.python.org/3.12/howto/perf_profiling.html#perf-profiling" rel="noopener" target="_blank"><span>the </span><code>perf</code><span> profiler</span></a><span>, which Python is introducing support for in Python 3.12, would be a better option for users. Mark Shannon, however, argued that </span><code>perf</code><span> distorted the execution time of Python programs; Salgado responded that Scalene did as well, as the use of signals came with its own overhead.</span></p><p><span>Nanjekye argued that the huge popularity of Scalene in the Python ecosystem was evidence that it had proved its worth. Carol Willing concurred, noting that Scalene was an especially useful tool with code that made heavy use of libraries such as NumPy, Scikit-Learn and PyTorch.</span></p></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.8910474-13.137128671079765 177.7964526 90.0 -41.578547400000005tag:blogger.com,1999:blog-8520.post-47860560407800164672023-05-29T12:21:00.002-04:002023-05-29T18:40:45.905-04:00The Python Language Summit 2023: Burnout is Real
<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc">Guido van Rossum, creator of the Python programming language, spoke at the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">2023&nbsp;Python Language Summit</a> on the subject of open-source burnout, strategies for tackling it, and how to avoid it.<p><span>The first known case of burnout in the field of open-source software, van Rossum speculated, may have been Charles Babbage, who gave up the post of Lucasian Professor of Mathematics (the “Chair of Newton”) at Cambridge University in 1839.</span></p><blockquote>
<p><span>“In 1839 the demands of the Analytical Engine upon my attention had become so incessant and so exhausting, that even the few duties of the Lucasian Chair had a sensible effect in impairing my bodily strength. I therefore sent in my resignation.”</span>&nbsp;</p></blockquote><blockquote><p>-- <i>Charles Babbage, “Passages from the Life of a Philosopher” (Chapter 4)</i></p>
</blockquote><p><span>Van Rossum described how the Python community had been hit multiple times by core developers, suffering from burnout, suddenly disappearing for extended periods of time. Van Rossum told the story of one core developer, previously one of the most prolific contributors to CPython, who had abruptly ceased contributing around a decade ago. He had hardly been heard from since.</span></p><p><span>Van Rossum himself, he recounted, had felt so burned out by the acrimonious debate around </span><a href="https://peps.python.org/pep-0572/" rel="noopener" target="_blank"><span>PEP 572</span></a><span> (proposing the “walrus operator”, </span><code style="background-color: #cccccc;">:=</code><span>), that it </span><a href="https://lwn.net/Articles/759654/" rel="noopener" target="_blank"><span>led to him stepping down</span></a><span> from his post as Benevolent Dictator For Life (“BDFL”) of Python in 2018. Decisions about the language were ceded to </span><a href="https://peps.python.org/pep-8016/" rel="noopener" target="_blank"><span>a democratically elected Steering Council</span></a><span>, which has governed Python ever since.</span></p><p><span>Burnout, van Rossum noted, was often connected to conflict – and it often didn’t matter whether or not you ended the conflict victorious. Merely having the conflict at all could be exhausting.</span></p><p><span>Van Rossum’s talk itself was fairly short, but was followed by a lengthy discussion among the assembled core developers on the experiences they’d had with burnout, and strategies that could be employed to tackle it.</span></p><p><span>Several attendees in the room commented that learning to recognise burnout in yourself was an important skill. Some participants in the discussion described times when they had suddenly realised that things that had previously been enjoyable had morphed into a source of stress. One core developer told the story of a conference they had organised, at which they had felt such extreme stress that they were unable to think of any of the things that had gone well. Instead, they found themselves fixated on all of the minor things that had gone wrong.</span></p><p><span>Learning to recognise burnout in others was perhaps an even harder problem to solve. Van Rossum noted that the developers most susceptible to burnout were generally those who were most active and engaged with the community. But how can you distinguish between somebody devoting their time to CPython because of the intense enjoyment they found in contributing to the project, somebody who might have formed an unhealthy addiction to open source, and somebody who was only continuing to contribute out of a misplaced sense of obligation?</span></p><p><span>Some developers spoke of strategies they used to decompress. Brett Cannon described how he periodically takes “open source breaks”, in which he forces himself to spend a period of time without looking at his GitHub notifications or thinking about his open-source commitments. Mariatta Wijaya spoke about how she found mentoring other Python programmers to be deeply healing. All agreed that it was crucial to talk to friends and relatives when you were feeling close to burnout.</span></p><p><span>It was agreed that the Python community needed to do better in many ways. We needed to become better, as a community, at understanding when other people said that they were unable to complete something they had previously committed to. And perhaps we needed to normalise questions such as, “Hey, you’ve been super productive and responsive for too long. When do you think you’ll burn out?”</span></p><p><span>Russell Keith-Magee remarked that systems with single points of failure were bound to lead to situations of intense stress. These systems would inevitably, at some point, fail. The transition from a single BDFL (with an indefinite term) to a five-member Steering Council with one-year terms had been a very positive change in that regard, Keith-Magee said. But there were still places in CPython development where there were single points of failure. Examples included various esoteric platforms where support from CPython depended on a single core developer being able to give up their time to review PRs relating to the platform.</span></p><p><span>Carol Willing agreed with Keith-Magee, pointing out that no matter who you were, you were rarely the only person who could do a certain task. You </span><em><span>might</span></em><span> be the person who could do it fastest or best – but sometimes, it was important to “see the people, and share the joy”.</span></p><p><span>Łukasz Langa spoke about his role as part of the current Code of Conduct Working Group, to which any violations of the </span><a href="https://www.python.org/psf/conduct/" rel="noopener" target="_blank"><span>Python Code of Conduct</span></a><span> can be reported. Langa remarked that being part of the Working Group had brought to the fore parts of the community which he had previously been mostly unaware of. He encouraged everybody in the room to report toxic members of the community who were discouraging or aggressive online.</span></p><p><span>Speaking personally, for a moment: I tried to take an open-source break earlier this year, when I felt myself close to burning out on some of my open-source commitments. I can’t say it was fully successful – my addiction to GitHub was too great for me to resist glancing at my notifications occasionally. But it was helpful, and re-energising, to spend some time doing a creative activity that bore with it a 0% risk of people shouting at me on the internet about it:</span></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhW9jyCByps_8fSzctINDv6FRBbC8f-H_wz7eVrD_4aEGCy-hm0H1umibAftp2nXc4KYVrbABUvnLDLEQPmOi5necf69ruuyHTjABgJOyBZ64eO3lBsmHJ4S9ogosVzKVzvGloPjQMVXFWjB6fnD3djhfqsuKTBDxbiuRf4bMf-yDjpYHs/s572/image_2023-05-27_220847107.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="572" data-original-width="271" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhW9jyCByps_8fSzctINDv6FRBbC8f-H_wz7eVrD_4aEGCy-hm0H1umibAftp2nXc4KYVrbABUvnLDLEQPmOi5necf69ruuyHTjABgJOyBZ64eO3lBsmHJ4S9ogosVzKVzvGloPjQMVXFWjB6fnD3djhfqsuKTBDxbiuRf4bMf-yDjpYHs/s320/image_2023-05-27_220847107.png" width="152" /></a></div></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-48910115560779256722023-05-29T12:18:00.002-04:002023-05-30T11:11:40.288-04:00The Python Language Summit 2023: Making the Global Interpreter Lock Optional
<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc">The Global Interpreter Lock (“GIL”), is one of the most fundamental parts of how Python works today. It’s also one of the most controversial parts, as it prevents true concurrency between threads – another way of saying that it’s difficult to run two functions simultaneously while writing pure-Python code.<p><span>If there’s one blog that really “took off” after I wrote last year’s coverage on the Python Language Summit, it was </span><a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit-python_11.html" rel="noopener" target="_blank"><span>my blog on Sam Gross’s proposal to make Python’s Global Interpreter Lock (the “GIL”) optional</span></a><span>. One week following the publication of my articles, the blog had been viewed nearly 38,000 times; the blog in “second place” had only been viewed 5,300 times.</span></p><p><span>Interest in removing the GIL is clear, therefore – and this year, Gross returned to the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit</a> to discuss the development of his plans.</span></p><h2 class="raw"><span>Dare to dream of a GIL-free world</span></h2><p><span>Gross started off by giving an update on how work on </span><code>nogil</code><span> – Gross’s fork of CPython with the GIL removed – had progressed over the past year. Gross had been spending the last few months rebasing his fork onto CPython 3.12. As a result, he was now able to give an accurate estimate of how bad the performance costs to single-threaded code would be, if the GIL were removed.</span></p><p><span>Over the past year, Gross had also written a PEP – </span><a href="https://peps.python.org/pep-0703/" rel="noopener" target="_blank"><span>PEP 703</span></a><span> – which, following the Language Summit, was </span><a href="https://github.com/python/steering-council/issues/188" rel="noopener" target="_blank"><span>submitted to the Steering Council for their consideration</span></a><span> on May 12. If the PEP is accepted by the Steering Council, a version of Python with the GIL disabled could be available as soon as Python 3.13. (To discuss the ideas in the PEP, head to </span><a href="https://discuss.python.org/t/pep-703-making-the-global-interpreter-lock-optional-3-12-updates/26503/1" rel="noopener" target="_blank"><span>the thread on discuss.python.org</span></a><span>.)</span></p><p><span>Gross reported that the latest version of </span><code>nogil</code><span> was around 6% slower on single-threaded code than the CPython </span><code>main</code><span> branch, and that he was confident that the performance overhead could be reduced even further, possibly to nearly 0%. Most of the overhead was due to reference counting and changes that had been required to the operation of CPython’s new-in-3.11 </span><a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit_2.html" rel="noopener" target="_blank"><span>specialising adaptive interpreter</span></a><span>. With multiple threads, the performance overhead was around 8%.</span></p><p><span><br /></span></p><p></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhz0cEgI5ArFR9lfrczf74Z1y3C536LXYM7iW8WJKi3G_A_Usgp-Bhl8tbOqL7lCkZgpa4Nod76W7FRbSAZ6jwekyynJXd7CDYTSnoilbuGTvRpgvjkYpAMuTBCUwQYeFMpOKsRafkrus1HHzPUC6RFtS0Zu0okF4UVZyeJj_NnQD1C4ck/s1025/Sam%20Gross%20picture.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="585" data-original-width="1025" height="183" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhz0cEgI5ArFR9lfrczf74Z1y3C536LXYM7iW8WJKi3G_A_Usgp-Bhl8tbOqL7lCkZgpa4Nod76W7FRbSAZ6jwekyynJXd7CDYTSnoilbuGTvRpgvjkYpAMuTBCUwQYeFMpOKsRafkrus1HHzPUC6RFtS0Zu0okF4UVZyeJj_NnQD1C4ck/s320/Sam%20Gross%20picture.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A slide from Gross's talk<br />(numbers indicate the per-thread overhead)</td></tr></tbody></table><br /><p></p><p><span>Having rebased onto Python 3.12, Gross was also able to give an estimate on the extent of the code changes that would be required to CPython, were </span><code>nogil</code><span> to be accepted. Excluding generated files, Gross reported that around 15,000 lines of code would need to be changed. There would also need to be some alterations to </span><a href="https://github.com/microsoft/mimalloc" rel="noopener" target="_blank"><span>mimalloc</span></a><span>, which </span><code>nogil</code><span> depends on – but Gross was hopeful that these would be accepted to mimalloc itself, reducing the need for CPython to maintain mimalloc patches in its codebase.</span></p><p><span>Some audience members expressed concern about the prospect of “</span><code>#ifdef</code><span> hell” across the code base, to account for the two possible CPython build options. However, Gross countered that most of the changes required could be made unconditionally without resorting to </span><code>#ifdef</code><span>s, since the changes were simply no-ops with the GIL enabled.</span></p><p><span>The plan for </span><code>nogil</code><span> remains that it would be enabled via a compile-time flag, named </span><code>--disable-gil</code><span>. Third-party C extensions would need to provide separate wheels for GIL-disabled Python.</span></p><h2 class="raw"><span>GIL gotta go</span></h2><p><span>Last year, it felt as though Gross’s proposal was met with a certain degree of excitement, but also a certain degree of scepticism. It was thrilling to see how far </span><code>nogil</code><span> had come, but there was a certain amount of frustration in the room at the lack of a concrete plan for where to go next.</span></p><p><span>This year, it felt like the proposal was greeted much more warmly. Gross had come to the summit with a far more clearly defined roadmap for how we might get to </span><code>nogil</code><span>, and had taken the time to put together detailed estimates of the performance impact and the extent of the code changes.</span></p><blockquote>
<p><span>“Thank you for doing this… now we have something we can actually consider!”</span>&nbsp;</p></blockquote><blockquote><p>--<i> Brandt Bucher, CPython Core Developer</i></p>
</blockquote><p><span>Attendees at the Language Summit were also impressed at how low the performance overhead of </span><code>nogil</code><span> was, although Mark Shannon commented that he thought the numbers might be “a slight underestimate”. Gross explained that he had managed to achieve a 2-3% speedup by optimising for the case where only a single thread was active. Even in multithreaded programs, he explained, this provided a performance boost, since even in multithreaded code, it was often the case that only a single thread would be attempting to access an object at any given point in time.</span></p><p><span>Larry Hastings expressed concern that </span><code>nogil</code><span> might make debugging code harder; Gross responded that there was some impact on debuggability, but that it wasn’t too bad, in his opinion. Pablo Galindo Salgado, release manager for Python 3.10 and 3.11, expressed concern that </span><code>nogil</code><span> could also make implementing debuggers trickier – but commented that “it might be worth the price” anyway.</span></p><p><span>Another point of discussion was the changes Gross had made to </span><a href="https://peps.python.org/pep-0659/" rel="noopener" target="_blank"><span>the specialising adaptive interpreter</span></a><span> in the </span><code>nogil</code><span> fork. In order for the specialisations to work with the GIL disabled, Gross had had to guard the adaptive specialisations to the bytecode behind a lock. As well as this, each thread had been limited to a single specialisation of any given bytecode; with the GIL enabled, the adaptive interpreter can respecialise bytecode multiple times. Gross commented that he thought it would probably be possible to allow multiple specialisations of bytecode in multithreaded code, but that this would require further investigation. His current solution was the simplest one he had found, for now.</span></p></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-73832787618301843472023-05-29T12:13:00.002-04:002023-05-29T17:20:59.083-04:00The Python Language Summit 2023: Three Talks on the C APIThe <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit 2023</a> began with an extended discussion of Python’s <a href="https://docs.python.org/3/c-api/index.html" rel="noopener" target="_blank"><span>C API</span></a><span> – the interface through which it is possible to communicate between code written in Python and code written in low-level languages, like C. The fullness of this interface is a significant factor behind the vibrancy of Python’s ecosystem, enabling libraries such as </span><a href="https://github.com/numpy/numpy" rel="noopener" target="_blank"><span>NumPy</span></a><span> and </span><a href="https://github.com/pandas-dev/pandas" rel="noopener" target="_blank"><span>pandas</span></a><span> that are foundational to Python’s widespread use in data science.</span><p><span>Three speakers had booked slots to discuss the C API this year: Mark Shannon, Guido van Rossum, and Antonio Cuni. The conversation evolved naturally from one talk to the next, so in this blog post, I’ll be discussing the three talks together.</span></p><h2 class="raw"><span>All at sea on the C API</span></h2><div><span><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjH_0AUlHvdFlA1D5qHlngSRaT8smzG9Su1UAdEMgz1reCrG_-ESm8WYB-zVK8j7LHT-qqxlWavJRBY7YJilLayk-EFAVAZDUp55w5q_IZ0wndNeuB_3Ibxar87rKePkdA9q8sCaAR0X3SOf7qa8WuSJOSE8yN6X2aUyqCIMmNjgN6uPqg/s1024/DALL%C2%B7E%202023-05-18%2016.24.34%20-%20A%20Van%20Gogh%20painting%20of%20a%20man%20doing%20computer%20programming%20on%20a%20dinghy%20in%20the%20middle%20of%20a%20storm%20at%20sea,%20sunlight%20dramatically%20piercing%20through%20the%20clouds.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="1024" data-original-width="1024" height="320" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjH_0AUlHvdFlA1D5qHlngSRaT8smzG9Su1UAdEMgz1reCrG_-ESm8WYB-zVK8j7LHT-qqxlWavJRBY7YJilLayk-EFAVAZDUp55w5q_IZ0wndNeuB_3Ibxar87rKePkdA9q8sCaAR0X3SOf7qa8WuSJOSE8yN6X2aUyqCIMmNjgN6uPqg/s320/DALL%C2%B7E%202023-05-18%2016.24.34%20-%20A%20Van%20Gogh%20painting%20of%20a%20man%20doing%20computer%20programming%20on%20a%20dinghy%20in%20the%20middle%20of%20a%20storm%20at%20sea,%20sunlight%20dramatically%20piercing%20through%20the%20clouds.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The C API at sea (illustration by DALL-E)</td></tr></tbody></table><span><br /></span></div><blockquote>
<p><span>“I still don’t know what the C-API is, and I’ve been trying for years!”</span>&nbsp;</p></blockquote><blockquote><p>-- <i>Mark Shannon, CPython Core Developer</i></p>
</blockquote><p><span>Mark Shannon spoke on the problems (as he saw them) with Python’s C API. Shannon lamented that with every minor Python version, a slew of third-party C extensions seemed to break. He argued that the root cause was that the needs of C extensions were not adequately met by the formal C API, which had evolved in a haphazard and often-unplanned way over the past three decades of Python’s existence.</span></p><p><span>As a result of the C API’s flaws, Shannon said, extension authors were forced to reach beyond the formal API and into implementation details that had emerged as a kind of “implicit API”. The implementation details that constituted the new “implicit API” had become so widely depended upon that it was now impossible for CPython to change some parts of its code without breaking large parts of the Python ecosystem.</span></p><p><span>Shannon believes that the new “implicit API” should be formalised in Python 3.13. This, he argues, would put an end to the cycle of CPython releases inevitably leading to widespread breakages in C extensions.</span></p><p><span>Sam Gross, who (among </span><a href="https://peps.python.org/pep-0703/" rel="noopener" target="_blank"><span>other things</span></a><span>) has contributed to </span><a href="https://github.com/pytorch/pytorch" rel="noopener" target="_blank"><span>pytorch</span></a><span>, agreed with Shannon that the C API was lacking in many areas. Gross argued that there was a great deal of important functionality that wasn’t exposed to extension authors. “Projects just end up copying-and-pasting CPython C code,” Gross said, meaning the extensions broke with each new release of CPython.</span></p><p><span>Pablo Galindo Salgado, release manager for Python 3.10 and 3.11, said that the release process for those versions had felt like a “game of whackamole” when it came to third-party C extensions breaking. Salgado argued that CPython needed to reach out to the authors of extensions such as pytorch to gather detailed feedback on what core functionality was missing from the API. Several attendees expressed frustration with a perceived tendency among C extension authors to immediately reach into CPython implementation details when something they needed was missing from the API. The result of this was that CPython core developers were often in the dark about which things the C API </span><em><span>should</span></em><span> be providing, but currently wasn’t. “We might not be able to give you a solution,” Salgado said, “But please come to us and tell us what your problem is, if you have a problem!”</span></p><p><span>Gross proposed that CPython should run third-party test suites with new versions of CPython as they were being developed, so that the Core Dev team would be able to spot third-party breakages early and gauge the impact of their changes. Pytorch operated a similar programme, Gross said, and it had been successful in helping to limit breakages of third-party pytorch models as the core pytorch team evolved their API.</span></p><p><span>Brandt Bucher noted, however, that the problem often wasn’t so much that CPython was unaware when they were breaking third-party code – the benchmarks run in </span><a href="https://github.com/python/pyperformance" rel="noopener" target="_blank"><span>the pyperformance suite</span></a><span> often served as an early warning signal for breakages in C extensions. The problem was often that CPython would offer to help affected projects, only to have their help rejected. Several core developers had previously sent pull requests to help third-party projects become compatible with an upcoming version of CPython, only for their pull requests to remain unmerged for several months due to burned-out maintainers of these projects.</span></p><h2 class="raw"><span>Let’s get specific</span></h2><div><span><br /></span></div><div><span><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiO-1oRlIU4n4U5yQPoikvJjW6AHx9ke2CQxHtAPTlekE-bdXMCstMR2jRCaU74nO9ndcVJunKVHdC5NtLiTEFO0cjWDPpZWBe_rfMMtVEGNL5OWUImK-QZMZuW-OxBAi274wv_CbCZU6peUlUBVKErDJo-z5yBd0nS9tVcKFnpkNxJRwQ/s959/image_2023-05-27_221430833.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="719" data-original-width="959" height="240" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiO-1oRlIU4n4U5yQPoikvJjW6AHx9ke2CQxHtAPTlekE-bdXMCstMR2jRCaU74nO9ndcVJunKVHdC5NtLiTEFO0cjWDPpZWBe_rfMMtVEGNL5OWUImK-QZMZuW-OxBAi274wv_CbCZU6peUlUBVKErDJo-z5yBd0nS9tVcKFnpkNxJRwQ/s320/image_2023-05-27_221430833.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Guido van Rossum speaks to the Language Summit on the C API<br />(photo by Hugo van Kemenade)</td></tr></tbody></table></div><div><span><br /></span></div><p><span>Shannon was clear about what he thought the problem with the C API was. The problem was that the C API was insufficient for the authors of C extensions, leading these authors to reach into CPython implementation details, leading to an unending cycle of projects breaking with each new release of CPython. Others, however, argued that this wasn’t so much a specific problem but a genre of problems. Each specific project might have a different notion about which things were imperfect with the C API, and which things were missing from the C API. Each imperfection or absence could be considered a concrete problem in its own way. “Things break for everybody, but things break in different ways for different people,” Carol Willing argued. “We need more granularity in our understanding of that.”</span></p><p><span>As Mark Shannon’s slot drew to an end, Guido van Rossum opted to continue the discussion that Shannon had started, but sought to draw attention to a more precise enumeration of the difficulties C API users were facing.</span></p><blockquote>
<p><span>“There’s lots of ideas here, but I don’t know what the problem is!”</span>&nbsp;</p></blockquote><blockquote><p>-- <i>Carol Willing, CPython Core Developer</i></p>
</blockquote><p><span>Simon Cross, a contributor to </span><a href="https://github.com/hpyproject/hpy" rel="noopener" target="_blank"><span>the HPy project</span></a><span>, reported that the HPy project had, in the early stages of the project, put together a long list of the problems, as they saw them, with the CPython C API. Cross offered to share the list with the Core Dev team. Thomas Wouters, a Google employee, also offered to provide a list of difficulties Google had experienced when upgrading to recent Python releases, something the company keeps detailed records of. There was agreement that putting together a comprehensive list of problems with the existing API was an important first step, before CPython could consider drawing up plans to fix the problem.</span></p><p>The C API discussions ended with an agreement that further discussion was required. Interested parties can follow the ongoing conversation at <a href="https://github.com/capi-workgroup/problems/issues">https://github.com/capi-workgroup/problems/issues</a>. The plan is to work towards an informational PEP, with input from an array of stakeholders, outlining a consensus around the problems and pitfalls in the current C API. Once the problems with the status quo have been enumerated in detail, the community might be in a position to consider possible solutions.</p><h2 class="raw"><span>HPy: A possible solution?</span></h2><div><span><br /></span></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPyFD0leE8UsskX9WuC7J1LZA2470XLK2seL82YQrGQJnqix-bdWFgei-_q02a2k-NCoccvTWV9E7oWg8LEEJvfiNIiZ71P3YorGvuefXGY4YsvEvMybNEA0RyoeyUYWF_NfIon8DQ3J_A_UM5epaSEaFg6BQoeNiR9XFMp-J_EK5Vkzk/s1216/Cuni%20slide%20screenshot.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="690" data-original-width="1216" height="182" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPyFD0leE8UsskX9WuC7J1LZA2470XLK2seL82YQrGQJnqix-bdWFgei-_q02a2k-NCoccvTWV9E7oWg8LEEJvfiNIiZ71P3YorGvuefXGY4YsvEvMybNEA0RyoeyUYWF_NfIon8DQ3J_A_UM5epaSEaFg6BQoeNiR9XFMp-J_EK5Vkzk/s320/Cuni%20slide%20screenshot.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A slide from Antonio Cuni's talk on HPy</td></tr></tbody></table><div style="text-align: justify;"><br /></div><p><span>While the C API discussions ended with a detailed discussion of the problems in the current C API, the first talk of the day was in fact by Antonio Cuni, a core developer with </span><a href="https://github.com/hpyproject/hpy" rel="noopener" target="_blank"><span>the HPy project</span></a><span>. HPy is an alternative C API for Python – an API that seeks to avoid many of the pitfalls of the current API. The contention of the HPy developers is that the current C API is bad for CPython, bad for alternative implementations of Python such as </span><a href="https://www.pypy.org" rel="noopener" target="_blank"><span>PyPy</span></a><span> or </span><a href="https://github.com/oracle/graalpython" rel="noopener" target="_blank"><span>GraalPython</span></a><span>, and, ultimately, bad for end users.</span></p><blockquote>
<p><span>HPy is a specification of a new API and ABI for extending Python that is Python implementation agnostic and designed to hide and abstract internal details</span>&nbsp;</p></blockquote><blockquote><p>--&nbsp;<a href="https://github.com/hpyproject/hpy" rel="noopener" target="_blank"><span><i>The HPy GitHub README</i></span></a></p>
</blockquote><p><span>Cuni began by describing the key goals of the HPy project:</span></p><ul>
<li><span>An API that doesn’t leak CPython-specific implementation details</span></li>
<li><span>A 0% (or close to 0%) performance overhead when compared with CPython’s current C API</span></li>
<li><span>A “Universal ABI” that allows compiled extension modules to use the same interface to communicate with PyPy (for example) as they would do to communicate with CPython</span></li>
<li><span>An API that is garbage-collection friendly.</span></li></ul><p><span>Cuni argued that if the Python ecosystem as a whole moved to using HPy, instead of the “official” C API, there would be dramatically fewer breakages of C extensions with each new Python release. Cuni’s proposal was that CPython should “officially bless” HPy as the recommended C API for Python.</span></p><h2 class="raw"><span>HPy Hpy Hooray?</span></h2><div><span><br /></span></div><div><span><br /></span></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5SAdpZyRNSY-AqgNxZ6KGXs030pc2EiBkPt7c34tZPisLgt72Ps36i6GfdL9kql4bou9lEFpfqBBRAEMc8CIACo78Mr1wlHwVinPsuU3SNxXlQcsI72m4Yxwk_YrCbU1aEVATPvPAH_ZM4-_ylFfsuvOLqm4bKL0V_yAGJTNlB9C2MJE/s959/image_2023-05-27_221734482.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="719" data-original-width="959" height="240" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg5SAdpZyRNSY-AqgNxZ6KGXs030pc2EiBkPt7c34tZPisLgt72Ps36i6GfdL9kql4bou9lEFpfqBBRAEMc8CIACo78Mr1wlHwVinPsuU3SNxXlQcsI72m4Yxwk_YrCbU1aEVATPvPAH_ZM4-_ylFfsuvOLqm4bKL0V_yAGJTNlB9C2MJE/s320/image_2023-05-27_221734482.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Simon Cross, HPy Core Developer<br />(photo by Hugo van Kemenade)</td></tr></tbody></table><br /></div><p><span>Cuni’s talk was exuberant, but it was at times somewhat unclear what exactly he was asking for from the room. “The investment from CPython,” Cuni argued “would be a political investment rather than a technical one”. Thomas Wouters, however, argued that the CPython team didn’t have the “moral authority” to coerce extension authors into using HPy. Hynek Schlawack agreed, arguing that it was perhaps unrealistic to migrate the entire Python ecosystem towards HPy.</span></p><p><span>Many were uncertain about what it would even mean to “officially bless” HPy – would CPython host HPy’s documentation on </span><a href="http://docs.python.org" rel="noopener" target="_blank"><span>docs.python.org</span></a><span>? Or would CPython simply add a note to the documentation of the C API that the “official” C API was no longer the </span><em><span>recommended</span></em><span> way to write a C extension? Guido van Rossum emphasised that a top-down approach from the Core Dev team to extension authors wouldn’t work: nobody wanted a repeat of the decade-long transition from Python 2 to Python 3. Carol Willing agreed that pushing C extension authors to use HPy could be counterproductive, arguing that it was important to remember the impact of our decisions on end users of Python.</span></p><p><span>Other core developers were sceptical about the fundamentals of HPy itself. HPy’s origin story lies in <a href="https://www.pypy.org/posts/2018/09/inside-cpyext-why-emulating-cpython-c-8083064623681286567.html" rel="nofollow" target="_blank">difficulties PyPy encountered when it trying to use CPython’s existing C API</a>. These difficulties led to attempts to create an API that could be easily used on either Python implementation. Larry Hastings argued that blessing an API that was friendlier to PyPy had clear benefits to PyPy (and other implementations), but that it was less clear where CPython stood to gain from this change.</span></p><p><span>Cuni’s response was that if the ecosystem migrated to an API that exposed fewer implementation details directly, CPython would be able to refactor its internal implementation far more seamlessly, as CPython would no longer have to worry about breaking a multitude of third-party C extensions with every internal reorganisation of code. Cuni mentioned <a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit-python.html" rel="nofollow" target="_blank">efforts to run CPython using WebAssembly</a> as a specific area where CPython could stand to gain, as the HPy API could interact far more easily with the Javascript garbage collector. And Cuni also noted that HPy made it easy for extension authors to test whether they were sticking to the API or not, something which is famously hard to know with the current C API. “We don’t know all the experimentation that this might enable,” Cuni exclaimed, however, “Because we haven’t implemented this change yet!”</span></p><div class="separator" style="clear: both; text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg0jGMJJRJ-p-vUDoVQIKuEoMM61NmDLbLXDQALevgnSOaiGfI728qgxcuHau8OxqciLoVxuMJslnd7vuizRHWau4prrClJn3XyKkgPaftHrSFdK-FE2QOgiE8wshlhIoxp3l4FuqbP-tp0t3vcbWUD4gwVBnlEOmiGEkCgQ8XAslBHcdg/s1231/image_2023-05-18_145653379.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="702" data-original-width="1231" height="182" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg0jGMJJRJ-p-vUDoVQIKuEoMM61NmDLbLXDQALevgnSOaiGfI728qgxcuHau8OxqciLoVxuMJslnd7vuizRHWau4prrClJn3XyKkgPaftHrSFdK-FE2QOgiE8wshlhIoxp3l4FuqbP-tp0t3vcbWUD4gwVBnlEOmiGEkCgQ8XAslBHcdg/s320/image_2023-05-18_145653379.png" width="320" /></a></div><p><span>Mark Shannon was another core developer expressing scepticism about HPy. Shannon argued that while HPy had strengths over the “official” C API, it was far from perfect. “We should try to fix CPython’s API” before CPython recommended users switch to HPy, Shannon argued. Simon Cross, also of the HPy project, said that the team welcomed feedback about where they could improve. It was still easy for HPy to make changes, Cross argued, given they had not yet achieved widespread adoption.</span></p><h2 class="raw"><span>Further Reading on HPy</span></h2><ol>
<li><a href="https://github.com/hpyproject/hpy/wiki/c-api-next-level-manifesto" rel="noopener" target="_blank"><span>HPy’s overview of changes needed to the C API</span></a><span>.</span></li>
<li><a href="https://github.com/hpyproject/hpy/wiki/c-api-next-level-changes" rel="noopener" target="_blank"><span>HPy’s explanation of why the changes are needed</span></a><span>.</span></li>
</ol>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-75256320464954482382023-05-29T11:34:00.002-04:002023-05-29T17:21:19.825-04:00The Python Language Summit 2023: Python on Mobile
<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><p><span>At the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit 2023</a>, Russell Keith-Magee presented on the ongoing efforts of </span><a href="https://beeware.org" rel="noopener" target="_blank"><span>BeeWare</span></a><span>, a project that aims to make it easier to run Python on mobile platforms such as Android and iOS.</span></p><p><span><br /></span></p><p><span></span></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEhKd0EQEStk2AWmSAjsGgsESDcswdm1vnDv77ZrTgwbJdOD6Om0nyFfH6gxIT1fvBo6Tt9bykJuS1pIkPD1qNFnLiINcLdtiebwaDA4CvfOCyNkoq5nRNKZ9K0_7FPWhsYhLJXGxbv7BCL2XEMHZNQxfl61szs8q0yAX56kyk_PKSXXG4A" style="margin-left: auto; margin-right: auto;"><img alt="" data-original-height="270" data-original-width="270" height="240" src="https://blogger.googleusercontent.com/img/a/AVvXsEhKd0EQEStk2AWmSAjsGgsESDcswdm1vnDv77ZrTgwbJdOD6Om0nyFfH6gxIT1fvBo6Tt9bykJuS1pIkPD1qNFnLiINcLdtiebwaDA4CvfOCyNkoq5nRNKZ9K0_7FPWhsYhLJXGxbv7BCL2XEMHZNQxfl61szs8q0yAX56kyk_PKSXXG4A" width="240" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The BeeWare logo</td></tr></tbody></table><span><br /></span><p></p><h2 class="raw"><span>Russell Keith-Magee is one busy bee</span></h2><p><span>Improving Python’s story for running on mobile has been a labour of love for Keith-Magee for eight years at this point. Keith-Magee </span><a href="https://pyfound.blogspot.com/2020/05/cpython-on-mobile-platforms.html" rel="noopener" target="_blank"><span>last presented at the Python Language Summit in 2020</span></a><span> (a year when the summit was conducted entirely virtually due to the Covid-19 pandemic). Since then, however, great progress has been made.</span></p><p><span>The biggest change since his last update, Keith-Magee reported, wasn’t technical – it was financial. For the last year, BeeWare has no longer been a hobby project for Keith-Magee. He is now paid by </span><a href="https://www.anaconda.com" rel="noopener" target="_blank"><span>Anaconda</span></a><span> to </span><a href="https://beeware.org/news/buzz/exciting-news-for-the-future-of-beeware/" rel="noopener" target="_blank"><span>work on the project full time</span></a><span>, along with a colleague, Malcolm Smith. “I now have the resources to do the work” required to make this happen, he announced.</span></p><p><span>Keith-Magee came to the Language Summit this year with a proposal: to add Android and iOS as platforms with “tier-3” support from CPython in Python 3.13.</span></p><p><span>What does “tier-3 support” mean? Tier-3 support, as defined by </span><a href="https://peps.python.org/pep-0011/#tier-3" rel="noopener" target="_blank"><span>PEP 11</span></a><span>, describes a level of support that the CPython core developers commit to giving a specific platform. The CPython test suite is run constantly on popular platforms such as Ubuntu, Windows and MacOS, and test failures on these platforms can block releases until they are fixed. More esoteric platforms, meanwhile, are tested in CI less frequently. Test failures on those platforms will not necessarily block a release of CPython.</span></p><p><span>Tier-3 support is the current level of support Python provides to the <a href="https://emscripten.org" rel="nofollow" target="_blank">emscripten</a>, <a href="https://wasi.dev" rel="nofollow" target="_blank">WASI</a> and <a href="https://www.freebsd.org" rel="nofollow" target="_blank">FreeBSD</a> platforms, among others. If a platform has tier-3 support, the test suite will be run on the platform on a regular basis, but not on every pull request. Tier-3 support indicates that at least one core developer has committed to supporting CPython on that platform as best they can. However, test failures on that platform will not block a release of CPython.</span></p><h2 class="raw"><span>The path to tier-3 support</span></h2><p><span>Historically, a significant barrier standing in the way of mobile-platform support from CPython has been the difficulties associated with running tests on mobile platforms in </span><a href="https://en.wikipedia.org/wiki/Continuous_integration" rel="noopener" target="_blank"><span>CI</span></a><span>. Keith-Magee announced, however, that it was now possible to run the CPython test suite on mobile platforms via </span><a href="https://beeware.org/project/projects/tools/briefcase/" rel="noopener" target="_blank"><span>Briefcase</span></a><span>, BeeWare’s packaging and development tool. (Getting the test suite to </span><em><span>pass</span></em><span> is another issue – But Keith-Magee felt confident that it would be easy to make progress on that front.) As such, Keith-Magee reported, it should be feasible for CPython to integrate running tests on these platforms into the project’s testing infrastructure on GitHub.</span></p><p><span>One remaining issue is a fairly specific question, but an important one nonetheless: on a mobile platform, what should </span><a href="https://docs.python.org/3/library/sys.html#sys.platform" rel="noopener" target="_blank"><code>sys.platform</code></a><span> be? The two major mobile platforms are currently inconsistent about this: on iOS, </span><code>sys.platform == "ios"</code><span>, whereas on Android, </span><code>sys.platform == "linux"</code><span>.</span></p><p><span>The advantage of the first approach is that it is easy for user code to detect whether the code is being run on iOS or not. The advantage of the second approach, meanwhile, is that most existing Python code won’t necessarily account for the possibility that it might be run on Android or iOS, so will run into difficulties with idioms such as the following:</span></p><pre><code class="python hljs"><div class="wrapper"><div class="gutter linenumber"><span></span>
<span></span></div><div class="code"><span class="hljs-keyword">if</span> sys.platform == <span class="hljs-string">"linux"</span>:
    do_fancy_linux_only_feature()
</div></div></code></pre><p><span>The Android platform, Keith-Magee noted, is very similar to Linux, so by setting </span><code>sys.platform</code><span> to “linux”, a lot of code “just works” on Android even though the code hasn’t explicitly accounted for the possibility that it might be run on that platform.</span></p><h2 class="raw"><span>Abuzz with excitement</span></h2><div><span><br /></span></div><div><span><br /></span></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMf7wl_3NSqzHPBtLs31nHWssIZ1rIY3Wd5AmZKsrmQJnxvn0AQT0yF-cbuP6oldqPjC3L75USN9wYhENRXMmLoPgfEvVx6bUiu7RMNHpkWeexNYmKKRIetyQkdAFlloeZt1KAS9tP9OCu4F9QXY7mF2L11TasEGT2MTrKODgJRDqqkj8/s959/image_2023-05-27_221125338.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="719" data-original-width="959" height="240" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjMf7wl_3NSqzHPBtLs31nHWssIZ1rIY3Wd5AmZKsrmQJnxvn0AQT0yF-cbuP6oldqPjC3L75USN9wYhENRXMmLoPgfEvVx6bUiu7RMNHpkWeexNYmKKRIetyQkdAFlloeZt1KAS9tP9OCu4F9QXY7mF2L11TasEGT2MTrKODgJRDqqkj8/s320/image_2023-05-27_221125338.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Keith-Magee in flight (photo by Hugo van Kemenade)</td></tr></tbody></table><br /><p><span>Keith-Magee’s talk was greeted enthusiastically by the core developers in the room; there was strong consensus that Python needed a better story on mobile platforms. Carol Willing expressed excitement about the ways in which support for mobile platforms could help Python spread globally, to countries where large numbers of people had no access to desktop computers (but had easy access to phones). Łukasz Langa agreed, noting that he had received many enquiries about Python on mobile after giving a talk on the subject about a year ago. “It’s interesting to a </span><em><span>lot</span></em><span> of people,” Langa commented. “We need it.”</span></p><blockquote>
<p><span>“Wooooo!”</span>&nbsp;</p></blockquote><blockquote><p>-- <i>Carol Willing, CPython Core Developer</i></p>
</blockquote><p><span>On the </span><code>sys.platform</code><span> question, Core Developer Filipe Laíns said that he was working on a new API for the </span><a href="https://docs.python.org/3/library/sysconfig.html" rel="noopener" target="_blank"><code>sysconfig</code></a><span> standard-library module, which will provide a more granular way of distinguishing between platforms from user code. In the meantime, Brett Cannon wondered if BeeWare could use the same approach as CPython builds for WebAssembly: on WebAssembly builds, unusually, </span><code>sys.platform</code><span> has a different value to </span><code>os.name</code><span> (</span><code>sys.platform </code><span>is either "wasi" or "emscripten", but </span><code>os.name </code><span>is "linux").</span></p><p><span>Another outstanding question, however, is what the release process would look like for these new platforms. There was appreciation of the work Keith-Magee had already put into BeeWare, and nobody doubted that he would continue to be committed to the project. However, Keith-Magee is not currently a core developer, leading to a concern that CPython might be supporting a platform that nobody on the core team had expertise in.</span></p><p><span>Ned Deily, release manager for Python 3.6 and 3.7, worried that distributing CPython binaries for these platforms might not be feasible, as it would make the release process “even more arduous”. Keith-Magee responded that it could be possible to automate the build process for these platforms. If it wasn’t, he said, it also wouldn’t necessarily be essential for CPython to distribute official binaries for these platforms, at least at first.</span></p><h2 class="raw"><span>Where next for BeeWare?</span></h2><p><span>Keith-Magee’s next steps are to work towards upstreaming the patches to CPython that the BeeWare project has made, so that CPython on mobile platforms can “just work” without any changes being made. The alterations that have already been made to support <a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit-python.html" rel="nofollow" target="_blank">CPython on WebAssembly</a> have made this task much easier, Keith-Magee noted.</span></p></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-27800736267863715522023-05-29T11:14:00.011-04:002023-06-25T14:46:25.716-04:00The Python Language Summit 2023 Every year, just before the start of PyCon US, core developers, triagers, and special guests gather for the Python Language Summit: an all-day event of talks where the future direction of Python is discussed. The Language Summit 2023 included three back-to-back talks on the C API, an update on work towards making the Global Interpreter Lock optional, and a discussion on how to tackle burnout in the community.<div><br /></div><div>This year's summit received around 45 attendees, and the summit was covered by Alex Waygood.</div><div><br /></div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhX0X3Sj-KVFyXteYb66VcF4DxKMmhlqV8vVWfpThq6bbC0YOz3mUPA-j_64U6v8GKN10JYLZ0LNBuOJMOv11D2zokJHdPxbfkoL1Etvn0OUdk1MLsv1TZydBMSNVVic8plYV6MvDjo_hMTGbxSZTph8uWkXagYijQkp45wrkHUjZJq2O8ysw/s1341/pycon23.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="894" data-original-width="1341" height="266" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhX0X3Sj-KVFyXteYb66VcF4DxKMmhlqV8vVWfpThq6bbC0YOz3mUPA-j_64U6v8GKN10JYLZ0LNBuOJMOv11D2zokJHdPxbfkoL1Etvn0OUdk1MLsv1TZydBMSNVVic8plYV6MvDjo_hMTGbxSZTph8uWkXagYijQkp45wrkHUjZJq2O8ysw/w400-h266/pycon23.JPG" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Attendees of the Python Language Summit<br /></td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"><br /></div><div><div class="separator" style="clear: both; text-align: center;"><br /></div></div>
<hr /><br />
<div><ul style="text-align: left;"><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-three.html" rel="nofollow" target="_blank">Three Talks on the C API</a>: Talks by Antonio Cuni, Mark Shannon and Guido van Rossum</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-making.html" rel="nofollow" target="_blank">Making the Global Interpreter Lock Optional</a>: A talk by Sam Gross</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-towards.html" rel="nofollow" target="_blank">Towards Native Profiling for Python</a>: A talk by Joannah Nanjekye</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-what-is.html" rel="nofollow" target="_blank">What is the stdlib for?</a> A talk by Brett Cannon</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-pattern.html" rel="nofollow" target="_blank">Pattern Matching, __match__, and View Patterns</a>: A talk by Michael Sullivan</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-python.html" rel="nofollow" target="_blank">Python on Mobile: State of the Union</a>. A talk by Russell Keith-Magee</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023-burnout.html" rel="nofollow" target="_blank">Burnout is Real</a>: A talk by Guido van Rossum</li><li><a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023.html" rel="nofollow" target="_blank">Lightning Talks</a>, featuring short presentations by Dong-hee Na, Carl Meyer and Amethyst Reese</li></ul></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-46657889846505825202023-05-29T11:13:00.003-04:002023-05-30T06:14:16.266-04:00The Python Language Summit 2023: Lightning Talks
<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc">The <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit 2023</a> closed off with a trio of lightning talks from Dong-hee Na, Carl Meyer and Amethyst Reese.</div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><hr /><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><br /></div><div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc"><h2 class="raw"><span>Dong-hee Na: Let’s support LLVM-BOLT as an official feature</span></h2><p><span>CPython Core Developer Dong-hee Na gave a short presentation on the LLVM-BOLT optimiser, arguing that we should support it as a standard feature of CPython.</span></p><p><span>LLVM-BOLT is a “post link time binary optimiser” that was adopted by </span><a href="https://github.com/pyston" rel="noopener" target="_blank"><span>the Pyston project</span></a><span>, a performance-oriented fork of CPython 3.8. The Pyston team had reported that use of the optimiser resulted in performance gains of 2-4% on their benchmarks, although the&nbsp;</span><a href="https://devblogs.microsoft.com/python/python-311-faster-cpython-team/" rel="noopener" target="_blank"><span>Faster CPython team</span></a><span>&nbsp;and Dong-hee Na <a href="https://github.com/faster-cpython/ideas/issues/224" rel="nofollow" target="_blank">had reported smaller returns</a> when they had applied the optimiser to Python 3.11.</span></p><p><span>Dong-hee Na showed benchmark results that showed significant speedups in some areas with LLVM-BOLT applied to Python 3.12, but noted that LLVM-BOLT also caused regressions in some other areas due to overly aggressive optimisations. He announced that he had added support for LLVM-BOLT to CPython as an optional compile-time flag, </span><code>--enable-bolt</code><span>, to allow experimentation with the feature.</span></p><p><span><br /></span></p><p><span></span></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEi0d1JAcXu962gjfuEKscZMczSxI7IAnt7EvD_MLu7BoMClEYxIl1fzdlnSbnYa0XzvfM-gOLOia2dIUewL6JFgbyjeBtYUUKR9Mpshg_7U0fwqXhY9Mkeg-uV3D5Ru-uKyUOswg2hySU6kGflLpBWY-kJ3gC3960SODPRsmASkuiavjbU" style="margin-left: auto; margin-right: auto;"><img alt="" data-original-height="768" data-original-width="1366" height="180" src="https://blogger.googleusercontent.com/img/a/AVvXsEi0d1JAcXu962gjfuEKscZMczSxI7IAnt7EvD_MLu7BoMClEYxIl1fzdlnSbnYa0XzvfM-gOLOia2dIUewL6JFgbyjeBtYUUKR9Mpshg_7U0fwqXhY9Mkeg-uV3D5Ru-uKyUOswg2hySU6kGflLpBWY-kJ3gC3960SODPRsmASkuiavjbU" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A slide from Dong-hee Na's talk on LLVM-Bolt</td></tr></tbody></table><span><br /><br /></span><p></p><hr /><p></p><p></p><p><span><br /></span></p><h2 class="raw"><span>Carl Meyer: Lazy Imports – the sequel</span></h2><p><span>Carl Meyer instigated a short discussion on proposals to introduce a mechanism enabling lazy imports in Python. Following </span><a href="https://pyfound.blogspot.com/2022/05/the-2022-python-language-summit.html" rel="noopener" target="_blank"><span>Meyer’s lightning talk on the same subject last year</span></a><span>, Meyer – along with his colleague, Germán Méndez Bravo (who, according to Meyer, deserves “most of the credit”) – had written </span><a href="https://peps.python.org/pep-0690/" rel="noopener" target="_blank"><span>PEP 690</span></a><span>, proposing a compile-time flag that would make imports in Python lazy by default. The PEP, however, was </span><a href="https://discuss.python.org/t/pep-690-lazy-imports-again/19661/26" rel="noopener" target="_blank"><span>rejected by the Steering Council</span></a><span> in December 2022, due to concern that the new flag would have created a split in the community between programmers who used Python with lazy imports enabled, and those who used Python with eager imports.</span></p><p><span>Meyer’s question to the audience was: where next for lazy imports? Was it worth modifying the proposal and trying again, or was the whole idea doomed? Meyer noted that the team at Instagram, where he worked, had seen start-up time improvements of 50-80%, and 40-90% reductions in memory usage, by adopting lazy imports in the </span><a href="https://github.com/facebookincubator/cinder" rel="noopener" target="_blank"><span>fork of CPython</span></a><span> they used for the Instagram web server.</span></p><p><span>Meyer floated a series of possible changes (some mutually exclusive) that could be made to the PEP. For each possible change, he asked if the change would make attendees more or less likely to support adding support for lazy imports to Python:</span></p><ol>
<li><span>Explicit opt-in syntax marking a specific import as lazy (e.g. </span><code>lazy import inspect</code><span>).</span></li>
<li><span>A clear roadmap detailed in the PEP, outlining the timeframe in which it was expected that lazy-import behaviour would become the default in Python.</span></li>
<li><span>A promise that the implementation of lazy imports would not lead to any changes being made to the </span><code>dict</code><span> data structure.</span></li>
<li><span>Generalised support of “lazy names”, rather than just support for lazy </span><em><span>imports</span></em><span> specifically.</span></li>
</ol><p><span>The room unanimously agreed that change (3) would make them more likely to support the PEP, and largely agreed that change (4) would make them less likely to support it. The room was (frustratingly, for Meyer) split on whether proposals (1) and (2) would make them more or less likely to give the PEP their support.</span></p><p><span>On the bright side, only one attendee said they thought they could never support a proposal for lazy imports in Python. </span><em><span>Unfortunately</span></em><span> for Meyer, the attendee in question was Thomas Wouters, currently serving on the Steering Council.</span></p><p><span style="font-size: medium;"><br /></span></p><h2 class="raw"><hr /></h2><h2 class="raw"><span style="font-size: medium;"><br /></span></h2><h2 class="raw"><span>Amethyst Reese: Can we </span><code>__call__</code><span> modules?</span></h2><p><span>Amethyst Reese presented on an idea that has since become </span><a href="https://peps.python.org/pep-0713/" rel="noopener" target="_blank"><span>PEP 713</span></a><span>: a proposal to add a mechanism allowing developers to easily create callable modules.</span></p><p><span><br /></span></p><p><span></span></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEiY5RbnRYMXpHo5AYTKNrKuRGJH9uwQ8158ypEk9tb09F7AK_XpST-9SfY9Prn6Rw8fd1syzEqVRTCzuPVrTAjYn8VGJmJbIjhaxwWjG8STo6SU9m4ais2PKwQPlHJ_ByqK20J9uWbojLt2ojf3LgSeFVy7RG1L4UjCF7Ol1i3hGYZ7Wyw" style="margin-left: auto; margin-right: auto;"><img alt="" data-original-height="719" data-original-width="959" height="240" src="https://blogger.googleusercontent.com/img/a/AVvXsEiY5RbnRYMXpHo5AYTKNrKuRGJH9uwQ8158ypEk9tb09F7AK_XpST-9SfY9Prn6Rw8fd1syzEqVRTCzuPVrTAjYn8VGJmJbIjhaxwWjG8STo6SU9m4ais2PKwQPlHJ_ByqK20J9uWbojLt2ojf3LgSeFVy7RG1L4UjCF7Ol1i3hGYZ7Wyw" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Amethyst Reese at the Python Language Summit<br />(Photo by Hugo van Kemenade)</td></tr></tbody></table><span><br /><br /></span><p></p><p><span>Strictly speaking, it’s </span><em><span>possible</span></em><span> to create a callable module today, but it’s not exactly easy. The example given in the PEP looks something like the following:</span></p><pre><code class="python hljs"><div class="wrapper"><div class="gutter linenumber"><span></span>
<span></span></div><div class="code"><span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> types
<span class="hljs-keyword">def</span> <span class="hljs-title function_">fancy</span>(<span class="hljs-params">...</span>):
    ...
<span class="hljs-keyword">class</span> <span class="hljs-title class_">FancyModule</span>(types.ModuleType):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, ...</span>):
        <span class="hljs-keyword">return</span> fancy(...)
sys.modules[__name__].__class__ = FancyModule
</div><div class="code"><br /></div></div></code></pre><p><span>Reese proposes that we provide a simpler mechanism to create callable modules: simply provide special recognition for module-level </span><code>__call__</code><span> functions, similar to the way that </span><a href="https://peps.python.org/pep-0562/" rel="noopener" target="_blank"><span>PEP 562</span></a><span> added special recognition of module-level </span><code>__getattr__</code><span> and </span><code>__dir__</code><span> functions. With the semantics specified in </span><a href="https://peps.python.org/pep-0713/" rel="noopener" target="_blank"><span>PEP 713</span></a><span>, </span><code>fancy.py</code><span> could be rewritten as follows:</span></p><pre><code class="python hljs"><div class="wrapper"><div class="gutter linenumber"><span></span>
<span></span></div><div class="code"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fancy</span>(<span class="hljs-params">...</span>):
    ...
__call__ = fancy
</div><div class="code"><br /></div></div></code></pre><p><span>With a module, </span><code>fancy.py</code><span>, defined like the above, users would simply be able to do the following:</span></p><pre><code class="python hljs"><div class="wrapper"><div class="gutter linenumber"><span></span>
<span></span></div><div class="code"><span class="hljs-keyword">import</span> fancy
fancy()
</div><div class="code"><br /></div></div></code></pre><p><span>This would allow users of Python to avoid constructs which often feel unnecessarily verbose and involve frustrating amounts of boilerplate, such as:</span></p><pre><code class="python hljs"><div class="wrapper"><div class="gutter linenumber"><span></span>
<span></span></div><div class="code"><span class="hljs-keyword">import</span> datetime
<span class="hljs-keyword">import</span> pprint
<span class="hljs-keyword">import</span> dis
d = datetime.datetime()
pprint.pprint(...)
dis.dis(...)
</div><div class="code"><br /></div></div></code></pre><p><span>It would also allow users to create callable modules in a way that would be easier for type checkers to support, as dynamically inserting custom objects into </span><code>sys.modules</code><span> can cause issues for these tools.</span></p><p><span>The proposal was met with curiosity by attendees of the Language Summit. Thomas Wouters said that he had originally opposed the addition of module-level </span><code>__getattr__</code><span> and </span><code>__dir__</code><span>, introduced by PEP 562. However, now they had been introduced to Python, he was of the opinion that it might make sense to add support for module-level dunder methods including </span><code>__call__</code><span>, but also others such as </span><code>__setattr__</code><span>.</span></p></div>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-36931050791215969452023-05-29T11:10:00.005-04:002023-10-19T08:49:40.255-04:00The Python Language Summit 2023: What is the Standard Library for?<p>&nbsp;Brett Cannon came to the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit</a> this year with a fundamental question for the assembled core developers: What is the standard library for?</p><p>According to a quick&nbsp;<code>python -c "import sys; print(len(sys.stdlib_module_names))"</code>&nbsp;call on my laptop, the standard library in Python 3.11 consists of 305 importable modules. Many of these are implementation details that, if you’re a good citizen, you really&nbsp;<em>shouldn’t</em>&nbsp;be importing – but the point stands that the Python standard library is perhaps now larger than it should be.</p><p>But the goal of his question, Cannon explained, wasn’t to decide which modules to get&nbsp;<em>rid</em>&nbsp;of. Instead, it was to create guidelines on when and why&nbsp;<em>new</em>&nbsp;modules should be accepted into the standard library.</p><blockquote><p>"We need to audit the standard library, and not&nbsp;<em>deprecate</em>&nbsp;it, but decide which bits should probably not have been added if we had perfect hindsight.&nbsp;</p></blockquote><blockquote><p>-- <i>Guido van Rossum, CPython Core Developer and former BDFL</i></p></blockquote><p>Carol Willing agreed that the core dev team shouldn’t be looking to remove modules&nbsp;<em>en masse</em>, but should decide what kinds of modules they wanted to admit in the future. Łukasz Langa agreed, and pointed out that it was often hard removing modules even when we wanted to, due to the fact that “the standard library is a huge import cycle”.</p><h2 class="raw">Where do we go now?</h2><p>Cannon himself put forward two possible answers to his question, before tossing it out to the audience:</p><ol><li>The standard library should contain everything required to bootstrap an installer.</li><li>The standard library should make it easy for beginners to be able to write scripts without installing anything.</li></ol><p>The conversation was free-flowing, but a common point of consensus among the attendees was that the standard library should focus on tools and utilities that allow users to write better Python code. Hynek Schlawack cited&nbsp;<a href="https://docs.python.org/3/library/dataclasses.html" rel="noopener" target="_blank"><code>dataclasses</code></a>&nbsp;as an example of a module that made writing classes much less painful, and generally led to them writing better code as a result. (Schlawack is the author of the&nbsp;<a href="https://www.attrs.org/en/stable/" rel="noopener" target="_blank">attrs</a>&nbsp;library, the third-party inspiration for&nbsp;<code>dataclasses</code>, which itself is still going strong.) Filipe Laíns agreed, arguing that the core dev team should focus on building business implementations for third-party libraries to build on top of.</p><blockquote><p>“The default answer for ‘Should this be in the standard library?’ should be ‘No’, but we should bless smaller utilities that help people write better Python code”&nbsp;</p></blockquote><blockquote><p>-- <i>Antonio Cuni, HPy Core Developer</i></p></blockquote><p>There was a certain amount of regret in the air about modules that perhaps should never have been added to the standard library, and had proved themselves to be significant maintenance burdens in the years since, but could now never be removed.&nbsp;<a href="https://docs.python.org/3/library/tkinter.html" rel="noopener" target="_blank"><code>tkinter</code></a>, it was universally agreed, was the primary example here; possibly&nbsp;<a href="https://docs.python.org/3/library/multiprocessing.html" rel="noopener" target="_blank"><code>multiprocessing</code></a>&nbsp;also.</p><p>Guido van Rossum pondered whether&nbsp;<a href="https://docs.python.org/3/library/asyncio.html" rel="noopener" target="_blank"><code>asyncio</code></a>&nbsp;should ever have been added to the standard library, remarking that it had been difficult to evolve&nbsp;<code>asyncio</code>&nbsp;while it was in the standard library, and had possibly been added before it was “fully baked”. The&nbsp;<code>ssl</code>&nbsp;integration had probably been a mistake, he said, and should have been left to third parties.</p><p>Łukasz Langa noted that modules such as&nbsp;<code>asyncio</code>&nbsp;and&nbsp;<a href="https://docs.python.org/3/library/typing.html" rel="noopener" target="_blank"><code>typing</code></a>, which had continued to evolve rapidly after being added to the standard library, had helped spur new syntax changes to Python that had been to the language’s betterment. Without&nbsp;<code>asyncio</code>&nbsp;in the standard library, Langa argued, we would probably never have adopted the&nbsp;<code>async</code>/<code>await</code>&nbsp;syntax that is now the foundation of asynchronous Python programming.</p><p>Zac Hatfield-Dods, maintainer of several prominent third-party packages, said that different standard-library packages had different impacts on the Python ecosystem.&nbsp;<a href="https://docs.pytest.org/en/7.3.x/" rel="noopener" target="_blank">Pytest</a>, one of the libraries he maintains, had managed to flourish and find success despite the existence of&nbsp;<a href="https://docs.python.org/3/library/unittest.html" rel="noopener" target="_blank"><code>unittest</code></a>&nbsp;in the standard library. But another library he helps out with, the asynchronous&nbsp;<a href="https://trio.readthedocs.io/en/stable/" rel="noopener" target="_blank">Trio</a>&nbsp;framework, had struggled to attract users while&nbsp;<code>asyncio</code>&nbsp;had been part of the standard library. “Nobody supports alternative async implementations,” he complained, despite Trio’s development often being years ahead of where&nbsp;<code>asyncio</code>&nbsp;is. (In the coffee break afterwards, Hatfield-Dods was keen to emphasise that he is, in fact, a fan of&nbsp;<code>asyncio</code>&nbsp;and the work of the&nbsp;<code>asyncio</code>&nbsp;maintainers.)</p><p><br /></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhNHMtg7BSQza8aOAebA4arhofrKFaaX0MulKsXjgTFBc--7H5bWHuumjdw-DMOHN_eGH1cBA4sZzumqMPp0caSMVZv2aySrlwd7R9jMgjwwsMEpluO89sKCEsbAiHli5fg_i65HkN2OJoXnCqlKQiCA9HBlICEB_NUcFOsN3WcCPKOAbU/s959/image_2023-05-27_223251699.png" style="margin-left: auto; margin-right: auto;"><img border="0" data-original-height="719" data-original-width="959" height="240" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhNHMtg7BSQza8aOAebA4arhofrKFaaX0MulKsXjgTFBc--7H5bWHuumjdw-DMOHN_eGH1cBA4sZzumqMPp0caSMVZv2aySrlwd7R9jMgjwwsMEpluO89sKCEsbAiHli5fg_i65HkN2OJoXnCqlKQiCA9HBlICEB_NUcFOsN3WcCPKOAbU/s320/image_2023-05-27_223251699.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Zac Hatfield-Dods (left), speaking at the Language Summit<br />(Photo by Hugo van Kemenade)</td></tr></tbody></table><p><br /></p><p>Cannon brought up the question of whether a module like&nbsp;<a href="https://docs.python.org/3/library/pathlib.html" rel="noopener" target="_blank"><code>pathlib</code></a>&nbsp;belonged. “It’s just sugar,” he remarked – i.e., hardly a “core utility” or a protocol that allowed people to write better code. But it has nonetheless been one of the more popular additions to the standard library in recent years. Langa again pushed back, arguing that without the addition of&nbsp;<code>pathlib</code>&nbsp;to the standard library, we would never have added&nbsp;<a href="https://docs.python.org/3/library/os.html#os.PathLike" rel="noopener" target="_blank"><code>os.PathLike</code></a>, a protocol that had allowed a common interface for describing file-system paths in Python. “A third-party PyPI package wouldn’t have convinced us to make that change,” Langa argued.</p><p>Several attendees noted that adding a module to the standard library often made it hard for users to use features added to the module in newer versions of Python, due to CPython’s slow development cycle. One solution could be to provide third-party versions of standard-library modules on PyPI, backporting the latest features of a module to older versions of Python. Thomas Wouters argued that previous attempts at providing these backport modules had often been disastrous. However, Jelle Zijlstra noted that&nbsp;<a href="https://github.com/python/typing_extensions" rel="noopener" target="_blank">typing_extensions</a>, which backports features from the latest version of the&nbsp;<code>typing</code>&nbsp;module, had been incredibly successful (though it was sometimes hard to maintain).</p><p>Overall, there was agreement that the original motivations for a large, “batteries-included” standard library no longer held up to scrutiny. “In the good old days,” Ned Deily reminisced, “We said ‘batteries-included’ because we didn’t have a good story for third-party installation.” But in 2023, installing third-party packages from PyPI is much easier.</p><p>Often, Thomas Wouters noted, people preferred using standard-library modules in a corporate setting due to the fact that the installation of any third-party package would require approval from their company’s IT department. But, he noted, this was hardly Python’s problem.</p>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.891047412.450545463821157 -147.0472974 69.07101313617885 -76.7347974tag:blogger.com,1999:blog-8520.post-58510204325702660662023-05-29T11:06:00.004-04:002023-06-05T07:47:41.459-04:00The Python Language Summit 2023: Pattern Matching, __match__, and View Patterns<div class="markdown-body container-fluid comment-inner comment-enabled" data-hard-breaks="true" id="doc">One of the most exciting new features in Python 3.10 was <a href="https://docs.python.org/3/whatsnew/3.10.html#pep-634-structural-pattern-matching">the introduction of pattern matching</a> (introduced in PEPs <a href="https://peps.python.org/pep-0634/">634</a>, <a href="https://peps.python.org/pep-0635/">635</a> and <a href="https://peps.python.org/pep-0636/">636</a>). Pattern matching has a wide variety of uses, but really shines in situations where you need to undergo complex destructurings of tree-like datastructures.<p><span>That’s a lot of words which may or may not mean very much to you – but consider, for example, using </span><a href="https://docs.python.org/3/library/ast.html" rel="noopener" target="_blank"><span>the </span><code>ast</code><span> module</span></a><span> to parse Python source code. If you’re unfamiliar with the </span><code>ast</code><span> module: the module provides tools that enable you to compile Python source code into an “abstract syntax tree” (AST) representing the code’s structure. The Python interpreter itself converts Python source code into an AST in order to understand how to run that code – but parsing Python source code using ASTs is also a common task for linters, such as plugins for </span><a href="https://flake8.pycqa.org/en/latest/" rel="noopener" target="_blank"><span>flake8</span></a><span> or </span><a href="https://www.pylint.org" rel="noopener" target="_blank"><span>pylint</span></a><span>. In the following example, </span><code>ast.parse()</code><span> is used to parse the source code </span><code>x = 42</code><span> into an </span><code>ast.Module</code><span> node, and </span><code>ast.dump()</code><span> is then used to reveal the tree-like structure of that node in a human-readable form:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">ast</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">source</span> <span class="o">=</span> <span class="s2">"x = 42"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">node</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">node</span>
<span class="go">&lt;ast.Module object at 0x000002A70F928D80&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="go">Module(</span>
<span class="go">  body=[</span>
<span class="go">    Assign(</span>
<span class="go">      targets=[</span>
<span class="go">        Name(id='x', ctx=Store())],</span>
<span class="go">      value=Constant(value=42))],</span>
<span class="go">  type_ignores=[])</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><br /></div></div><p><span>How does working with ASTs relate to pattern-matching? Well, a function to determine whether (to a reasonable approximation) an arbitrary AST node represents the symbol </span><code>collections.deque</code><span> might have looked something like this, before pattern matching…</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="kn">import</span> <span class="nn">ast</span>
<span class="c1"># This obviously won't work if the symbol is imported with an alias</span>
<span class="c1"># in the source code we're inspecting</span>
<span class="c1"># (e.g. "from collections import deque as d").</span>
<span class="c1"># But let's not worry about that here :-)</span>
<span class="k">def</span> <span class="nf">node_represents_collections_dot_deque</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">AST</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents 'deque' or 'collections.deque'"""</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span> <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="s2">"deque"</span>
    <span class="p">)</span> <span class="ow">or</span> <span class="p">(</span>
        <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">)</span>
        <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
        <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="s2">"collections"</span>
        <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">attr</span> <span class="o">==</span> <span class="s2">"deque"</span>
    <span class="p">)</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style>
<div class="code"><br /></div><p><span>But in Python 3.10, pattern matching allows an elegant destructuring syntax:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="kn">import</span> <span class="nn">ast</span>
<span class="k">def</span> <span class="nf">node_represents_collections_dot_deque</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">AST</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents 'deque' or 'collections.deque'"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="p">:</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"deque"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"collections"</span><span class="p">),</span> <span class="s2">"deque"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><span class="hljs-literal"><br /></span></div><p><span>I know which one </span><em><span>I</span></em><span> prefer.</span></p><p><span>For some, though, this still isn’t enough – and Michael “Sully” Sullivan is one of them. At the <a href="https://pyfound.blogspot.com/2023/05/the-python-language-summit-2023_29.html" rel="nofollow" target="">Python Language Summit 2023</a>, Sullivan shared ideas for where pattern matching could go next.</span></p><p><br /></p><hr /><p></p><h2 class="raw"><span>Playing with matches (</span><a href="https://www.youtube.com/watch?v=DJeMfTdvVo8" rel="noopener" target="_blank"><span>without getting burned</span></a><span>)</span></h2><div><span><br /></span></div><p><span>Sullivan’s contention is that, while pattern matching provides elegant syntactic sugar in simple cases such as the one above, our ability to chain destructurings using pattern matching is currently fairly limited. For example, say we want to write a function inspecting Python AST that takes an </span><code>ast.FunctionDef</code><span> node and identifies whether the node represents a synchronous function with exactly two parameters, both of them annotated as accepting integers. The function would behave so that the following holds true:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">ast</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">source</span> <span class="o">=</span> <span class="s2">"def add_2(number1: int, number2: int): pass"</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">node</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">source</span><span class="p">)</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
<span class="go">&lt;class 'ast.FunctionDef'&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
<span class="go">True</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><br /></div><p><span>With pre-pattern-matching syntax, we might have written such a function like this:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="k">def</span> <span class="nf">is_int</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">AST</span> <span class="o">|</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents 'int' or 'builtins.int'"""</span>
    <span class="k">return</span> <span class="p">(</span>
        <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span> <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="s2">"int"</span>
    <span class="p">)</span> <span class="ow">or</span> <span class="p">(</span>
        <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">)</span>
        <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
        <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="s2">"builtins"</span>
        <span class="ow">and</span> <span class="n">node</span><span class="o">.</span><span class="n">attr</span> <span class="o">==</span> <span class="s2">"int"</span>
    <span class="p">)</span>
<span class="k">def</span> <span class="nf">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents a function that accepts two ints"""</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">posonlyargs</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">args</span>
    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nb">all</span><span class="p">(</span><span class="n">is_int</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">annotation</span><span class="p">)</span> <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">args</span><span class="p">)</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><br /></div><div class="code"><br /></div><div class="code">If we wanted to rewrite this using pattern matching, we could possibly do something like this:</div><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="k">def</span> <span class="nf">is_int</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">AST</span> <span class="o">|</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents 'int' or 'builtins.int'"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="p">:</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"int"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"builtins"</span><span class="p">),</span> <span class="s2">"int"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
<span class="k">def</span> <span class="nf">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents a function that accepts two ints"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">posonlyargs</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">case</span> <span class="p">[</span><span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(),</span> <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">()]</span> <span class="k">as</span> <span class="n">arglist</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">all</span><span class="p">(</span><span class="n">is_int</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">annotation</span><span class="p">)</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">arglist</span><span class="p">)</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><span class="hljs-literal"><br /></span></div><p><span>That leaves a lot to be desired, however! The </span><code>is_int()</code><span> helper function can be rewritten in a </span><em><span>much</span></em><span> cleaner way. But integrating it into the </span><code>is_function_taking_two_ints()</code><span> is… somewhat icky! The code feels </span><em><span>harder</span></em><span> to understand than before, whereas the goal of pattern matching is to improve readability.</span></p><p><span>Something like this, (ab)using metaclasses, gets us a lot closer to what it feels pattern matching </span><em><span>should</span></em><span> be like. By using one of Python’s hooks for customising </span><code>isinstance()</code><span> logic, it’s possible to rewrite our </span><code>is_int()</code><span> helper function as a class, meaning we can seamlessly integrate it into our </span><code>is_function_taking_two_ints()</code><span> function in a very expressive way:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="kn">import</span> <span class="nn">abc</span>
<span class="kn">import</span> <span class="nn">ast</span>
<span class="k">class</span> <span class="nc">PatternMeta</span><span class="p">(</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__instancecheck__</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">inst</span><span class="p">:</span> <span class="nb">object</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">cls</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">inst</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Pattern</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">PatternMeta</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""Abstract base class for types representing 'abstract patterns'"""</span>
    <span class="nd">@staticmethod</span>
    <span class="nd">@abc</span><span class="o">.</span><span class="n">abstractmethod</span>
    <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">        </span><span class="sd">"""Subclasses must override this method"""</span>
        <span class="k">raise</span> <span class="ne">NotImplementedError</span>
<span class="k">class</span> <span class="nc">int_node</span><span class="p">(</span><span class="n">Pattern</span><span class="p">):</span>
<span class="w">    </span><span class="sd">"""Class representing AST patterns signifying `int` or `builtins.int`"""</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">match</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"int"</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">True</span>
            <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"builtins"</span><span class="p">),</span> <span class="s2">"int"</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">True</span>
            <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">False</span>
<span class="k">def</span> <span class="nf">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents a function that accepts two ints"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">posonlyargs</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">case</span> <span class="p">[</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">int_node</span><span class="p">()),</span> 
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">int_node</span><span class="p">()),</span>
        <span class="p">]:</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><span class="hljs-literal"><br /></span></div><p><span>This is still hardly ideal, however – that’s a lot of boilerplate we’ve had to introduce to our helper function for identifying </span><code>int</code><span> annotations! And who wants to muck about with metaclasses?</span></p><p><span><br /></span></p><p><span></span></p><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEjz18FEpI2W8Dx9w0LUFcj4KhCu2ml9sKxdPh33P6IBGuLx65qgBsTMJTwHPXtX7CzPYtkL81sxGJv8RJ8RQlCwKKkGy7epUxp4io7PRMeO6_ZAWF1yvlWqtg6cEiGtwhcRUl-8F7g8M3p8jwKK2b-9YHEbaacoz8OUi4LglXSPXvo3maY" style="margin-left: auto; margin-right: auto;"><img alt="" data-original-height="607" data-original-width="805" height="240" src="https://blogger.googleusercontent.com/img/a/AVvXsEjz18FEpI2W8Dx9w0LUFcj4KhCu2ml9sKxdPh33P6IBGuLx65qgBsTMJTwHPXtX7CzPYtkL81sxGJv8RJ8RQlCwKKkGy7epUxp4io7PRMeO6_ZAWF1yvlWqtg6cEiGtwhcRUl-8F7g8M3p8jwKK2b-9YHEbaacoz8OUi4LglXSPXvo3maY" width="318" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A slide from Sullivan's talk</td></tr></tbody></table><p></p><p><span style="font-size: xx-small;"><br /></span></p><hr /><h2 class="raw"><span style="font-size: xx-small;"><br /></span></h2><h2 class="raw"><span>A </span><code>__match__</code><span> made in heaven?</span></h2><div><span><br /></span></div><p><span>Sullivan proposes that we make it easier to write helper functions for pattern matching, such as the example above, without having to resort to custom metaclasses. Two competing approaches were brought for discussion.</span></p><p><span>The first idea – a </span><code>__match__</code><span> special method – is perhaps the easier of the two to immediately grasp, and appeared in early drafts of the pattern matching PEPs. (It was eventually removed from the PEPs in order to reduce the scope of the proposed changes to Python.) The proposal is that any class could define a </span><code>__match__</code><span> method that could be used to customise how match statements apply to the class. Our </span><code>is_function_taking_two_ints()</code><span> case could be rewritten like so:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="k">class</span> <span class="nc">int_node</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Class representing AST patterns signifying `int` or `builtins.int`"""</span>
    <span class="c1"># The __match__ method is understood by Python to be a static method,</span>
    <span class="c1"># even without the @staticmethod decorator,</span>
    <span class="c1"># similar to __new__ and __init_subclass__</span>
    <span class="k">def</span> <span class="nf">__match__</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span> <span class="o">|</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">:</span>
        <span class="k">match</span> <span class="n">node</span><span class="p">:</span>
            <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"int"</span><span class="p">):</span>
                <span class="c1"># Successful matches can return custom objects,</span>
                <span class="c1"># that can be bound to new variables by the caller</span>
                <span class="k">return</span> <span class="n">node</span>
            <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"builtins"</span><span class="p">),</span> <span class="s2">"int"</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">node</span>
            <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
                <span class="c1"># Return `None` to indicate that there was no match</span>
                <span class="k">return</span> <span class="kc">None</span>
<span class="k">def</span> <span class="nf">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents a function that accepts two ints"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">posonlyargs</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">case</span> <span class="p">[</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">int_node</span><span class="p">()),</span> 
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">int_node</span><span class="p">()),</span>
        <span class="p">]:</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><span class="hljs-literal"><br /></span></div><p><span>The second idea is more radical: the introduction of some kind of new syntax (perhaps reusing Python’s </span><code>-&gt;</code><span> operator) that would allow Python coders to “apply” functions during pattern matching. With this proposal, we could rewrite </span><code>is_function_taking_two_ints()</code><span> like so:</span></p><p><span><br /></span></p>
<div class="demo-highlight"><pre><span></span><span class="k">def</span> <span class="nf">is_int</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">AST</span> <span class="o">|</span> <span class="kc">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents 'int' or 'builtins.int'"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="p">:</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"int"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span> <span class="n">ast</span><span class="o">.</span><span class="n">Attribute</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="s2">"builtins"</span><span class="p">),</span> <span class="s2">"int"</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">True</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
<span class="k">def</span> <span class="nf">is_function_taking_two_ints</span><span class="p">(</span><span class="n">node</span><span class="p">:</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
<span class="w">    </span><span class="sd">"""Determine if *node* represents a function that accepts two ints"""</span>
    <span class="k">match</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">posonlyargs</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">args</span><span class="p">:</span>
        <span class="k">case</span> <span class="p">[</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">is_int</span> <span class="o">-&gt;</span> <span class="kc">True</span><span class="p">),</span>
            <span class="n">ast</span><span class="o">.</span><span class="n">arg</span><span class="p">(</span><span class="n">annotation</span><span class="o">=</span><span class="n">is_int</span> <span class="o">-&gt;</span> <span class="kc">True</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>
</pre></div>
<style id="css-style">pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.demo-highlight .hll { background-color: #ffffcc }
.demo-highlight { background: #ffffff; }
.demo-highlight .c { color: #008800; font-style: italic } /* Comment */
.demo-highlight .err { color: #a61717; background-color: #e3d2d2 } /* Error */
.demo-highlight .g { color: #2c2cff } /* Generic */
.demo-highlight .k { color: #2c2cff } /* Keyword */
.demo-highlight .x { background-color: #ffffe0 } /* Other */
.demo-highlight .ch { color: #008800; font-style: italic } /* Comment.Hashbang */
.demo-highlight .cm { color: #008800; font-style: italic } /* Comment.Multiline */
.demo-highlight .cp { color: #008800; font-style: italic } /* Comment.Preproc */
.demo-highlight .cpf { color: #008800; font-style: italic } /* Comment.PreprocFile */
.demo-highlight .c1 { color: #008800; font-style: italic } /* Comment.Single */
.demo-highlight .cs { color: #008800; font-style: italic } /* Comment.Special */
.demo-highlight .gd { color: #2c2cff } /* Generic.Deleted */
.demo-highlight .ge { color: #008800 } /* Generic.Emph */
.demo-highlight .ges { color: #2c2cff } /* Generic.EmphStrong */
.demo-highlight .gr { color: #d30202 } /* Generic.Error */
.demo-highlight .gh { color: #2c2cff } /* Generic.Heading */
.demo-highlight .gi { color: #2c2cff } /* Generic.Inserted */
.demo-highlight .go { color: #2c2cff } /* Generic.Output */
.demo-highlight .gp { color: #2c2cff } /* Generic.Prompt */
.demo-highlight .gs { color: #2c2cff } /* Generic.Strong */
.demo-highlight .gu { color: #2c2cff } /* Generic.Subheading */
.demo-highlight .gt { color: #2c2cff } /* Generic.Traceback */
.demo-highlight .kc { color: #2c2cff; font-weight: bold } /* Keyword.Constant */
.demo-highlight .kd { color: #2c2cff } /* Keyword.Declaration */
.demo-highlight .kn { color: #2c2cff } /* Keyword.Namespace */
.demo-highlight .kp { color: #2c2cff } /* Keyword.Pseudo */
.demo-highlight .kr { color: #353580; font-weight: bold } /* Keyword.Reserved */
.demo-highlight .kt { color: #2c2cff } /* Keyword.Type */
.demo-highlight .m { color: #2c8553; font-weight: bold } /* Literal.Number */
.demo-highlight .s { color: #800080 } /* Literal.String */
.demo-highlight .nb { color: #2c2cff } /* Name.Builtin */
.demo-highlight .nf { font-weight: bold; font-style: italic } /* Name.Function */
.demo-highlight .nv { color: #2c2cff; font-weight: bold } /* Name.Variable */
.demo-highlight .w { color: #bbbbbb } /* Text.Whitespace */
.demo-highlight .mb { color: #2c8553; font-weight: bold } /* Literal.Number.Bin */
.demo-highlight .mf { color: #2c8553; font-weight: bold } /* Literal.Number.Float */
.demo-highlight .mh { color: #2c8553; font-weight: bold } /* Literal.Number.Hex */
.demo-highlight .mi { color: #2c8553; font-weight: bold } /* Literal.Number.Integer */
.demo-highlight .mo { color: #2c8553; font-weight: bold } /* Literal.Number.Oct */
.demo-highlight .sa { color: #800080 } /* Literal.String.Affix */
.demo-highlight .sb { color: #800080 } /* Literal.String.Backtick */
.demo-highlight .sc { color: #800080 } /* Literal.String.Char */
.demo-highlight .dl { color: #800080 } /* Literal.String.Delimiter */
.demo-highlight .sd { color: #800080 } /* Literal.String.Doc */
.demo-highlight .s2 { color: #800080 } /* Literal.String.Double */
.demo-highlight .se { color: #800080 } /* Literal.String.Escape */
.demo-highlight .sh { color: #800080 } /* Literal.String.Heredoc */
.demo-highlight .si { color: #800080 } /* Literal.String.Interpol */
.demo-highlight .sx { color: #800080 } /* Literal.String.Other */
.demo-highlight .sr { color: #800080 } /* Literal.String.Regex */
.demo-highlight .s1 { color: #800080 } /* Literal.String.Single */
.demo-highlight .ss { color: #800080 } /* Literal.String.Symbol */
.demo-highlight .bp { color: #2c2cff } /* Name.Builtin.Pseudo */
.demo-highlight .fm { font-weight: bold; font-style: italic } /* Name.Function.Magic */
.demo-highlight .vc { color: #2c2cff; font-weight: bold } /* Name.Variable.Class */
.demo-highlight .vg { color: #2c2cff; font-weight: bold } /* Name.Variable.Global */
.demo-highlight .vi { color: #2c2cff; font-weight: bold } /* Name.Variable.Instance */
.demo-highlight .vm { color: #2c2cff; font-weight: bold } /* Name.Variable.Magic */
.demo-highlight .il { color: #2c8553; font-weight: bold } /* Literal.Number.Integer.Long */</style><div class="code"><span class="hljs-literal"><br /></span></div><div class="code"><span class="hljs-literal" style="font-size: xx-small;"><br /></span></div><hr /><h2 class="raw"><span style="font-size: xx-small;"><br /></span></h2><h2 class="raw"><span>Match-maker, match-maker, </span><a href="https://www.youtube.com/watch?v=59Hj7bp38f8" rel="noopener" target="_blank"><span>make me a </span><code>__match__</code></a><span>…</span></h2><div><span><br /></span></div><div><span><br /></span></div><div><span><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"><tbody><tr><td style="text-align: center;"><a href="https://blogger.googleusercontent.com/img/a/AVvXsEjMxObGvaIvslDc98eA-L5NJPCh56mPTurCwLIsqKxY3BHmVUaXFKcXLdFJgNMG2Ag0MxL3Q4kagE0SAAIFH-KNhuSa3k6BL0sWhn5dWK1ro1DJy7FhPwVDaZKr1o0aToh_MTmnIKy6NAFZGSSfPj1CDSBlw1tdPoUm_R-N4Z-hMnRTl4M" style="margin-left: auto; margin-right: auto;"><img alt="" data-original-height="610" data-original-width="806" height="240" src="https://blogger.googleusercontent.com/img/a/AVvXsEjMxObGvaIvslDc98eA-L5NJPCh56mPTurCwLIsqKxY3BHmVUaXFKcXLdFJgNMG2Ag0MxL3Q4kagE0SAAIFH-KNhuSa3k6BL0sWhn5dWK1ro1DJy7FhPwVDaZKr1o0aToh_MTmnIKy6NAFZGSSfPj1CDSBlw1tdPoUm_R-N4Z-hMnRTl4M" width="317" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">A slide from Sullivan's talk</td></tr></tbody></table><br /><br /></span></div><p><span>The reception in the room to Sullivan’s ideas was positive; the consensus seemed to be that there was clearly room for improvement in this area. Brandt Bucher, </span><a href="https://www.youtube.com/watch?v=XpxTrDDcpPE" rel="noopener" target="_blank"><span>author of the original pattern matching implementation in Python 3.10</span></a><span>, concurred that this kind of enhancement was needed. Łukasz Langa, meanwhile, said he’d received many queries from users of other programming languages such as C#, asking how to tackle this kind of problem.</span></p><p><span>The proposal for a </span><code>__match__</code><span> special method follows a pattern common in Python’s data model, where double-underscore “dunder” methods are overridden to provide a class with special behaviour. As such, it will likely be less jarring, at first glance, to those new to the idea. Attendees of Sullivan’s talk seemed, broadly, to slightly prefer the </span><code>__match__</code><span> proposal, and Sullivan himself said he thought it “looked prettier”.</span></p><p><span>Jelle Zijlstra argued that the </span><code>__match__</code><span> dunder would provide an elegant symmetry between the construction and destruction of objects. Brandt Bucher, meanwhile, said he thought the usability improvements weren’t significant enough to merit new syntax.</span></p><p><span>Nonetheless, the alternative proposal for new syntax also has much to recommend it. Sullivan argued that having dedicated syntax to express the idea of “applying” a function during pattern matching was more explicit. Mark Shannon agreed, noting the similarity between this idea and features in the Haskell programming language. “This is functional programming,” Shannon argued. “It feels weird to apply </span><a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="noopener" target="_blank"><span>OOP</span></a><span> models to this.”</span></p><p><span style="font-size: xx-small;"><br /></span></p><hr /><h2 class="raw"><span style="font-size: xx-small;"><br /></span></h2><h2 class="raw"><span>Addendum: pattern-matching resources and recipes</span></h2><div><span><br /></span></div><p><span>In the meantime, while we wait for a PEP, there are plenty of innovative uses of pattern matching springing up in the ecosystem. For further reading/watching/listening, I recommend:</span></p><ul>
<li><a href="https://www.youtube.com/watch?v=XpxTrDDcpPE" rel="noopener" target="_blank"><span>“A perfect </span><code>match</code><span>: The history, design and future of Python’s structural pattern matching”</span></a><span> – A talk by Brandt Bucher at PyCon 2022</span></li>
<li><a href="https://www.youtube.com/watch?v=ZTvwxXL37XI" rel="noopener" target="_blank"><span>“Structural Pattern Matching in the Real World”</span></a><span> – A talk by Raymond Hettinger at Pycon Italia 2022</span></li>
<li><a href="https://github.com/nedbat/adventofcode2022/blob/main/day07.py" rel="noopener" target="_blank"><code>RegexMatcher</code></a><span>: a class integrating pattern matching with Python’s </span><code>re</code><span> module. A 2022 Advent of Code solution by Ned Batchelder.</span></li>
<li><a href="https://stackoverflow.com/questions/72596436/how-to-perform-approximate-structural-pattern-matching-for-floats-and-complex" rel="noopener" target="_blank"><code>approximately</code></a><span>: A way to compare </span><code>float</code><span> and </span><code>complex</code><span> numbers using pattern matching, while avoiding the </span><a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="noopener" target="_blank"><span>perils of floating-point arithmetic</span></a><span>. A StackOverflow Q&amp;A by Raymond Hettinger.</span></li>
<li><a href="https://gist.github.com/msullivan/7f533f927a4ba3fffd856cb0c9527106" rel="noopener" target="_blank"><span>“A few related schemes for implementing view patterns in Python”</span></a><span>: A gist by Michael Sullivan (from February 2023)</span></li>
</ul>Alex Waygoodhttps://www.blogger.com/profile/18392244184145876843noreply@blogger.comSalt Lake City, UT, USA40.7607793 -111.8910474-39.374182062727606 107.48395260000001 90.0 28.733952599999995tag:blogger.com,1999:blog-8520.post-40871245153558332252023-05-11T17:21:00.001-04:002023-05-31T12:51:19.191-04:00PSF Board Election Dates for 2023<p>Board elections are a chance for the community to choose representatives to help the PSF create a vision for and build the future of the Python community. This year there are 4 seats open on the PSF board. You can see who is on the board currently<a href="https://www.python.org/psf/records/board/history/"> here</a>. (Dustin Ingram, Jeff Triplett, Nina Zakharenko and Thomas Wouters are at the end of their current terms.)</p><p>Timeline:<br /></p><ul style="text-align: left;"><li>    Nominations are open, Thursday, June 1st, 2:00 pm UTC</li><li>    Board Director Nomination cut-off: Thursday, June 15, 11:59 pm UTC</li><li>    Voter application cut-off date: Thursday, June 15, 11:59 pm UTC</li><li>    Announce candidates: Friday, June 16th</li><li>    Voting start date: Tuesday, June 20, 12:01 am UTC</li><li>    Voting end date: Friday, June 30, 11:59 pm UTC</li></ul><p style="text-align: left;">You will need to be a contributing, managing, supporting, or fellow member by June 15th to vote in this election. Learn more about membership<a href="https://www.python.org/psf/membership/"> here</a> or if you have questions about membership or nominations please email <a href="mailto:psf-elections@python.org">psf-elections@python.org</a> <br /><br />Who runs for the board? People that care about the Python community, who want to see it flourish and grow and also have a few hours a month to attend regular meetings, serve on committees, participate in conversations and promote the Python community. You can learn more about what the PSF board does <a href="https://www.youtube.com/watch?v=ZLKj6FaQA4M">here</a>. <br /><br />You can nominate yourself or someone else, but no one will be forced to run, so you may want to consider reaching out to someone before nominating them. Nominations open on June 1st, so you have a few weeks to research the role and craft a nomination statement.<br /><br />You are welcome to join the discussion about the PSF Board election on <a href="https://discuss.python.org/c/python-software-foundation/9">our forum</a> or come find us <a href="https://psf-board.slack.com/">in Slack</a>. This year we’ll also be running office hours in Telegraph to answer questions about running for the board and serving on the board. Those will be announced soon!<br /><br /> </p>Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-42141369922075055372023-05-05T14:31:00.003-04:002023-05-05T14:31:15.265-04:00All-Python Humble Bundle out now from No Starch Press!<p>&nbsp;</p><p>Have you been thinking about diving into a new topic in Python, or 
maybe just getting started? Here's a chance to get a whole batch of 
great Python books in a sweet deal, and help the PSF while you're at it!</p><p>&nbsp;No Starch Press, an indie tech-book publisher and Partner sponsor of the PSF,&nbsp; just announced <a href="https://www.humblebundle.com/books/python-no-starch-books">a partnership with Humble Bundle</a>
 that lets you pay what you want for all-Python DRM-free ebook titles 
for Python beginners to pros. And a share of the proceeds from the 
bundle goes to the PSF! The “Python, by No Starch Press” bundle runs now
 through May 22nd.</p><p>The bundle includes a curated selection of titles for all levels like <u>Python Crash Course</u> (Eric Matthes), <u>Automate the Boring Stuff with Python</u> (Al Sweigart), <u>Make Python Talk</u> (Mark Liu), and <u>Learn to Code by Solving Problems</u> (Daniel Zingaro).&nbsp;</p><p>The promotion has a pay-what-you-want model, so you can choose your preferred pricing tier. Pricing starts at $1 for <u>Mission Python - Code a Space Adventure Game!</u> (Sean McManus) + <u>Invent Your Own Computer Games With Python</u> (Al Sweigart), or starting at $36 you can get all 18 Python ebooks! <br /><br /><a href="https://www.humblebundle.com/books/python-no-starch-books">Check it out</a> and happy reading🐍📚<br /></p>Loren Craryhttps://www.blogger.com/profile/06125752284896762014noreply@blogger.comtag:blogger.com,1999:blog-8520.post-12284425182894926792023-04-13T10:28:00.006-04:002023-04-13T10:49:11.135-04:00Thank You for Many Years of Service, Van!We are wishing farewell to Van Lindberg after 16 years of service to the PSF, who has decided to step down from his Board Director and General Counsel roles. He helped us grow from a small volunteer organization with no staff, to an organization with 9 staff members that supports the whole Python ecosystem and its global community. He has served on our board for 11 years, as Chair of the PyCon US committee for 3 years before that and most recently as the PSF’s General Counsel for 7 years. <br /><br />For many years, Van has steered our IP policies as an open source project. He worked to make sure our trademark, license and contributor agreement policies kept pace with the evolving open source landscape. He has advised countless members of the PSF community on how to work with our licenses and how to properly think about trademarks, patents, cryptocurrency and much more. <br /><br />Van served first as an elected board member and then later as an appointed board member. Less formally, Van has been an enthusiastic presence at many, many PyCons and a steadying presence for our volunteer Trademarks working group. He has spoken at many open source events sharing his experience as a Pythonista and the expertise gained at the other open source communities he is a participant in. <br /><br />The PSF’s Board Chair Thomas Wouters said, “It's hard to imagine where the PSF would be today if it hadn't been for Van's experience, insight and strategic vision. He has been fundamental to the professionalisation of the Foundation and its Board of Directors, and a driving force behind the PSF's sustainability efforts, policies and of course legal direction. He is both a shining example of volunteer effort and a great mentor to many Board and staff members. I'm very grateful for the many years of service and dedication he gave to the PSF, and we're all the better for it.”<br /><br />We wish Van all the best in his future non-PSF open source work on OSPOCO and as a well-respected voice in the many open source legal conversations he participates in. Thanks again!Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-12553931071762494742023-04-11T09:59:00.002-04:002023-04-11T11:25:42.181-04:00The EU's Proposed CRA Law May Have Unintended Consequences for the Python Ecosystem<p>After reviewing the proposed <a href="https://digital-strategy.ec.europa.eu/en/library/cyber-resilience-act">Cyber Resilience Act </a>and <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A52022PC0495">Product Liability Act</a>, the PSF has found issues that put the mission of our organization and the health of the open-source software community at risk. While we support the stated goals of these policies of increasing security and accountability for European software consumers, we are concerned that overly broad policies will unintentionally harm the users they are intended to protect. We feel that it is important to consider the role vendor-neutral nonprofit organizations—especially public software repositories—play in the modern development of software.&nbsp;</p><p>Many modern software companies rely on open-source software from public repositories without notifying the author, and certainly without entering into any kind of commercial or contractual relationship with them. If the proposed law is enforced as currently written, the authors of open-source components might bear legal and financial responsibility for the way their components are applied in someone else’s commercial product. The existing language makes no differentiation between independent authors who have never been paid for the supply of software and corporate tech behemoths selling products in exchange for payments from end-users. We believe that increased liability should be carefully assigned to the entity that has entered into an agreement with the consumer. We join our European open source colleagues at the <a href="https://eclipse-foundation.blog/2023/02/23/cyber-resilience-act-good-intentions-and-unintended-consequences/">Eclipse Foundation</a> and <a href="https://blog.nlnetlabs.nl/open-source-software-vs-the-cyber-resilience-act/">NLnet Labs</a> in voicing our concerns over how these policies could affect global open source projects. <br /><b><br />Why does the Python Software Foundation care about CRA?</b><br /><br />The Python Software Foundation (PSF) is a nonprofit charitable organization that exists to promote, protect, and advance the Python programming language,<a href="https://www.fullstackpython.com/companies-using-python.html"> a cornerstone of the modern technology sector</a>. We are based in the US, but for more than 20 years we have served a global open source community of students, teachers, entrepreneurs, academics, scientists, artists, public sector workers, hobbyists and commercial software developers. The PSF does not sell software, but we provide a public square for developers to download code and talk about code, and we host components that other entities may include in their products. We facilitate technical discussions for the ecosystem generally and support many educational opportunities for the worldwide community of Python developers.<br /><br />We do many other things in the service of <a href="https://www.python.org/psf/mission/">our charitable mission</a>, but there are two activities that could be affected by the CRA: <br /><br /></p><p style="margin-left: 40px; text-align: left;">1) We host and provide the core Python programming language, standard library and interpreter to any who wish to use it free of charge. It may be downloaded from our website, and a version of Python is downloaded over 300 million times per day.  <br /><br />2) We host the Python Packaging Index (PyPI), a vast library of software packages, written by thousands of different entities and individuals, that is made available in a single place where all packages are public and freely available. PyPI is critical infrastructure for the entire ecosystem, and thousands of individuals and enterprises depend on it, downloading 10 billion packages in an average month. <br /></p><p><br />To be absolutely clear, nobody pays us for software, either for the core language or any of the packages that you can download from the repository we maintain. At first glance, that might lead one to believe that there is no money being made with Python or Python packages. In fact the reverse is true: a large number of people who build things with Python, analyze data with Python or create AI models with Python are doing so at a commercial company, academic institution or government agency that pays them to work there, and in fact a not-insignificant share of the profit-generating tech economy relies in some part on Python. For instance, many well known applications including YouTube, Instagram and Spotify are all built using Python code.<br /><br /><b>Hosting Python and Third-party Python Software in the Open is a Public Good</b><br /><br />We host a lot of software that is used in commercial applications and nearly everyone—except the PSF itself—is making a lot of money selling products that use Python code and libraries. We host that software so that it can be examined by anyone for flaws or bugs. We also host that software so that it can be used to teach new coders and the next generation of tech pioneers. Any policy that does not provide clear carve outs for repositories offered for the public good will do irreparable harm to the individual’s accessibility to the power of modern software development. <br /><br />We’re concerned that some of the current proposed policy language doesn’t make things clear enough for an ecosystem like Python’s. Under the current language, the PSF could potentially be financially liable for any product that includes Python code, while never having received any monetary gain from any of these products. The risk of huge potential costs would make it impossible in practice for us to continue to provide Python and PyPI to the European public. Certainly, everyone wants security, for consumers to have reasonable assurances, and for the software industry to be accountable to its customers. However, it is critical that those assurances are expected from the correct entity and that the legal burden for any lapse in accountability is levied against the correct entity. Many of the software elements that end up in commercial software or hardware products come from publicly available open source repositories like PyPI where no compensation is given. Open source languages and repositories shouldn’t be thanked for the public services they freely provide with an open-ended risk of ruinously costly legal action. The PSF should not be liable for every application or device that happens to contain some Python code.<br /><br />Assigning liability to every upstream developer would create less security, not more. Leaving individual and/or under-resourced developers in a legally murky position when contributing to public repositories like the Python Package Index would almost certainly create a chilling effect for them. Only entities who are selling enough software or software/hardware combinations to absorb the ramifications of product liability could continue to operate in the open. The user improvements and shared security benefits of global software collaboration would only be accessible to those developers working on behalf of a few large companies. Growth and innovation would be stifled. The security of languages like Python depends on the continued availability of a neutral, non-commercial entity that can act as a clearinghouse for new software, improvements, and bug fixes that can be shared freely by the entire software community.<br /><br /><b>Increased Clarity is Needed </b><br /><br />Rather than following the code all the way upstream, we would prefer to see policy makers follow the money. Many components are not a product by themselves and it is a mistake to risk any shift of financial burden from the entity that compiles and sells a product to the open source developer that they received a free bit of code from. All coders should be working towards a world of greater security for end-users, but no one developer can imagine all the ways in which an individual open source component will be used and combined with other components for consumer use. Consumer liability and responsibility cannot be assigned until a product is assembled and something is for sale. <br /><br />In particular, we believe that there are two phrases in the CRA that cast too wide of a net. In Article 16, “A natural or legal person, other than the manufacturer, the importer or the distributor, that carries out a substantial modification of the product with digital elements shall be considered a manufacturer for the purposes of this Regulation.” is too broad. Open source is full of people who make a substantial modification to a piece of public code but do not have any contractual or financial relationship with the entity or entities that might eventually use that code in a commercial product. Secondly, in Recital 10, the phrase “…by providing a software platform through which the manufacturer monetises other services.” is not specific enough. Public code repositories and their hosts may offer paid classes or sell tickets to conferences about shared open source code while still having no control over the way commercial entities use that code in their products. Disincentivizing educational activities or curtailing public patches from third parties will not make European software consumers safer.<br /><br />The existing, publicly available open source ecosystem already provides robust and evolving security mechanisms where we share news about where individual components should be used and more importantly how they shouldn’t be used. When a flaw is discovered in a popular piece of software, we publicize patches and get potential vulnerabilities addressed across hundreds of products and tools. Chilling participation in these processes makes us more vulnerable, not less.<b><br /></b></p><p><b>Conclusion</b><br /><br />We need it to be crystal clear who is on the hook for both the assurances and the accountability that software consumers deserve. Language that specifically exempts public software repositories that are offered as a public good for the purpose of facilitating collaboration would make things much clearer. We'd also like to see our community, especially the hobbyists, individuals and other under-resourced entities who host packages on free public repositories like PyPI be exempt. We believe these exemptions would help both consumers and the open source ecosystem, as well as the economic actors who depend on it. We hope that policy makers in the European Union will carefully consider complex and vital ecosystems like Python when drafting landmark policies that affect open-source software development. <br /><br />PSF members and Python users in Europe may wish to <a href="https://www.europarl.europa.eu/meps/en/home">write to their MEP</a> voicing their concerns about the proposed CRA law before April 26th, while amendments that will protect public open source repositories are still being considered. </p>Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-64580333688229361772023-03-23T11:00:00.040-04:002023-03-23T11:00:00.384-04:00Protecting the Python Trademarks<h2 style="text-align: left;"><span style="background-color: white; color: #222222; font-family: RobotoMono; font-size: 15px;">Who is the Trademarks Working Group?</span></h2><div aria-live="assertive" class="ace-line" id="magicdomid5" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white; color: #222222;">The Python Software Foundation Trademarks Working Group was created by the PSF&nbsp;</span><span style="background-color: white; color: #222222;">Board of Directors to&nbsp; monitor and authorize (or prohibit) use of trademarks&nbsp;</span><span style="background-color: white; color: #222222;">held by the PSF.&nbsp; The WG—initially dubbed committee—was created in 2008, and&nbsp;</span><span style="background-color: white; color: #222222;">has been co-chaired by me since 2010, adding Marc-André Lemburg in 2013.&nbsp; We've&nbsp;</span><span style="background-color: white; color: #222222;">had a variety of other members over the years, with Iqbal Abdullah being a&nbsp;</span><span style="background-color: white; color: #222222;">wonderful and helpful member of the WG for the last couple years.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid12" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid13" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">You can write to us any time at on the </span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="mailto:psf-trademarks@python.org" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">Trademarks WG mailing list</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">.&nbsp; If you ever want to use one of our&nbsp;</span><span style="background-color: white; color: #222222;">marks, please do write to us.&nbsp; Even for those uses that are completely&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">non-contentious, we'd rather quickly approve them and have a record in the&nbsp;</span><span style="background-color: white; color: #222222;">mailing list archives than just not know about the use (the archive is not&nbsp;</span><span style="background-color: white; color: #222222;">public, however, since legal issues, even potential litigation, are sometimes&nbsp;</span><span style="background-color: white; color: #222222;">discussed).</span></div><div aria-live="assertive" class="ace-line" id="magicdomid20" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid21" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">We would welcome participation by more Python community members (being a PSF&nbsp;</span><span style="background-color: white; color: #222222;">member is not strictly required, just an interest in helping Python maintain&nbsp;</span><span style="background-color: white; color: #222222;">its branding).&nbsp; Helping with the working group is a pretty small time&nbsp;</span><span style="background-color: white; color: #222222;">commitment, but as with many volunteer efforts, folks often drift away from&nbsp;</span><span style="background-color: white; color: #222222;">such efforts over the course of years.&nbsp; By all means contact us if you have an&nbsp;</span><span style="background-color: white; color: #222222;">interest in trademarks and an hour or two a week to spend helping us in these&nbsp;</span><span style="background-color: white; color: #222222;">discussions.</span></div><h2 style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px; text-align: left;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span><span class="author-a-qfz87zh23z65zz78z6j7pkz85z8z81z" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">Our Goals</span></h2><div aria-live="assertive" class="ace-line" id="magicdomid30" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid31" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">The PSF holds registered trademarks in a large number of jurisdictions—</span><span style="background-color: white; color: #222222;">incrementally increasing in number over the years—and "use trademarks"&nbsp;</span><span style="background-color: white; color: #222222;">worldwide.&nbsp; Obviously, legal regimes around intellectual property, and&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">trademarks specifically, vary somewhat around the world; for the most part&nbsp;</span><span style="background-color: white; color: #222222;">trademarks serve a similar purpose everywhere though.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid36" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid37" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">We don't want the brand and reputation of Python to be used in a deceptive&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">manner. However, Python being&nbsp;</span><span class="author-a-qfz87zh23z65zz78z6j7pkz85z8z81z" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">free and open source software (FOSS)</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">, and the PSF being devoted to such&nbsp;</span><span style="background-color: white; color: #222222;">freedom, the licensing policy adopted by the PSF is very liberal and serves the&nbsp;</span><span style="background-color: white; color: #222222;">purpose of promoting the use and knowledge of Python rather than trying to&nbsp;</span><span style="background-color: white; color: #222222;">obtain commercial advantage (as many for-profit product marks are used).</span></div><div aria-live="assertive" class="ace-line" id="magicdomid42" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid43" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">Let's go back to what marks the PSF maintains.&nbsp; The name "Python" is a&nbsp;</span><span style="background-color: white; color: #222222;"><i>wordmark</i>&nbsp;that is registered in many places.&nbsp; Nominative use of the name is&nbsp;</span><span style="background-color: white; color: #222222;">always permitted when it is used to describe the Python programming language.&nbsp;</span><span style="background-color: white; color: #222222;">In contexts such as books devoted to the language or about associated&nbsp;</span><span style="background-color: white; color: #222222;">libraries, tools, etc. we ask publishers to include a small notice in the&nbsp;</span><span style="background-color: white; color: #222222;">front matter that mentions the PSF trademark.&nbsp; We have an </span><span style="background-color: white;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="https://www.python.org/psf/trademarks/" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">official usage policy</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;and a&nbsp;</span></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="https://www.python.org/psf/trademarks-faq/" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">Frequently Asked Questions</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;that detail permitted usage,&nbsp;</span><span style="background-color: white; color: #222222;">with the FAQ having more examples and a less formal tone (probably best to&nbsp;</span><span style="background-color: white; color: #222222;">start with the FAQ if you have questions).</span></div><div aria-live="assertive" class="ace-line" id="magicdomid53" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid54" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">Similarly, the names "PyCon" and "PyLadies" are also wordmarks of the PSF.&nbsp;</span><span style="background-color: white; color: #222222;">The policies around use of&nbsp;</span><span style="background-color: white;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="https://www.python.org/psf/trademarks/pycon/" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">PyCon</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;and of&nbsp;</span></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="https://kit.pyladies.com/en/latest/misc/trademark.html" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">PyLadies</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;are each a&nbsp;</span><span style="background-color: white; color: #222222;">little bit different from the Python wordmark, since they serve&nbsp; different&nbsp;</span><span style="background-color: white; color: #222222;">purposes.&nbsp; Essentially, we want to make sure that when those names are used,&nbsp;</span><span style="background-color: white; color: #222222;">they maintain an identity and advance the goals for which the marks were&nbsp;</span><span style="background-color: white; color: #222222;">created.&nbsp; The PyLadies wordmark is monitored and authorized by the </span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="mailto:info@pyladies.com" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">PyLadies leadership</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;rather than the Trademarks WG, so email&nbsp;</span><span style="background-color: white; color: #222222;">to them is the best place to ask questions of them.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid64" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid64" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><div class="separator" style="clear: both; text-align: center;"><a href="https://www.python.org/static/community_logos/python-logo.png" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" data-original-height="71" data-original-width="211" height="71" src="https://www.python.org/static/community_logos/python-logo.png" width="211" /></a></div></div><h2 style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px; text-align: left;"><span style="background-color: white; color: #222222;">Trademarks are Tricky</span></h2><div aria-live="assertive" class="ace-line" id="magicdomid68" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid69" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">The trickiest part of what we do on the Working Group is approve use of the&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">"two-snakes" </span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7 url" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;"><a href="https://www.python.org/community/logos/" rel="noreferrer noopener" style="box-sizing: border-box; cursor: pointer; margin: 0px; padding: 0px;">Python logo</a></span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">.&nbsp; A great&nbsp;</span><span style="background-color: white; color: #222222;">many really wonderful Python-related user groups, conferences, software&nbsp;</span><span style="background-color: white; color: #222222;">projects, publications, blogs, and other efforts that do a great job of&nbsp;</span><span style="background-color: white; color: #222222;">promoting Python, understandably don't understand the arcana of trademark law.&nbsp;</span><span style="background-color: white; color: #222222;">In particular, the rules we need to maintain about <i>derived logos</i>&nbsp;can feel&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">obscure and counter-intuitive in the F</span><span class="author-a-qfz87zh23z65zz78z6j7pkz85z8z81z" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">OSS</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">&nbsp;world.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid76" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid77" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">The key issue is that <b>trademark is not copyright</b>.&nbsp; For people familiar&nbsp;</span><span style="background-color: white; color: #222222;">with copyleft and software freedom, it feels like the right to create derived&nbsp;</span><span style="background-color: white; color: #222222;">products should be as little restricted as possible, perhaps not at all.&nbsp;</span><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">While I endorse that wholeheartedly for copyright, that's not how trademarks&nbsp;</span><span style="background-color: white; color: #222222;">work—nor, I believe, how they <i>should work</i>.&nbsp; Trademark is instead a kind of&nbsp;</span><span style="background-color: white; color: #222222;">consumer protection, it's a way of saying that a particular thing is what it&nbsp;</span><span style="background-color: white; color: #222222;">purports to be.&nbsp; In a way, a trademark is like a signature or a seal (whether&nbsp;</span><span style="background-color: white; color: #222222;">a physical or a digital version of such); it's a testament to authenticity of&nbsp;</span><span style="background-color: white; color: #222222;">a thing.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid86" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid87" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">Apart from my particular philosophical attitudes about trademarks, the laws&nbsp;</span><span style="background-color: white; color: #222222;">around them have a specific concept of <b>dilution</b>&nbsp;wherein merely&nbsp;</span><span style="background-color: white; color: #222222;"><i>permitting</i>&nbsp;a use that makes a mark less distinct can remove the protection&nbsp;</span><span style="background-color: white; color: #222222;">altogether.&nbsp; Specifically, it means that if the PSF allows groups to make&nbsp;</span><span style="background-color: white; color: #222222;">completely well-meaning, and often even beautiful, changes to the shape of the&nbsp;</span><span style="background-color: white; color: #222222;">two-snakes logo, we could wind up losing the ability to stop malicious actors&nbsp;</span><span style="background-color: white; color: #222222;">from misbranding their non-Python things with the logo.&nbsp; To be clear, many&nbsp;</span><span style="background-color: white; color: #222222;">derived logos are absolutely permissible, and the FAQ discusses what&nbsp;</span><span style="background-color: white; color: #222222;">distinguishes permissible and impermissible derivations (and what can be&nbsp;</span><span style="background-color: white; color: #222222;">"inspired by but not derived from").</span></div><div aria-live="assertive" class="ace-line" id="magicdomid97" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid110" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">Happily, all the good actors we've dealt with, in my 15&nbsp;years working on this,&nbsp;</span><span style="background-color: white; color: #222222;">have come to understand the concerns of the PSF, and have modified their&nbsp;</span><span style="background-color: white; color: #222222;">customized logos in ways that allow us to authorize them.&nbsp; It's slightly&nbsp;</span><span style="background-color: white; color: #222222;">unfortunate that a few others have slipped through simply because the WG never&nbsp;</span><span style="background-color: white; color: #222222;">knew they existed until they were already in use, but we've worked with those&nbsp;</span><span style="background-color: white; color: #222222;">groups (largely conferences and user groups, sometimes software projects) to&nbsp;</span><span style="background-color: white; color: #222222;">fix things going forward.&nbsp; It's a little bit of politics, a little bit of&nbsp;</span><span style="background-color: white; color: #222222;">professionalism, but mostly it's just reaching out to the truly wonderful&nbsp;</span><span style="background-color: white; color: #222222;">people who make up our worldwide Python community.</span></div><div aria-live="assertive" class="ace-line" id="magicdomid107" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span style="background-color: white;"><br style="box-sizing: border-box; margin: 0px; padding: 0px;" /></span></div><div aria-live="assertive" class="ace-line" id="magicdomid108" style="box-sizing: border-box; color: #485365; font-family: RobotoMono; font-size: 15px; margin: 0px; padding: 0px;"><span class="author-a-wz66zdld9kxcz79zz88z3z67zcc7" style="background-color: white; box-sizing: border-box; color: #222222; margin: 0px; padding: 3px 0px 4px;">David Mertz (mertz@gnosis.cx)</span></div>David Mertzhttps://www.blogger.com/profile/03057134173589181346noreply@blogger.comtag:blogger.com,1999:blog-8520.post-9991149535003078252023-02-15T09:08:00.004-05:002023-02-15T09:12:44.444-05:00The Case for a Second Developer-in-Residence for Python<p>As the currently serving sole developer in residence, I’m often asked if there will be more people holding the same position in the future. I strongly believe there should be and that it’s crucial to the long term success of this role. The only open matter is finding sustainable sponsorship for the position.<br /></p><h3 style="text-align: left;">The current developer in residence</h3><p>My day-to-day work revolves around an array of maintenance tasks for the Python Software Foundation with focus on CPython. Since I started in July 2021, I’ve done among others:<br /></p><ul style="text-align: left;"><li>PR review and merging: 627 merges to CPython that lead to closing of 276 issues on the bug tracker, and many more code reviews on Github;</li><li>release management for the 3.8 and 3.9 branches as well as release notes and announcements for other releases;</li><li>following the Python security response team reports that lead to several security releases of Python;</li><li>following the buildbot fleet status and reacting to failures, including maintenance of the only buildbot that runs big memory tests;</li><li>project management of the transition from our previous custom issue tracker to Github Issues;</li><li>migration from a previous custom CLA management bot to EdgeDB CLA bot;</li><li>co-administering <a href="http://discuss.python.org">discuss.python.org</a> including responding to moderation requests;</li><li>co-administering core Python Discord;</li><li>co-chairing the Python Language Summit at PyCon US;</li><li>reviewing talk submissions on the Program Committee for PyCon US;</li><li>facilitating cooperation with other significant Python projects: HPy, PyPy, nogil;</li><li>public speaking (5 events in 2021, 4 events in 2022).</li></ul><h3 style="text-align: left;">The missing big picture</h3><p>While I find this work fulfilling and there’s always more things for me to do that other contributors suggest, one facet of the work can overshadow another. I cannot be in all places at once. Most importantly, while removing obstacles for other core developers (often volunteers) is indeed where we should put paid effort, I sometimes get asked: what’s your big project?<br /><br />At this point I cannot say I had any large personal contribution over the past 18 months of work on CPython, which is ironic, given that I spent more time on it than in the preceding 11 years of core development combined. I had a few attempts at larger changes but inevitably the small busywork eats up my attention.<br /></p><h3 style="text-align: left;">Adding another developer in residence more than doubles the position’s positive impact</h3><p>It’s worth noting that the codebase of CPython is over a million lines of code now and even working on it full time does not mean a single person groks it all. That means that what you’re getting from Łukasz, the Developer in Residence, is something else than what you’d get from Magdalena, the Developer in Residence.<br /><br />That alone means it would be worth having another person with a complementing skill set. But I believe there’s more.<br /><br />Compared to working solo, having a team of two people paid full time to improve the developer experience for the rest of the core contributors, would allow us to take on larger sweeping projects. What we would end up doing would be definitely consulted with the Steering Council and we would take suggestions from the role’s sponsor. But there’s many possibilities!<br /><br />We could add official build support for a new platform like iOS. We could improve test coverage of CPython tests, including coverage of trickier bits like the platform-specific code paths, C code, or code involved in CPython’s interpreter startup. We could revamp the buildbot master server to be more performant. We could be taking on implementation of accepted PEPs. We could upgrade <a href="http://speed.python.org">speed.python.org</a> to be more informative and easy to use. We could move the rest of the custom CPython bots to Github Actions, decreasing needed maintenance, improving performance and reliability. Those are just some ideas.<br /><br />There is one more reason why I’m rooting for another person to join this position. Having another developer in residence would buffer any turbulence the other person has. Whenever I’m sick, or travel, or I’m stuck with a particularly stubborn problem, there would reliably be somebody else the other core developers could count on. This is important not only for them but also for me personally as it would decrease anxiety that builds up any time I’m unable to help somebody who needs me.<br /><br />The ability to split work between two people is something I think about often. In theory there’s a whole team of core developers out there but since they’re mostly volunteers, I’m in no position to tell them what to do. Having a peer paid by the PSF would be different. It would be fair game to share the burden of a gnarly boring task, and that sounds like a wonderful improvement to me.<br /></p><h3 style="text-align: left;">What if there isn’t another developer in residence?</h3><p>I’m not saying the other person is required for me to stay productive. If we don’t find the budget for it, the situation is still better than having no developer in residence at all, I’d like to believe. So far I haven’t received much feedback on my work but I’m always open to hearing suggestions.</p>Łukasz Langahttps://www.blogger.com/profile/12992944444591785142noreply@blogger.comtag:blogger.com,1999:blog-8520.post-2103669823157398462023-02-10T11:09:00.001-05:002023-02-10T11:11:49.801-05:00Python Packaging Strategy Discussion Summary - Part 1<span id="docs-internal-guid-8c4f5279-7fff-711d-b8ef-419613fcc900" style="font-family: arial;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span id="docs-internal-guid-7599a160-7fff-0fdc-0fd7-4481d4836d56"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">As the Python Packaging Project Manager, my work has mostly concentrated on </span><a href="https://wiki.python.org/psf/PackagingWG#PyPI_Organization_Account" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">improving user experience on PyPI</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">. As the Python Packaging ecosystem grows from strength to strength, one of the initiatives I have undertaken is to define a cohesive strategy for Python Packaging.</span></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-weight: 700; white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-weight: 700; white-space: pre-wrap;">My Mission</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="white-space: pre-wrap;">Python Packaging is a diverse landscape dotted with many tools that cater to generic and niche user requirements. </span><span style="white-space: pre-wrap;">As a community, something that is poorly understood is where the community wants to be in 5 years. </span><span style="white-space: pre-wrap;">Understanding where we want to be is important to allow us to identify key goals for the future and how we will </span><span style="white-space: pre-wrap;">reach them, and to ensure we place users at the heart of everything we do. By defining key deliverables driven by community consensus, securing funding becomes easier as we can demonstrate that the community vision will drive innovation and enable better user experience and adoption of Packaging tools.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-weight: 700; white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-weight: 700; white-space: pre-wrap;">User Survey</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">In order to understand what end users are looking for when they use Packaging tools, </span><a href="https://discuss.python.org/t/rfc-survey-to-help-define-a-python-packaging-vision-and-strategy/15658" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">Nicole Harris and I worked</span></a>&nbsp;<a href="https://discuss.python.org/t/rfc-survey-to-help-define-a-python-packaging-vision-and-strategy/15658" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">with the community to finalize the survey questions</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">. </span><a href="https://discuss.python.org/t/your-feedback-required-python-packaging-user-survey/18070" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">Nicole developed the final set of survey questions</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">. The survey </span><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">results are summarized in </span><a href="https://drive.google.com/file/d/1U5d5SiXLVkzDpS0i1dJIA4Hu5Qg704T9/view" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">this document</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><span style="white-space: pre-wrap;">From the survey responses, it was clear that while Packaging tools were improving with time, most users found the landscape too complex to navigate. Based on the survey responses, the strategy discussion was condensed to these topics-</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt; text-align: left;"><b style="font-weight: normal;"><br /></b></p><ol style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Development of a single Packaging tool or a more unified experience</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Better support for Packaging users</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Phasing out legacy systems</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Supporting each other in the community</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Encouraging long-term contribution </span></p></li></ol><div><span style="white-space: pre-wrap;"><br /></span></div><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">This post will summarize the discussion around a single Packaging tool. The other four topics will be the subject of future posts on </span><a href="https://discuss.python.org/c/packaging/14" style="text-decoration-line: none; white-space: pre;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">Discuss</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">.</span></span><div><span style="font-family: arial;"><span style="font-weight: 700; white-space: pre-wrap;"><br /></span></span></div><div><span style="font-family: arial;"><span style="font-weight: 700; white-space: pre-wrap;">One tool to rule them all?</span></span></div><div><span style="white-space: pre-wrap;"><span style="font-family: arial;"><br /></span></span></div><div><span style="white-space: pre-wrap;"><span style="font-family: arial;">An overwhelming majority of users recommended a more unified experience when using Packaging tools. The word cloud below shows the frequency of suggestions for the open-ended question- “If you could improve only one area of Python packaging, what would it be?”</span></span></div><div><span style="white-space: pre-wrap;"><span style="font-family: arial;"><br /></span></span></div><div><span id="docs-internal-guid-f388d76f-7fff-5288-f2d3-532a7f2d1d6b"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><span style="border: none; display: inline-block; height: 361px; overflow: hidden; width: 481px;"><span style="font-family: arial;"><img height="361" src="https://lh5.googleusercontent.com/KsXFmhYnPLC7zhMpD9lR-8YnYV9IXNJimr1QeViiKVTXDmcWtLvujVr-llkDeVoPZC2gGq1Iam0BRUQ1qVm1lrICCwzICXPT9bA_IeF2lrJ2zCOD9_5fkhjV6RMLDZK7TTi-UtVmfulOk-4VzkmxhK8" style="margin-left: 0px; margin-top: 0px;" width="481" /></span></span></span></span></div><div><span id="docs-internal-guid-cae22781-7fff-ab50-587b-df7a3b752efe"><span style="font-family: arial;"><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">To take this discussion further, I invited </span><a href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">maintainers and contributors of any Packaging tool</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"> to answer this question:</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-style: italic; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">“Can we reduce the number of tools and bring about some form of unification? Can we do anything else to reduce the complexity?”</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">After an interesting and lively discussion, we still do not have a clear consensus of what a solution should look like, but we do have a way forward.&nbsp;</span></p><br /><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Since we are at the beginning of this conversation, we don’t know what unification means yet. As </span><a href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/16" style="text-decoration-line: none;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;">Pradyun Gedam suggested</span></a><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">, there are many options as to what it could look like-</span></p><br /><ol style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification of PyPI/conda models&nbsp;</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification of the consumer-facing tooling</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification of the publisher-facing tooling</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification of the workflow setups/tooling</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification/Consistency in the deployment processes</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification/Consistency in “Python” installation/management experience</span></p></li><li aria-level="1" dir="ltr" style="font-variant-east-asian: normal; font-variant-numeric: normal; list-style-type: decimal; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Unification of the interface of tools</span></p></li></ol><div><span style="white-space: pre-wrap;"><br /></span></div><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;">Based on these criteria, there is (some) consensus in driving forward unification of workflow setups/tooling and unification of interface of tools.&nbsp;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The next major question was, if we do go ahead with unification of specific elements, which elements of Packaging would offer the best solution. To provide a unified UI/UX for end users, some of the solutions that were suggested were</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b id="docs-internal-guid-3cec30e5-7fff-94ad-201b-02689617c8f0" style="font-weight: normal;"><br /></b></span></p><ol style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Reusable libraries</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Expanding pip to include more functionalities</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Recommending existing tools such as hatch, poetry etc.</span></p></li></ol><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This discussion also raised a few interesting concerns. Understandably, there is concern over the time and effort that volunteers have devoted in developing tools and whether all this effort will come to naught if we recommend a specific tool. As the discussion continues, there is a large question over the part that PyPA plays and whether PyPA would be willing to take a stand on recommending a specific tool. One concern that keeps coming up is that historically there has been poor communication between PyPA, Packaging tools and end users and if anything will change this time.</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">The way forward</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">In order to flesh out the details of the actual solution, I recommend the following steps:</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><ol style="margin-bottom: 0; margin-top: 0; padding-inline-start: 48px;"><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Identify the tasks that a unified solution has to accomplish</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Identify the best way to deliver the solution. This could be a new tool, expanding an existing tool or developing standards/libraries.</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Submit PEPs to ensure community governance and consensus</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Ensure there is buy-in from end users for proposed solution(s)</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Define development roadmaps, milestones, key deliverables and timeline</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Generate funding to support development</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Develop and deliver</span></p></li><li aria-level="1" dir="ltr" style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; list-style-type: decimal; text-decoration: none; vertical-align: baseline; white-space: pre;"><p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">Communicate, communicate, communicate</span></p></li></ol><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">This will be a long and intensive process. But the time and effort invested in this project will be worth it as it will result in innovation and better user experience.&nbsp;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><b style="font-weight: normal;"><br /></b></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: white; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We will be discussing four more big questions over the next three months that will be used to help us plan the future of Packaging at Python. </span><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">As we continue the strategy discussions, I invite everyone to participate in the discussion threads on </span><a href="https://discuss.python.org/c/packaging/14" style="text-decoration: none;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration-skip-ink: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;">Discuss</span></a><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">.&nbsp;&nbsp;</span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></p><p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"><span style="background-color: transparent; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;">We are grateful to Bloomberg for generously providing the funding for this role and making this valuable work possible.</span></p><div><span style="font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><br /></span></div></span></span></div><div><span><span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;"><span style="border: none; display: inline-block; height: 361px; overflow: hidden; width: 481px;"><br /></span></span></span></div>smmhttps://www.blogger.com/profile/09973567479711266111noreply@blogger.comtag:blogger.com,1999:blog-8520.post-21883940778952495232023-02-08T08:25:00.000-05:002023-02-08T08:25:26.142-05:00Announcing Python Software Foundation Fellow Members for Q4 2022! 🎉<p style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px;"><span style="caret-color: rgb(0, 0, 0); font-family: inherit;">The PSF is pleased to announce its fourth batch of PSF Fellows for 2022! Let us welcome the new PSF Fellows for Q4! The following people continue to do amazing things for the Python community:</span></p><p style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px;"><span style="caret-color: rgb(0, 0, 0); font-family: inherit;"><br /></span></p><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b style="text-align: left;"><span style="font-size: medium;">Chandan Kumar&nbsp;</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><a href="https://twitter.com/raukadah" style="color: #2b5b84; text-decoration-line: none;" target="_blank">Twitter</a><span style="color: #0b5394;">,&nbsp;</span><a href="https://github.com/raukadah" style="color: #2b5b84; text-decoration-line: none;" target="_blank">GitHub</a><span style="color: black;">,&nbsp;</span><a href="https://hachyderm.io/@raukadah" style="color: #2b5b84; text-decoration-line: none;" target="_blank">Mastodon</a></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><span style="font-size: medium;"><span style="text-align: left;"><span style="font-family: inherit;"><b>Danny Adair</b></span></span></span></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><span style="text-align: left;"><span style="font-size: medium;"><a href="https://python.nz" style="color: #2b5b84; font-size: 13.2px; text-align: center; text-decoration-line: none;" target="_blank">Website</a></span></span></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b style="text-align: left;"><span style="font-size: medium;">Hugo van Kemenade&nbsp;</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><span><span style="font-size: medium;"><a href="https://github.com/hugovk" style="color: #2b5b84; font-size: 13.2px; text-decoration-line: none;" target="_blank">GitHub</a><span style="color: black; font-size: 13.2px;">,&nbsp;</span><a href="https://mastodon.social/@hugovk" style="color: #2b5b84; font-size: 13.2px; text-decoration-line: none;" target="_blank">Mastodon</a></span></span></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b><span style="font-size: medium;">Josef Heinen</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><a href="https://twitter.com/josef_heinen" style="color: #2b5b84; text-decoration-line: none;" target="_blank">Twitter</a><span style="color: #0b5394;">,&nbsp;</span><span><a href="https://github.com/jheinen" style="color: #2b5b84; text-decoration-line: none;" target="_blank">GitHub</a><span style="color: black;">,</span>&nbsp;</span><a href="https://gr-framework.org " style="color: #2b5b84; text-decoration-line: none;" target="_blank">Website</a></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b style="text-align: left;"><span style="font-size: medium;">Nicolas Laurance<br /></span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><span style="font-size: 13.2px; text-align: left;"><span style="font-size: medium;"><a href="https://www.linkedin.com/in/nlaurance/" style="color: #2b5b84; font-size: 13.2px; text-align: center; text-decoration-line: none;" target="_blank">LinkedIn</a></span></span></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b><span style="font-size: medium;">Sayan Chowdhury</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><a href="https://twitter.com/yudocaa" style="color: #2b5b84; font-size: 13.2px; text-decoration-line: none;" target="_blank">Twitter</a><span style="color: #0b5394; font-size: 13.2px;">,&nbsp;</span><span style="font-size: 13.2px;"><a href="https://github.com/sayanchowdhury" style="color: #2b5b84; text-decoration-line: none;" target="_blank">GitHub</a><span style="color: black;">,</span>&nbsp;</span><a href="https://yudocaa.in/" style="color: #2b5b84; font-size: 13.2px; text-decoration-line: none;" target="_blank">Website</a></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b style="font-size: 13.2px;"><span style="font-size: medium;">Soong Chee Gi</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><a href="https://twitter.com/gisoongchee " style="color: #2b5b84; text-decoration-line: none;" target="_blank">Twitter</a><span style="color: #0b5394;">,&nbsp;</span><span><a href="https://github.com/cpsggisc " style="color: #2b5b84; text-decoration-line: none;" target="_blank">GitHub</a><span style="color: black;">,</span>&nbsp;</span><a href="https://computing.sg/gisc " style="color: #2b5b84; text-decoration-line: none;" target="_blank">Website</a></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><b style="font-size: 13.2px; text-align: left;"><span style="font-size: medium;">Yung-Yu Chen</span></b></div><div style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: center; text-size-adjust: auto;"><a href="https://www.linkedin.com/in/yungyuc/" style="color: #2b5b84; text-decoration-line: none;" target="_blank">LinkedIn</a><span>,&nbsp;</span><a href="https://twitter.com/yungyuc" style="color: #2b5b84; text-decoration-line: none;" target="_blank">Twitter</a><span style="color: #0b5394;">,</span><span style="color: black;">&nbsp;</span><a href="https://yyc.solvcon.net" style="color: #2b5b84; text-decoration-line: none;" target="_blank">Website</a>&nbsp;</div><p style="color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: justify; text-size-adjust: auto;"><span style="text-align: left;">Thank you for your continued contributions. We have added you to our Fellow roster</span><span class="Apple-converted-space" style="text-align: left;">&nbsp;</span><a href="https://www.python.org/psf/fellows-roster/" style="-webkit-print-color-adjust: exact; color: #4183c4; font-family: inherit; text-align: left; text-decoration-line: none;">online</a><span style="text-align: left;">.</span></p><p style="-webkit-print-color-adjust: exact; caret-color: rgb(0, 0, 0); color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-align: justify; text-size-adjust: auto;"><span style="font-family: inherit;">The above members help support the Python ecosystem by being phenomenal leaders, sustaining the growth of the Python scientific community, maintaining virtual Python communities, maintaining Python libraries, creating educational material, organizing Python events and conferences, starting Python communities in local regions, and overall being great mentors in our community. Each of them continues to help make Python more accessible around the world. To learn more about the new Fellow members, check out their links above.</span></p><p style="-webkit-print-color-adjust: exact; caret-color: rgb(0, 0, 0); color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-size-adjust: auto;"><span style="font-family: inherit;">Let's continue recognizing Pythonistas all over the world for their impact on our community. The criteria for Fellow members is available online:&nbsp;<a href="https://www.python.org/psf/fellows/" style="color: #2b5b84; text-decoration-line: none;">https://www.python.org/psf/fellows/</a>. If you would like to nominate someone to be a PSF Fellow, please send a description of their Python accomplishments and their email address to psf-fellow at python.org. We are accepting nominations for quarter 1 through February 20, 2023.</span></p><p style="-webkit-print-color-adjust: exact; caret-color: rgb(0, 0, 0); color: #666666; font-family: &quot;Trebuchet MS&quot;, Trebuchet, Verdana, sans-serif; font-size: 13.2px; margin: 15px 0px; text-size-adjust: auto;"><span style="font-family: inherit;">Are you a PSF Fellow and want to help the Work Group review nominations? Contact us at&nbsp;psf-fellow at python.org.</span></p>Olivia Saulshttps://www.blogger.com/profile/02332425566237042576noreply@blogger.comtag:blogger.com,1999:blog-8520.post-2614807101090560712023-01-26T10:26:00.001-05:002023-01-26T14:58:23.310-05:00The PSF is hiring a Security Developer-in-Residence! The Python Software Foundation (PSF) is happy to announce the launch of a year-long security enhancement initiative that will include a security audit and the creation of a new Security Developer-in-Residence role. Generous funding by the OpenSSF’s Alpha-Omega Project has made this work possible.<br /><br />Recent open source supply chain security attacks on open source projects and infrastructure have increased awareness of the critical role projects like Python and the <a href="https://pypi.org/">Python Package Index </a>(PyPI) play in providing a safe and secure ecosystem for millions of open source users. Historically, the Python Software Foundation’s ability to make key security improvements has only been realized when dedicated teams of volunteers or its existing infrastructure staff make time, or when it has received occasional grants, such as the <a href="https://pyfound.blogspot.com/2019/03/commencing-security-accessibility-and.html">introduction of 2FA and other security improvements to PyPI in 2019</a>.<br /><br />The Security Developer-in-Residence will work full-time during the initiative to formalize existing security practices and become more proactive in Python-related security improvements. The new role will be responsible for addressing security issues across PSF projects such as CPython and PyPI, and applying knowledge and expertise and working with volunteers to implement key improvements in a timely manner. They will also establish new processes and features that make it easier to prevent, detect, and respond to security risks to lay a foundation that makes it easier and more sustainable for the community to identify and address security issues going forward.<br /><br />The Security Developer-in-Residence job is posted <a href="https://jobs.pyfound.org/apply/TwgMP1b4OV/Security-Developer-In-Residence">HERE</a>. Please take a look and and share with your friends and colleagues. <br /><br />This role is funded by a substantial investment from the <a href="https://openssf.org/">Open Software Security Foundation</a>’s <a href="https://openssf.org/community/alpha-omega/">Alpha-Omega Project</a>. The OpenSSF is a non-profit cross-industry collaboration that brings together leaders to improve the security of open source software by building a broader community, targeted initiatives, and best practices. The OpenSSF brings together open source security initiatives under one foundation to accelerate work through cross-industry support.<br /><br />The PSF is a non-profit whose mission is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. The PSF supports the Python community using corporate sponsorships, grants, and donations. Are you interested in sponsoring or donating to the PSF so it can continue supporting Python and its community? Check out our <a href="https://www.python.org/sponsors/application/">sponsorship program</a>, <a href="https://psfmember.org/civicrm/contribute/transact?reset=1&amp;id=2">donate directly here</a>, or <a href="mailto:sponsors@python.org">contact our team</a>!Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-46333703322545621402023-01-10T10:36:00.000-05:002023-01-10T10:36:18.772-05:00Starting 2023 with momentum, thanks to you!<p>We are grateful to each of you who shared or donated to our year-end fundraiser and membership drive. Over 300 individual donations plus new Supporting Memberships, renewals, and JetBrains’ generous match came together to raise $61,868 total for our work supporting Python and the Python community! This generosity means we can confidently start 2023 by investing in our key goals for the year, knowing the community is behind us. <br /><br />Those goals include:<br /></p><ul style="text-align: left;"><li>deepening our global reach</li><li>supporting more community endeavors </li><li>making Python even more sustainable, from both an infrastructure and security perspective</li></ul><p>Community investment–of money, but also time, energy, ideas, and enthusiasm–is critical to reaching each of these goals.&nbsp;</p><p>Supporting Membership is a great way for the community to invest in the PSF’s work. We were delighted to meet and then exceed <a href="https://pyfound.blogspot.com/2022/11/its-time-for-our-annual-year-end-psf.html">our goal</a> of 100 new Supporting Members: 174 new Supporting Members stepped up to become champions of the PSF! It was exciting to see that 29 of those new Supporting Members were able to join based on <a href="https://pyfound.blogspot.com/2022/12/introducing-new-sliding-scale-membership.html">our new sliding scale rate option</a>. Welcome aboard, new members, and thank you for joining us! We’re looking forward to having your voice take part in the PSF’s future.<br /><br />Because the PSF doesn’t buy lists or ads, your help in sharing our fundraiser with your networks makes a big difference, and we really appreciate how many of you took the extra time to help promote it. We’re excited about where 2023 will take us together, and as always, we’d love to hear your ideas and feedback. Looking for how to keep in touch with us? You can find all the ways <a href="https://pyfound.blogspot.com/2022/11/where-is-psf.html">here</a>. <br /><br />Wishing you and yours a happy, healthy, and Pythonic new year,<br /><br />Deb</p>Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-87422587110524234172022-12-22T11:08:00.000-05:002022-12-22T11:08:34.874-05:00More Python Everywhere, All at Once: Looking Forward to 2023The PSF works hard throughout the year to put on <a href="https://us.pycon.org/2023/">PyCon US</a>, support smaller Python events around the world through our <a href="https://www.python.org/psf/grants/">Grants program</a> and of course to provide the critical infrastructure and expertise that keep CPython and PyPI running smoothly for the 8 million (and growing!) worldwide base of Python users. We want to invest more deeply in education and outreach in 2023, and donations from individuals (like you) can make sure we have the resources to start new projects and sustain them alongside our critical community functions. <br /><br /><a href="https://www.python.org/psf/donations/2022-q4-drive/">Supporting Membership</a> is a particularly great way to contribute to the PSF. By becoming a Supporting Member, you join a core group of PSF stakeholders, and since Supporting Members are eligible to vote in our Board and bylaws elections, you gain a voice in the future of the PSF. And we have just introduced <a href="https://pyfound.blogspot.com/2022/12/introducing-new-sliding-scale-membership.html">a new sliding scale rate for Supporting Members</a>, so you can join at the standard rate of an annual $99 contribution, or for as little as $25 annually if that works better for you. We are about three quarters of the way to our goal of 100 new supporting members by the end of 2022 – Can you <a href="https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=1">sign up today</a> and help push us over the edge?<br /><br />Thank you for reading and for being a part of the one-of-a-kind community that makes Python and the PSF so special.<br /><br />With warmest wishes to you and yours for a happy and healthy new year,<br />DebDeb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-66627241208095886072022-12-08T14:16:00.000-05:002022-12-08T14:16:20.444-05:00Introducing a New Sliding Scale MembershipThe Python Software Foundation (PSF) has made a sliding scale option available for Supporting Membership, because we want to make membership more accessible for more people and to increase the size and diversity of our voting membership. New Supporting Members can join the PSF for as little as $25. Our goal is to make our Membership program more accessible to Supporters who live in a country with lower average incomes than the US or Western Europe or those who are currently students or are currently unemployed or under-employed. We are relying on Members to self-select their rate, so anyone who finds our suggested $99 membership rate a financial burden can choose a Membership rate that works for them, starting at $25.<br /><br />Part of our mission at the PSF is to “facilitate the growth of a <a href="https://www.python.org/psf/diversity/">diverse</a> and international community of Python programmers.” Our community <a href="https://www.python.org/psf/grants/">Grants Program</a> and our <a href="https://us.pycon.org/2023/attend/travel-grants/">Travel Grants</a> for PyCon US have paved the way for a lot of growth, both internationally and amongst populations that are otherwise under-indexed in Python specifically, and open source generally. One area where this outreach hasn’t “trickled up” as much as we’d like is our leadership. Supporting Members can vote for our Board of Directors. If our roster of voting members can more accurately represent the entire Python community, then we can more reasonably expect the make-up of the Board to follow. <br /><br />There are of course many other things we could consider doing to increase the diversity of the Python community. We <a href="mailto:psf-donations@python.org">welcome your thoughts</a> on how we can continue to improve. <br /><br />In the meantime, our annual membership and fundraising drive is <a href="https://www.python.org/psf/donations/2022-q4-drive/">happening right now</a> and we hope that you will consider becoming a Supporting Member at $25, $99, or anything in between (or more if you have the means.) A second task you could do to support our membership drive is to share it on social media or with your friends and colleagues who use Python. We prefer to rely on word of mouth, rather than purchasing leads or haunting people with ads all over the internet, so thanks in advance for your help!Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.comtag:blogger.com,1999:blog-8520.post-60787038367754139232022-11-23T18:47:00.002-05:002022-11-23T18:53:53.536-05:00Where is the PSF?<p style="text-align: left;"></p><h2 style="text-align: left;">Where to Find the PSF Online<br /></h2><p style="text-align: left;">One of the main ways we reach people for news and information about the PSF and Python is Twitter. There’s been a lot of uncertainty around that platform recently, so we wanted to share a brief round up of other places you can find us:<br /></p><ul style="text-align: left;"><li><b>Read our blog</b>: It’s here! You found it! You can always find our latest updates here at <a href="http://pyfound.blogspot.com">pyfound.blogspot.com</a>.</li><li><b>Subscribe to our newsletter</b>: We send out an email newsletter about every other month.&nbsp; You can sign up here: <a href="https://www.python.org/psf/newsletter/">https://www.python.org/psf/newsletter/</a><br /></li><li><b>Follow us on LinkedIn</b>: <a href="https://www.linkedin.com/company/python-software-foundation">https://www.linkedin.com/company/python-software-foundation</a></li><li><b>Follow us on Mastodon</b>: <a href="https://fosstodon.org/@thepsf">https://fosstodon.org/@thepsf</a></li><li><b>We're still on Twitter: </b><a href="https://twitter.com/ThePSF">https://twitter.com/ThePSF</a> <br /></li></ul><p style="text-align: left;">As always, if you are looking for technical support rather than news about the foundation, we have collected links and resources here for people who are new or looking to get deeper into the Python programming language: <a href="https://www.python.org/about/gettingstarted/">https://www.python.org/about/gettingstarted/</a><br /><br />You can also ask questions about Python or the PSF at<a href="https://discuss.python.org/"> discuss.python.org</a><br /></p><h2 style="text-align: left;">Where to Find PyCon US Online<br /></h2><p style="text-align: left;">Here’s where you can go for updates and information specific to PyCon US:<br /></p><ul style="text-align: left;"><li><b>Read the PyCon US blog</b>: <a href="https://pycon.blogspot.com/">https://pycon.blogspot.com/</a> </li><li><b>Subscribe to the PyCon US Newsletter</b>. We send out an email newsletter about four times a year, during the run up to PyCon US. You can sign up here: <a href="http://bit.ly/3ElTPzv">bit.ly/3ElTPzv</a></li><li><b>Follow PyCon US on Mastodon</b>: <a href="https://fosstodon.org/@pycon">https://fosstodon.org/@pycon</a></li><li><b>Follow PyCon US on Twitter: </b><a href="https://twitter.com/PyCon">https://twitter.com/PyCon</a> <br /></li></ul><p style="text-align: left;">&nbsp;</p><p style="text-align: left;">&nbsp;Thank you for keeping in touch, and see you around the Internet!<br /></p><p style="text-align: left;"><br /></p><p style="text-align: left;"><br /></p>Loren Craryhttps://www.blogger.com/profile/06125752284896762014noreply@blogger.comtag:blogger.com,1999:blog-8520.post-32782317252878433342022-11-07T12:30:00.001-05:002022-11-07T12:30:00.181-05:00It's time for our annual year-end PSF fundraiser and membership drive 🎉<h3 style="text-align: left;"><span style="font-size: large;">Support Python in 2022!</span><br /></h3><h3 style="text-align: left;"><div class="separator" style="clear: both; text-align: center;"><a href="https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/psf/donations/2022-q4-drive/DSGN-14794_PyCharm_PSF_campaign_Blog_Social_share_image_1280x720.png" style="margin-left: 1em; margin-right: 1em;"><img border="0" data-original-height="450" data-original-width="800" height="294" src="https://s3.dualstack.us-east-2.amazonaws.com/pythondotorg-assets/media/psf/donations/2022-q4-drive/DSGN-14794_PyCharm_PSF_campaign_Blog_Social_share_image_1280x720.png" width="523" /></a></div><br /></h3><p style="text-align: left;"><span style="font-size: small;">For the fourth year in a row, the PSF is partnering with JetBrains on our end-of-year fundraiser. Over that time, the partnership has raised a total of over $75,000. Wow! Thank you, JetBrains, for all your support.</span></p><h3 style="text-align: left;"></h3><h4 style="text-align: left;"><span style="font-size: medium;">There are three ways to join in the drive this year: </span></h4><ul style="text-align: left;"><li><b><span style="font-size: medium;"><a href="https://jb.gg/support-python-with-jetbrains" target="">Save on PyCharm + get DataSpell <i>free</i></a></span>!</b> JetBrains is once again supporting the PSF by providing a 30% discount on PyCharm and all proceeds will go to the PSF! But wait–there’s more! JetBrains has released DataSpell, a new IDE specifically for Data Scientists. When you buy your discounted PyCharm license, you will also get a bonus DataSpell license, free! <br />You can take advantage of this discount by<a href="https://jb.gg/support-python-with-jetbrains"> clicking the button on</a><a href="https://jb.gg/support-python-with-jetbrains"> the page linked here</a>, and the discount will be automatically applied when you check out. The promotion will only be available through November 22nd, so go grab the deal today!</li><li><span style="font-size: medium;"><a href="https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=40"><b>Donate</b></a><a href="https://psfmember.org/civicrm/contribute/transact/?reset=1&amp;id=40"><b> directly to the PSF</b></a>!</span> Every dollar makes a difference. (Does every dollar also make a kitten somewhere purr? We make no promises, but maybe you should try, just in case?😻)</li><li><span style="font-size: medium;"><a href="https://psfmember.org/"><b>Become a member</b></a>!</span> Sign up as a Supporting member of the PSF. Be a part of the PSF, and help us sustain what we do with your annual support.</li></ul><p>Or, heck, why not do all three? 🥳</p><p><span></span></p><a name='more'></a><p></p><div style="margin-left: 40px; text-align: left;"><span style="color: #0b5394;"><span style="font-size: xx-small;"><span style="font-family: courier;"><i>Your donations:&nbsp;</i></span></span></span></div><ul style="margin-left: 80px; margin-right: 80px; text-align: justify;"><li><span style="color: #0b5394;"><span style="font-size: xx-small;"><span style="font-family: courier;"><i>keep Python going</i></span></span></span></li><li><span style="color: #0b5394;"><span style="font-size: xx-small;"><span style="font-family: courier;"><i>invest directly in CPython and PyPI progress</i></span></span></span></li><li><span style="color: #0b5394;"><span style="font-size: xx-small;"><span style="font-family: courier;"><i>bring the global Python community together</i></span></span></span></li><li><span style="color: #0b5394;"><span style="font-size: xx-small;"><span style="font-family: courier;"><i>make that community more diverse and thriving every year</i></span></span></span></li></ul><h4 style="text-align: left;"><span style="font-size: medium;"><span><!--more--></span></span></h4><div style="text-align: left;"><span style="font-size: x-small;">&nbsp;</span></div><h4 style="text-align: left;"><span style="font-size: medium;">Let’s also take this time to look back at 2022.</span></h4><p style="text-align: left;"><b>Highlights from 2022:</b><br /></p><ul style="text-align: left;"><li><b>PyCon US</b> - Our first hybrid PyCon US, in Salt Lake City and online, was a roaring success! It was great to be back in person, and we’re grateful to all the speakers, volunteers, attendees, and sponsors who make it such a special event.</li><li><b>CPython Developer in Residence</b> - Łukasz Langa completed his first year as our inaugural developer in residence. This role has been a longtime dream for the community, and it’s been great to see&nbsp; Łukasz hitting important milestones: driving down the PR backlog, completing the migration of bugs.python.org to GitHub, and more.</li><li><b>Welcome, Deb! </b>Executive Director Deb Nicholson took the helm of the PSF, bringing with her a wealth of experience in Open Source and Python communities and nonprofit leadership. </li><li><b>Investing in infrastructure</b> - We doubled the size of our infrastructure team this year with the hire of Chloe Gerhardson as Infrastructure Engineer, joining Director of Infrastructure Ee Durbin. Their work makes sure the infrastructure behind Python. PyPI, and the PSF is stable and scales with the growth of the Python ecosystem. <br /></li></ul><h4 style="text-align: left;"><span style="font-size: medium;">Thank you for being a part of this drive and of the Python community!</span><br /></h4><p style="text-align: left;">Keep an eye on this space and on our social media in the coming weeks for updates on the drive and the PSF 👀</p><p style="text-align: left;"><br />Your support means the world to us. We’re incredibly grateful to be in community with you! <br /><br /><br /></p>Loren Craryhttps://www.blogger.com/profile/06125752284896762014noreply@blogger.comtag:blogger.com,1999:blog-8520.post-43642980856087385982022-11-01T15:25:00.001-04:002022-11-01T17:18:26.428-04:00Thank You for Making PyCon US amazing, Jackie!<span style="font-size: small;">Jackie Augustine is moving on from her role of Director of Events at the PSF. Please join me in thanking Jackie for all of her amazing work with our volunteers, vendors, and staff. Her energy, heart, and dedication will be keenly missed. <br /><br /><br />Jackie says, “PyCon US will forever be in my heart. Mostly because of all the wonderful people I have met and come to love. The community members, the board directors, the many volunteers, and especially the staff of the PSF have enhanced my life tremendously. I will truly miss everyone.”<br /><br /><br />Jackie has been working with the PSF on PyCon US for 10 years and most recently managed our pivot to two years of remote PyCons. She also oversaw our return to a safe and fulfilling in-person <a href="https://pyfound.blogspot.com/2022/06/pycon-us-successful-return-to-in-person.html">PyCon</a> earlier this year. PyCon US would not be the successful and growing event it is today without her work. <br /><br /><br />The PSF’s Director of Infrastructure Ee Durbin shared, “For most PyCon US is a few precious days in the spring each year. For some it is months of preparing a presentation, organizing a summit, or volunteering their time. For Jackie it has been a continuous and heartfelt commitment year over year to facilitate every detailed aspect of the conference, both in-person and online, that we cherish. The impact Jackie has had on our community via PyCon US is hard to overstate and our gratitude should be as deep and heartfelt as the commitment she made in her time directing the event.”<br /><br /><br />So, what’s next for us? Our extremely capable Event Assistant, Olivia Sauls will be stepping up into the role of Program Director and we will be <a href="https://www.python.org/communityeventsjob/" target="_blank">hiring a Community Events Manager</a> to help us run PyCon US. It would be lovely if you could help us by sharing the job listing widely. </span>Deb Nicholsonhttps://www.blogger.com/profile/06173618710147431813noreply@blogger.com