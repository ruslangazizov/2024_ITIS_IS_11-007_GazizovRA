Python Developer’s Guide
Contents
Menu
Expand
Light mode
Dark mode
Auto light/dark mode
Hide navigation sidebar
Hide table of contents sidebar
Toggle site navigation sidebar
Python Developer's Guide
Toggle Light / Dark / Auto color theme
Toggle table of contents sidebar
Python Developer's Guide
Getting startedToggle navigation of Getting started
Setup and building
Fixing “easy” issues (and beyond)
Git bootcamp and cheat sheet
Lifecycle of a pull request
Where to get help
Development workflowToggle navigation of Development workflow
Following Python’s development
Development cycle
Adding to the stdlib
Standard library extension modules
Changing Python’s C API
Changing the Python language
Changing CPython’s grammar
Porting to a new platform
Software Bill-of-Materials (SBOM)
Issues and triagingToggle navigation of Issues and triaging
Issue tracker
Triaging an issue
GitHub labels
GitHub issues for BPO users
Triage Team
DocumentationToggle navigation of Documentation
Getting started
Helping with documentation
Style guide
reStructuredText markup
Translating
Helping with the Developer’s Guide
Testing and buildbotsToggle navigation of Testing and buildbots
Running and writing tests
Silence warnings from the test suite
Increase test coverage
Working with buildbots
New buildbot workers
Development toolsToggle navigation of Development tools
Argument Clinic
GDB support
Dynamic analysis with Clang
Coverity Scan
Core developersToggle navigation of Core developers
Responsibilities
Accepting pull requests
Experts index
Developer log
Motivations and affiliations
How to become a core developer
CPython’s internalsToggle navigation of CPython’s internals
CPython source code
Guide to the parser
Compiler design
The bytecode interpreter (3.11)
Garbage collector design
Status of Python versions
Back to top
Edit this page
Toggle Light / Dark / Auto color theme
Toggle table of contents sidebar
Python Developer’s Guide#
This guide is a comprehensive resource for contributing
to Python – for both new and experienced contributors. It is
maintained by the same
community that maintains Python.  We welcome your contributions to Python!
Quick reference#
Here are the basic steps needed to get set up and contribute a patch.
This is meant as a checklist, once you know the basics. For complete
instructions please see the setup guide.
Install and set up Git and other dependencies
(see the Git Setup page for detailed information).
Fork the CPython repository
to your GitHub account and get the source code using:
git clone https://github.com/<your_username>/cpython
cd cpython
Build Python:
Unix
./configure --with-pydebug && make -j
macOS
./configure --with-pydebug && make -j
Windows
PCbuild\build.bat -e -d
See also more detailed instructions,
how to install and build dependencies,
and the platform-specific pages for Unix,
macOS, and Windows.
Run the tests:
Unix
./python -m test -j3
macOS
./python.exe -m test -j3
Note: Most macOS systems use
./python.exe in order to avoid filename conflicts with
the Python directory.
Windows
.\python.bat -m test -j3
Create a new branch where your work for the issue will go, e.g.:
git checkout -b fix-issue-12345 main
If an issue does not already exist, please create it.  Trivial issues (e.g. typo fixes) do
not require any issue to be created.
Once you fixed the issue, run the tests, and the patchcheck:
Unix
make patchcheck
macOS
make patchcheck
Windows
.\python.bat Tools\patchcheck\patchcheck.py
If everything is ok, commit.
Push the branch on your fork on GitHub and create a pull request.  Include the issue number using gh-NNNN in the
pull request description.  For example:
gh-12345: Fix some bug in spam module
Add a News entry into the Misc/NEWS.d directory as individual file. The
news entry can be created by using blurb-it,
or the blurb tool and its blurb add
command. Please read more about blurb in its
repository.
Note
First time contributors will need to sign the Contributor Licensing
Agreement (CLA) as described in the Licensing section of
this guide.
Quick links#
Here are some links that you probably will reference frequently while
contributing to Python:
Issue tracker
Buildbot status
Where to get help
PEPs (Python Enhancement Proposals)
Git bootcamp and cheat sheet
Contributing#
We encourage everyone to contribute to Python and that’s why we have put up this
developer’s guide.  If you still have questions after reviewing the material in
this guide, then the Core Python Mentorship group is available to help guide new
contributors through the process.
A number of individuals from the Python community have contributed to a series
of excellent guides at Open Source Guides.
Core developers and contributors alike will find the following guides useful:
How to Contribute to Open Source
Building Welcoming Communities
Guide for contributing to Python:
Contributors
Documentarians
Triagers
Core Developers
Setup and building
Helping with documentation
Issue tracker
Responsibilities
Where to get help
Getting started
Triaging an issue
Developer log
Lifecycle of a pull request
Style guide
Helping triage issues
Accepting pull requests
Running and writing tests
reStructuredText primer
Experts index
Development cycle
Fixing “easy” issues (and beyond)
Translating
GitHub labels
Motivations and affiliations
Following Python’s development
Helping with the Developer’s Guide
GitHub issues for BPO users
Core developers office hours
Git bootcamp and cheat sheet
Triage Team
Experts index
Development cycle
We recommend that the documents in this guide be read as needed. You
can stop where you feel comfortable and begin contributing immediately without
reading and understanding these documents all at once.  If you do choose to skip
around within the documentation, be aware that it is written assuming preceding
documentation has been read so you may find it necessary to backtrack to fill in
missing concepts and terminology.
Proposing changes to Python itself#
Improving Python’s code, documentation and tests are ongoing tasks that are
never going to be “finished”, as Python operates as part of an ever-evolving
system of technology.  An even more challenging ongoing task than these
necessary maintenance activities is finding ways to make Python, in the form of
the standard library and the language definition, an even better tool in a
developer’s toolkit.
While these kinds of change are much rarer than those described above, they do
happen and that process is also described as part of this guide:
Adding to the stdlib
Changing the Python language
Other interpreter implementations#
This guide is specifically for contributing to the Python reference interpreter,
also known as CPython (while most of the standard library is written in Python,
the interpreter core is written in C and integrates most easily with the C and
C++ ecosystems).
There are other Python implementations, each with a different focus.  Like
CPython, they always have more things they would like to do than they have
developers to work on them.  Some major examples that may be of interest are:
PyPy: A Python interpreter focused on high speed (JIT-compiled) operation
on major platforms
Jython: A Python interpreter focused on good integration with the Java
Virtual Machine (JVM) environment
IronPython: A Python interpreter focused on good integration with the
Common Language Runtime (CLR) provided by .NET and Mono
Stackless: A Python interpreter focused on providing lightweight
microthreads while remaining largely compatible with CPython specific
extension modules
MicroPython: A tiny Python interpreter with small subset of the Python
standard library that is optimised to run on microcontrollers and in
constrained environments.
CircuitPython: A fork of MicroPython designed to simplify experimenting
and learning to code on low-cost microcontroller boards.
Key resources#
Coding style guides
PEP 7 (Style Guide for C Code)
PEP 8 (Style Guide for Python Code)
Issue tracker
Experts index
Buildbot status
Source code
Browse online
Snapshot of the *main* branch
PEPs (Python Enhancement Proposals)
Where to get help
Developer log
Additional resources#
Anyone can clone the sources for this guide.  See Helping with the Developer’s Guide.
Help with …
CPython source code
Changing CPython’s grammar
Guide to the parser
Compiler design
Garbage collector design
Tool support
GDB support
Dynamic analysis with Clang
Various tools with configuration files as found in the Misc directory
Information about editors and their configurations can be found in the
wiki
python.org maintenance
Search this guide
Code of conduct#
Please note that all interactions on
Python Software Foundation-supported
infrastructure is covered
by the PSF Code of Conduct,
which includes all infrastructure used in the development of Python itself
(e.g. mailing lists, issue trackers, GitHub, etc.).
In general this means everyone is expected to be open, considerate, and
respectful of others no matter what their position is within the project.
Status of Python branches#
Moved to Status of Python versions
Full table of contents#
Getting started
Setup and building
Install Git
Get the source code
Compile and build
Install dependencies
Regenerate configure
Regenerate the ABI dump
Troubleshoot the build
Editors and tools
Directory structure
Contribute using GitHub Codespaces
Fixing “easy” issues (and beyond)
Git bootcamp and cheat sheet
Forking CPython GitHub repository
Cloning a forked CPython repository
Configure the remotes
Listing the remote repositories
Setting up your name and email address
Enabling autocrlf on Windows
Creating and switching branches
Deleting branches
Renaming branch
Staging and committing files
Reverting changes
Stashing changes
Comparing changes
Pushing changes
Creating a pull request
Linking to issues and pull requests
Updating your CPython fork
Applying a patch to Git
Downloading other’s patches
Accepting and merging a pull request
Cancelling an automatic merge
Backporting merged changes
Editing a pull request prior to merging
GitHub CLI
Git worktree
Lifecycle of a pull request
Introduction
Quick guide
Step-by-step guide
Making good PRs
patchcheck
Making good commits
Licensing
Submitting
Converting an existing patch from b.p.o to GitHub
Reviewing
Keeping continuous integration green
Committing/rejecting
Crediting
Where to get help
Discourse
Mailing lists
Ask #python-dev
Core mentorship
Core developers office hours
File a bug
Development workflow
Following Python’s development
Standards of behaviour in these communication channels
Mailing lists
Discourse (discuss.python.org web forum)
Discord (private chat server)
IRC
Blogs
Setting expectations for open source participation
Additional repositories
Development cycle
Branches
Stages
Repository administration
Governance
Adding to the stdlib
Adding to a pre-existing module
Adding a new module
Standard library extension modules
Changing Python’s C API
The internal API
Public C API
Unstable C API
Limited API
Changing the Python language
What qualifies
Suggesting new features and language changes
PEP process
Changing CPython’s grammar
Abstract
Checklist
Porting to a new platform
Software Bill-of-Materials (SBOM)
Updating a dependency
Adding a new dependency
Removing a dependency
Issues and triaging
Issue tracker
Using the issue tracker
Disagreement with a resolution on the issue tracker
Triaging an issue
Checklist for triaging
Helping triage issues
GitHub labels
Type labels
Component labels
OS labels
Topic labels
Version labels
Other labels
Labels specific to PRs
GitHub issues for BPO users
How to format my comments nicely?
How to attach files to an issue?
How to link to file paths in the repository when writing comments?
How to do advanced searches?
Where is the “nosy list”?
How to add issue dependencies?
What on earth is a “mannequin”?
Where did the “resolution” field go?
Where did the “low”, “high”, and “critical” priorities go?
How to find a random issue?
Where are regression labels?
Triage Team
Becoming a member of the Python triage team
Documentation
Getting started
Introduction
Building the documentation
Helping with documentation
Python documentation
Helping with documentation issues
Proofreading
Style guide
Footnotes
Capitalization
Diátaxis
Links
Affirmative tone
Economy of expression
Security considerations (and other concerns)
Code examples
Code equivalents
Audience
reStructuredText markup
Quick reference
reStructuredText primer
Typographic conventions
Additional markup constructs
Translating
Starting a new translation
PEP 545 summary
How to get help
Translation FAQ
Helping with the Developer’s Guide
Developer’s Guide workflow
Testing and buildbots
Running and writing tests
Running
Writing
Benchmarks
Silence warnings from the test suite
Increase test coverage
Common gotchas
Measuring coverage
Filing the issue
Measuring coverage of C code with gcov and lcov
Working with buildbots
In case of trouble
Buildbot failures on pull requests
Checking results of automatic builds
Stability
Flags-dependent failures
Ordering-dependent failures
Transient failures
Custom builders
New buildbot workers
Preparing for buildbot worker setup
Setting up the buildbot worker
Buildbot worker operation
Required ports
Required resources
Security considerations
Development tools
Argument Clinic
Background
Reference
Tutorial
How-to guides
GDB support
Page moved
CPython tips
Dynamic analysis with Clang
What is Clang?
What are sanitizers?
Clang/LLVM setup
Python build setup
Coverity Scan
Access to analysis reports
Building and uploading analysis
Known limitations
Modeling
Workflow
Contact
Core developers
Responsibilities
Communication channels and bug notifications
Sign a contributor agreement
Pull request merging
Expectations
Accepting pull requests
Assessing a pull request
Updating NEWS and What’s New in Python
Working with Git
Experts index
Stdlib
Tools
Platforms
Miscellaneous
Documentation translations
Developer log
Procedure for granting or dropping access
Motivations and affiliations
Published entries
Goals of this page
Limitations on scope
How to become a core developer
What it takes
Gaining commit privileges
CPython’s internals
CPython source code
Source code layout
Additional references
Guide to the parser
Abstract
How PEG parsers work
Syntax
Pegen
Testing
Debugging generated parsers
References
Compiler design
Abstract
Parsing
Abstract syntax trees (AST)
Memory management
Source code to AST
Control flow graphs
AST to CFG to bytecode
Code objects
Important files
Objects
Specializing Adaptive Interpreter
References
The bytecode interpreter (3.11)
Preface
Introduction
Code objects
Instruction decoding
Jumps
Inline cache entries
The evaluation stack
Error handling
Python-to-Python calls
The call stack
All sorts of variables
Other topics
Introducing new bytecode
Garbage collector design
Abstract
Memory layout and object structure
Identifying reference cycles
Destroying unreachable objects
Optimization: generations
Optimization: reusing fields to save memory
Optimization: delay tracking containers
Differences between GC implementations
Status of Python versions
Python release cycle
Supported versions
Unsupported versions
Status key
Next
Getting started
                Copyright © 2011-2024, Python Software Foundation
            
            Made with Sphinx and @pradyunsg's
            
            Furo
            On this page
          
Python Developer’s Guide
Quick reference
Quick links
Contributing
Proposing changes to Python itself
Other interpreter implementations
Key resources
Additional resources
Code of conduct
Status of Python branches
Full table of contents